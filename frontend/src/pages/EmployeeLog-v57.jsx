/*
 * File: EmployeeLog-v57.jsx
 * Path: frontend/src/pages/EmployeeLog-v57.jsx
 * Purpose: Employee log in/out system with accounting and AI predictions.
 * Dependencies: react, antd, moment, @tensorflow/tfjs
 * Change Log:
 *   - 04/07/2025: Generated by Grok with AI
 *   - 2025-04-19: Updated for task 8249b9a5-e7c8-4df2-bbee-197a6706ae33
 * Notes:
 *   - Generated for task: 8249b9a5-e7c8-4df2-bbee-197a6706ae33 with prompt: "Build CRM System".
 *   - Prior Purpose: N/A
 *   - Goals: Track employee time, integrate with CRM
 *   - Enhancements: Hours tracking, AI predictions, modern UI
 *   - Future: Sync with EmployeeDash.jsx, add API storage
 */
import React, { useState, useEffect } from 'react';
import { Button, Table, message } from 'antd';
import moment from 'moment';
import * as tf from '@tensorflow/tfjs';

const EmployeeLog = () => {
  const [logs, setLogs] = useState([]);
  const [predictedHours, setPredictedHours] = useState(0);

  const logEvent = (type) => {
    const lastLog = logs[logs.length - 1];
    const log = {
      time: moment().format('YYYY-MM-DD HH:mm:ss'),
      type,
      
      
    };
    setLogs([...logs, log]);
    message.success(`${type} recorded`);
  };

  useEffect(() => {
    if (logs.length > 2) {
      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);
      if (hours.length > 1) {
        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);
        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);
        const model = tf.sequential();
        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));
        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });
        model.fit(xs, ys, { epochs: 10 }).then(() => {
          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));
          setPredictedHours(next.dataSync()[0]);
        });
      }
    }
  }, [logs]);

  const columns = [
    { title: 'Time', dataIndex: 'time', key: 'time' },
    { title: 'Type', dataIndex: 'type', key: 'type' },
    
    
    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }
  ];

  return (
    <div style={{ padding: '20px', background: '#f0f2f5' }}>
      <h1>Employee Log</h1>
      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>
      <Button onClick={() => logEvent('logout')}>Log Out</Button>
      <Table dataSource={logs} columns={columns} rowKey="time" style={{ marginTop: 16 }} />
    </div>
  );
};

export default EmployeeLog;
