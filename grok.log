{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:35.560Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:35.578Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:35.582Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:35.589Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:35.642Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:35.645Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:35.651Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:35.655Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:39.045Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:39.054Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:39.059Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:39.067Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:39.110Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:39.116Z"}
{"level":"error","message":"Tasks fetch error: Cannot read properties of undefined (reading 'find')","stack":"TypeError: Cannot read properties of undefined (reading 'find')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:111:32","timestamp":"2025-04-08T21:50:39.118Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Cannot read properties of undefined (reading 'create')","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:147:20","timestamp":"2025-04-08T21:50:39.122Z"}
{"level":"error","message":"Manual test error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-3ef35a17-82e6-4852-be92-a9aa1cb2fb51-EmployeeLog.jsx.js\nnode:internal/process/promises:289\r\n            triggerUncaughtException(err, true /* fromPromise */);\r\n            ^\r\n\r\npage.click: Target page, context or browser has been closed\r\nCall log:\r\n\u001b[2m  - waiting for locator('#login-button')\u001b[22m\r\n\r\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-3ef35a17-82e6-4852-be92-a9aa1cb2fb51-EmployeeLog.jsx.js:10:24\r\n\r\nNode.js v20.9.0\r\n","taskId":"3ef35a17-82e6-4852-be92-a9aa1cb2fb51","timestamp":"2025-04-09T16:32:40.658Z"}
{"level":"error","message":"Manual test error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-af27b35e-7957-42d2-81f3-6db798bc3033-EmployeeLog.jsx.js\nnode:internal/process/promises:289\r\n            triggerUncaughtException(err, true /* fromPromise */);\r\n            ^\r\n\r\npage.click: Target page, context or browser has been closed\r\nCall log:\r\n\u001b[2m  - waiting for locator('#login-button')\u001b[22m\r\n\r\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-af27b35e-7957-42d2-81f3-6db798bc3033-EmployeeLog.jsx.js:10:24\r\n\r\nNode.js v20.9.0\r\n","taskId":"af27b35e-7957-42d2-81f3-6db798bc3033","timestamp":"2025-04-09T19:14:06.522Z"}
{"level":"error","message":"Backend approval error: ENOENT: no such file or directory, open 'C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\grok.js'","proposalId":"67f6ed87b45bbcfd4f5b7756","stack":"Error: ENOENT: no such file or directory, open 'C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\grok.js'","timestamp":"2025-04-09T21:58:58.822Z"}
{"content":"/*\r\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js\r\n * Purpose: Allur Space Console router for task management, self-evolution, system enhancement, and backend proposal handling.\r\n * Change Log:\r\n *   - 04/09/2025: Fixed manual Playwright and auth (Chat Line 9700-ish).\r\n *   - 04/09/2025: Fixed 400 error on approve-backend (Chat Line 9800-ish).\r\n *   - 04/09/2025: Enhanced /file-content to log and return content (Chat Line 10400-ish).\r\n *   - 04/09/2025: Sprint 1 - Enhanced /approve-backend for safe application (New Chat, Sprint 1).\r\n *   - 04/09/2025: Fixed 500 errors on /approve-backend (New Chat, Post-Sprint 1).\r\n *   - 04/09/2025: Fixed 400 error due to incorrect file path (New Chat, Post-Sprint 1 Fix 2).\r\n *   - 04/09/2025: Fixed 400 error due to syntax failure (New Chat, Post-Sprint 1 Fix 3).\r\n *   - 04/09/2025: Hardened code injection for syntax reliability (New Chat, Post-Sprint 1 Fix 4).\r\n *   - 04/09/2025: Fixed persistent syntax error with isolated append (New Chat, Post-Sprint 1 Fix 5).\r\n *     - Why: 400 error \"Unexpected token .\" persisted despite append logic (User logs, 22:44 UTC, 04/09/2025).\r\n *     - How: Append new code as a standalone block after a clear separator, log full content pre-validation.\r\n *     - Test: Approve \"Add middleware for input sanitization\" (ID 67f6f2f3fc128bcc67f9dfdd), verify grok.js updates, no 400 error.\r\n * Self-Notes:\r\n *   - Nate: Verify MongoDB Task document structure post-update.\r\n *   - Nate: Test with failed tasks for content persistence.\r\n *   - Nate: Validate applied changes donâ€™t break server (e.g., restart after approval).\r\n *   - Nate: Check grok.log for full content dump to debug syntax error if it recurs.\r\n */\r\n\r\nconst express = require('express');\r\nconst path = require('path');\r\nconst mongoose = require('mongoose');\r\nconst esprima = require('esprima');\r\nconst { exec } = require('child_process');\r\nrequire('../db');\r\nconst Task = mongoose.model('Task');\r\nconst Memory = mongoose.model('Memory');\r\nconst BackendProposal = mongoose.model('BackendProposal');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst { appendLog } = require('../utils/fileUtils');\r\nconst { processTask } = require('../utils/taskProcessorV18');\r\nconst { autoTestTask } = require('../utils/taskTesterV18');\r\nconst { xai } = require('@ai-sdk/xai');\r\nconst multer = require('multer');\r\nconst fs = require('fs').promises;\r\nconst winston = require('winston');\r\nconst upload = multer({ dest: 'uploads/' });\r\nconst client = xai({ apiKey: process.env.XAI_API_KEY });\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst logger = winston.createLogger({\r\n  level: 'info',\r\n  format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\r\n  transports: [\r\n    new winston.transports.File({ filename: path.join(__dirname, '../../../grok.log'), maxsize: 1024 * 1024 * 10 }),\r\n    new winston.transports.Console()\r\n  ]\r\n});\r\n\r\nmodule.exports = (io) => {\r\n  const router = express.Router();\r\n\r\n  const verifyToken = (req, res, next) => {\r\n    const token = req.headers['authorization']?.split(' ')[1];\r\n    if (!token) return res.status(401).json({ error: 'No token provided' });\r\n    jwt.verify(token, process.env.JWT_SECRET || 'chelsiemygirl2025420isawsome', (err, decoded) => {\r\n      if (err) {\r\n        logger.error(`JWT verification failed: ${err.message}`, { token });\r\n        return res.status(403).json({ error: 'Invalid token', details: err.message });\r\n      }\r\n      req.user = decoded;\r\n      logger.info(`Token verified for user: ${decoded.email}`, { userId: decoded._id });\r\n      next();\r\n    });\r\n  };\r\n\r\n  router.use(verifyToken);\r\n\r\n  async function readLogs(logFile) {\r\n    try {\r\n      const content = await fs.readFile(logFile, 'utf8');\r\n      return content.split('\\n').filter(line => line.trim()).map(line => {\r\n        try {\r\n          return JSON.parse(line);\r\n        } catch {\r\n          return { message: line, timestamp: new Date().toISOString() };\r\n        }\r\n      });\r\n    } catch (err) {\r\n      if (err.code === 'ENOENT') return [];\r\n      logger.error(`Failed to read log ${logFile}: ${err.message}`, { stack: err.stack });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  router.get('/logs', async (req, res) => {\r\n    logger.info('Entering /api/grok/logs');\r\n    try {\r\n      const logs = {\r\n        error: await readLogs(path.join(__dirname, '../../../ERROR_LOG.md')),\r\n        debug: await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md')),\r\n        feature: await readLogs(path.join(__dirname, '../../../FEATURE_LOG.md')),\r\n        connectivity: await readLogs(path.join(__dirname, '../../../CONNECTIVITY_LOG.md')),\r\n        grok: await readLogs(path.join(__dirname, '../../../grok.log'))\r\n      };\r\n      await Memory.create({ type: 'logs_access', data: { path: '/logs', timestamp: new Date() } });\r\n      io.emit('logUpdate', { event: 'logs_accessed', logs: Object.keys(logs), timestamp: new Date() });\r\n      res.json(logs);\r\n    } catch (err) {\r\n      logger.error(`Logs fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to fetch logs', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/tasks', async (req, res) => {\r\n    logger.info('Entering /api/grok/tasks');\r\n    try {\r\n      const errorLogs = await readLogs(path.join(__dirname, '../../../ERROR_LOG.md'));\r\n      const recentErrors = errorLogs.filter(log => \r\n        log.message.includes('Tasks fetch error') && \r\n        new Date() - new Date(log.timestamp) < 24 * 60 * 60 * 1000\r\n      );\r\n      if (recentErrors.length > 3) {\r\n        logger.warn('Recent task fetch errors detected', { count: recentErrors.length });\r\n        await appendLog(path.join(__dirname, '../../../CONNECTIVITY_LOG.md'), \r\n          `# Task Fetch Issues\\nTimestamp: ${new Date().toISOString()}\\nErrors: ${recentErrors.length} in last 24h`);\r\n        res.set('X-Task-Warning', 'High error rate detected');\r\n      }\r\n      const tasks = await Task.find().lean();\r\n      await Memory.create({ type: 'tasks_fetch', data: { count: tasks.length, timestamp: new Date() } });\r\n      const taskData = tasks.map(t => ({\r\n        taskId: t.taskId,\r\n        prompt: t.prompt,\r\n        status: t.status,\r\n        cadence: t.cadence,\r\n        priority: t.priority,\r\n        generatedFiles: t.generatedFiles,\r\n      }));\r\n      io.emit('taskUpdate', { event: 'tasks_fetched', tasks: taskData, timestamp: new Date() });\r\n      res.json(taskData);\r\n    } catch (err) {\r\n      logger.error(`Tasks fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Tasks fetch failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/files', async (req, res) => {\r\n    logger.info('Entering /api/grok/files');\r\n    const dir = path.join(__dirname, '../../../frontend/src/pages');\r\n    try {\r\n      const debugLogs = await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md'));\r\n      const recentFileOps = debugLogs.filter(log => \r\n        log.message.includes('Task queued') && \r\n        new Date() - new Date(log.timestamp) < 7 * 24 * 60 * 60 * 1000\r\n      );\r\n      if (recentFileOps.length > 10) {\r\n        logger.info(`High file activity: ${recentFileOps.length} tasks in last 7 days`);\r\n        res.set('X-File-Activity', `High: ${recentFileOps.length} tasks`);\r\n      }\r\n      await fs.access(dir);\r\n      const files = await fs.readdir(dir);\r\n      const filteredFiles = files\r\n        .filter(file => /\\.(jsx|js|css)$/.test(file))\r\n        .map(file => ({ path: `${dir}/${file}`, name: file }));\r\n      await Memory.create({ type: 'files_fetch', data: { count: filteredFiles.length, timestamp: new Date() } });\r\n      io.emit('fileUpdate', { event: 'files_fetched', files: filteredFiles, timestamp: new Date() });\r\n      res.json(filteredFiles);\r\n    } catch (err) {\r\n      logger.error(`File listing error: ${err.message}`, { dir, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to list files', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/analyze', async (req, res) => {\r\n    logger.info('Entering /api/grok/analyze');\r\n    try {\r\n      const { data } = req.body;\r\n      if (!data) return res.status(400).json({ error: 'No data provided' });\r\n      const response = await client.chat.completions.create({\r\n        model: 'grok-2-latest',\r\n        messages: [{ role: 'user', content: `Analyze this data: ${JSON.stringify(data)}` }],\r\n        maxTokens: 500,\r\n        stream: false,\r\n        temperature: 0\r\n      });\r\n      await Memory.create({ type: 'analyze', data: { input: data, result: response.choices[0].message.content } });\r\n      io.emit('analyzeUpdate', { data, result: response.choices[0].message.content, timestamp: new Date() });\r\n      res.json({ result: response.choices[0].message.content });\r\n    } catch (error) {\r\n      logger.error(`xAI API error: ${error.message}`, { stack: error.stack });\r\n      res.status(500).json({ error: 'Failed to process request', details: error.message });\r\n    }\r\n  });\r\n\r\n  router.post('/upload', upload.single('file'), async (req, res) => {\r\n    logger.info('Entering /api/grok/upload');\r\n    try {\r\n      const fileContent = await fs.readFile(req.file.path, 'utf8');\r\n      const response = await client.chat.completions.create({\r\n        model: 'grok-2-latest',\r\n        messages: [{ role: 'user', content: `Analyze this file content: ${fileContent}` }],\r\n        maxTokens: 500,\r\n        stream: false,\r\n        temperature: 0\r\n      });\r\n      await Memory.create({ type: 'upload', data: { filename: req.file.originalname, result: response.choices[0].message.content } });\r\n      await fs.unlink(req.file.path);\r\n      io.emit('uploadUpdate', { filename: req.file.originalname, result: response.choices[0].message.content, timestamp: new Date() });\r\n      res.json({ result: response.choices[0].message.content });\r\n    } catch (error) {\r\n      logger.error(`File upload error: ${error.message}`, { stack: error.stack });\r\n      res.status(500).json({ error: 'Failed to process file', details: error.message });\r\n    }\r\n  });\r\n\r\n  router.post('/edit', async (req, res) => {\r\n    logger.info('Entering /api/grok/edit');\r\n    const { prompt, file } = req.body;\r\n    if (!prompt) return res.status(400).json({ error: 'Prompt required' });\r\n    try {\r\n      const task = new Task({\r\n        taskId: uuidv4(),\r\n        prompt,\r\n        file: file || null,\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await task.save();\r\n      await Memory.create({ type: 'task_created', data: { taskId: task.taskId, prompt } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# New Task Queued\\nTask ID: ${task.taskId}\\nPrompt: ${prompt}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId: task.taskId, prompt, status: 'pending', timestamp: new Date() });\r\n      processTask(task.taskId).then(() => autoTestTask(task.taskId));\r\n      res.json({ taskId: task.taskId, message: 'Task queued' });\r\n    } catch (err) {\r\n      logger.error(`Task creation error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Task creation failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/clear-tasks', async (req, res) => {\r\n    logger.info('Entering /api/grok/clear-tasks');\r\n    try {\r\n      await Task.deleteMany({});\r\n      await Memory.create({ type: 'tasks_cleared', data: { timestamp: new Date() } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Tasks Cleared\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { event: 'tasks_cleared', timestamp: new Date() });\r\n      res.json({ message: 'All tasks cleared' });\r\n    } catch (err) {\r\n      logger.error(`Clear tasks error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to clear tasks', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.delete('/tasks/:taskId', async (req, res) => {\r\n    logger.info('Entering /api/grok/tasks/:taskId DELETE');\r\n    try {\r\n      const { taskId } = req.params;\r\n      await Task.deleteOne({ taskId });\r\n      await Memory.create({ type: 'task_deleted', data: { taskId, timestamp: new Date() } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Task Deleted\\nTask ID: ${taskId}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, status: 'deleted', timestamp: new Date() });\r\n      res.json({ message: 'Task deleted' });\r\n    } catch (err) {\r\n      logger.error(`Delete task error: ${err.message}`, { taskId: req.params.taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to delete task', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/file-content', async (req, res) => {\r\n    logger.info('Entering /api/grok/file-content');\r\n    const { taskId } = req.query;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      logger.debug(`Fetched task content for ${taskId}`, { originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\r\n      io.emit('fileContentUpdate', { \r\n        taskId, \r\n        originalContent: task.originalContent, \r\n        newContent: task.newContent, \r\n        generatedFiles: task.generatedFiles, \r\n        timestamp: new Date() \r\n      });\r\n      res.json({ originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\r\n    } catch (err) {\r\n      logger.error(`File content fetch error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'File content fetch failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/approve', async (req, res) => {\r\n    logger.info('Entering /api/grok/approve');\r\n    const { taskId } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task || task.status !== 'completed') return res.status(400).json({ error: 'Invalid task' });\r\n      for (const file of task.generatedFiles) {\r\n        await fs.writeFile(file, await fs.readFile(file, 'utf8')); // Persist generated files\r\n      }\r\n      task.status = 'applied';\r\n      await task.save();\r\n      await Memory.create({ type: 'task_approved', data: { taskId, files: task.generatedFiles } });\r\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \r\n        `# Task Approved\\nTask ID: ${taskId}\\nFiles: ${task.generatedFiles.join(', ')}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, status: 'applied', files: task.generatedFiles, timestamp: new Date() });\r\n      res.json({ message: 'Changes applied' });\r\n    } catch (err) {\r\n      logger.error(`Approval error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Approval failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/reject', async (req, res) => {\r\n    logger.info('Entering /api/grok/reject');\r\n    const { taskId, feedback } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      task.status = 'rejected';\r\n      task.feedback = feedback;\r\n      await task.save();\r\n      await Memory.create({ type: 'task_rejected', data: { taskId, feedback } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Task Rejected\\nTask ID: ${taskId}\\nFeedback: ${feedback || 'None'}\\nTimestamp: ${new Date().toISOString()}`);\r\n      let newTaskId = null;\r\n      if (feedback) {\r\n        const newTask = new Task({\r\n          taskId: uuidv4(),\r\n          prompt: `${task.prompt} - Revised with feedback: ${feedback}`,\r\n          file: task.file,\r\n          status: 'pending',\r\n          createdAt: new Date(),\r\n        });\r\n        await newTask.save();\r\n        await Memory.create({ type: 'task_created_from_rejection', data: { taskId: newTask.taskId, prompt: newTask.prompt } });\r\n        io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\r\n        processTask(newTask.taskId);\r\n        newTaskId = newTask.taskId;\r\n      }\r\n      io.emit('taskUpdate', { taskId, status: 'rejected', feedback, timestamp: new Date() });\r\n      res.json({ message: 'Task rejected', newTaskId });\r\n    } catch (err) {\r\n      logger.error(`Rejection error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Rejection failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/test', async (req, res) => {\r\n    logger.info('Entering /api/grok/test');\r\n    const { taskId, manual } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task || !task.generatedFiles.length) return res.status(400).json({ error: 'No files to test' });\r\n\r\n      if (manual) {\r\n        const mainFile = task.generatedFiles[0];\r\n        const fileName = path.basename(mainFile);\r\n        const testScript = `\r\n          const { chromium } = require('playwright');\r\n          (async () => {\r\n            const browser = await chromium.launch({ headless: false });\r\n            const context = await browser.newContext();\r\n            const page = await context.newPage();\r\n            await page.goto('http://localhost:3000/employee-log');\r\n            await page.fill('#email', 'admin@idurarapp.com');\r\n            await page.fill('#password', 'admin123');\r\n            await page.click('#login-button');\r\n            console.log('Browser open for manual review. Close when done.');\r\n          })();\r\n        `;\r\n        const testFile = path.join(__dirname, `manual-test-${taskId}-${fileName}.js`);\r\n        await fs.writeFile(testFile, testScript);\r\n        exec(`node ${testFile}`, (err, stdout, stderr) => {\r\n          if (err) logger.error(`Manual test error: ${err.message}`, { taskId });\r\n        });\r\n      } else {\r\n        await autoTestTask(taskId);\r\n      }\r\n\r\n      io.emit('testUpdate', { taskId, status: 'testing', manual, timestamp: new Date() });\r\n      res.json({ message: manual ? 'Manual Playwright test launched' : 'Auto Playwright test launched' });\r\n    } catch (err) {\r\n      logger.error(`Test endpoint error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Test failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/self-test', async (req, res) => {\r\n    logger.info('Entering /api/grok/self-test');\r\n    try {\r\n      const testTask = new Task({\r\n        taskId: uuidv4(),\r\n        prompt: 'Self-test Allur Space Console functionality',\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await testTask.save();\r\n      await processTask(testTask.taskId);\r\n      await autoTestTask(testTask.taskId);\r\n      const memory = await Memory.findOne({ taskId: testTask.taskId });\r\n      io.emit('selfTestUpdate', { taskId: testTask.taskId, result: memory?.outcome || 'pending', timestamp: new Date() });\r\n      res.json({ message: 'Self-test initiated', taskId: testTask.taskId });\r\n    } catch (err) {\r\n      logger.error(`Self-test error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Self-test failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/self-enhance', async (req, res) => {\r\n    logger.info('Entering /api/grok/self-enhance');\r\n    try {\r\n      const recentFailures = await Memory.find({ outcome: 'failure' })\r\n        .sort({ timestamp: -1 })\r\n        .limit(5)\r\n        .lean();\r\n      \r\n      if (!recentFailures.length) {\r\n        io.emit('selfEnhanceUpdate', { message: 'No recent failures to enhance from', timestamp: new Date() });\r\n        return res.json({ message: 'No recent failures to enhance from' });\r\n      }\r\n\r\n      const enhancementTasks = [];\r\n      for (const failure of recentFailures) {\r\n        if (failure.lessons && failure.lessons.includes('not defined')) {\r\n          const missing = failure.lessons.match(/(\\w+) is not defined/)?.[1];\r\n          if (missing && !['taskId'].includes(missing)) {\r\n            const newTask = new Task({\r\n              taskId: uuidv4(),\r\n              prompt: `Add ${missing} dependency to fileGeneratorV18.js and retry task ${failure.taskId}`,\r\n              status: 'pending',\r\n              createdAt: new Date(),\r\n            });\r\n            await newTask.save();\r\n            await Memory.create({ type: 'self_enhance_task', data: { taskId: newTask.taskId, prompt: newTask.prompt, originalTaskId: failure.taskId } });\r\n            enhancementTasks.push(newTask.taskId);\r\n            io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\r\n            processTask(newTask.taskId);\r\n          }\r\n        }\r\n      }\r\n\r\n      const techPrompt = 'Analyze latest tech updates, suggest improvements for Allur Space Console';\r\n      const techTask = new Task({\r\n        taskId: uuidv4(),\r\n        prompt: techPrompt,\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await techTask.save();\r\n      await Memory.create({ type: 'self_evolve', data: { taskId: techTask.taskId, prompt: techPrompt } });\r\n      enhancementTasks.push(techTask.taskId);\r\n      io.emit('taskUpdate', { taskId: techTask.taskId, prompt: techPrompt, status: 'pending', timestamp: new Date() });\r\n      processTask(techTask.taskId);\r\n\r\n      io.emit('selfEnhanceUpdate', { enhancements: enhancementTasks, timestamp: new Date() });\r\n      res.json({ message: 'Self-enhancement and evolution tasks queued', taskIds: enhancementTasks });\r\n    } catch (err) {\r\n      logger.error(`Self-enhancement error: ${err.message}`, { stack: err.stack });\r\n      io.emit('selfEnhanceUpdate', { error: err.message, timestamp: new Date() });\r\n      res.status(500).json({ error: 'Self-enhancement failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/update-priority', async (req, res) => {\r\n    logger.info('Entering /api/grok/update-priority');\r\n    const { taskId, priority } = req.body;\r\n    try {\r\n      const task = await Task.findOneAndUpdate({ taskId }, { priority }, { new: true });\r\n      await Memory.create({ type: 'priority_updated', data: { taskId, priority } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Priority Updated\\nTask ID: ${taskId}\\nNew Priority: ${priority}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, priority, timestamp: new Date() });\r\n      res.json({ message: 'Priority updated', task });\r\n    } catch (err) {\r\n      logger.error(`Priority update error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to update priority', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/maintenance', async (req, res) => {\r\n    logger.info('Entering /api/grok/maintenance');\r\n    const { taskId, action, report } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      if (action === 'approve') {\r\n        for (const proposal of report.proposals || []) {\r\n          if (proposal.type === 'merge_logs') {\r\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\r\n            await fs.writeFile('grok.log', merged.join('\\n'), 'utf8');\r\n            await Promise.all(proposal.files.filter(f => f !== 'grok.log').map(f => fs.unlink(f)));\r\n            await Memory.create({ type: 'logs_merged', data: { taskId, files: proposal.files } });\r\n          } else if (proposal.type === 'merge_memory') {\r\n            const archived = JSON.parse(await fs.readFile(proposal.files[0], 'utf8'));\r\n            await Memory.insertMany(archived);\r\n            await fs.unlink(proposal.files[0]);\r\n            await Memory.create({ type: 'memory_merged', data: { taskId, file: proposal.files[0] } });\r\n          } else if (proposal.type === 'merge_files') {\r\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\r\n            await fs.writeFile('fileGeneratorV18.js', merged.join('\\n'), 'utf8');\r\n            await Promise.all(proposal.files.map(f => fs.unlink(f)));\r\n            await Memory.create({ type: 'files_merged', data: { taskId, files: proposal.files } });\r\n          }\r\n        }\r\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'approved' };\r\n        await task.save();\r\n        io.emit('maintenanceUpdate', { taskId, status: 'approved', report, timestamp: new Date() });\r\n        res.json({ success: true, message: 'Maintenance approved' });\r\n      } else if (action === 'reject') {\r\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'rejected' };\r\n        await task.save();\r\n        await Memory.create({ type: 'maintenance_rejected', data: { taskId, report } });\r\n        io.emit('maintenanceUpdate', { taskId, status: 'rejected', report, timestamp: new Date() });\r\n        res.json({ success: true, message: 'Maintenance rejected' });\r\n      } else {\r\n        res.status(400).json({ error: 'Invalid action' });\r\n      }\r\n    } catch (err) {\r\n      logger.error(`Maintenance action failed: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Maintenance action failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/backend-proposals', async (req, res) => {\r\n    logger.info('Entering /api/grok/backend-proposals');\r\n    try {\r\n      const proposals = await BackendProposal.find().lean();\r\n      logger.info(`Fetched ${proposals.length} backend proposals`, { proposalIds: proposals.map(p => p._id) });\r\n      res.json(proposals);\r\n    } catch (err) {\r\n      logger.error(`Backend proposals fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to fetch backend proposals', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/approve-backend', async (req, res) => {\r\n    logger.info('Entering /api/grok/approve-backend');\r\n    const { proposalId } = req.body;\r\n    try {\r\n      logger.debug(`Received proposalId: ${proposalId}`, { type: typeof proposalId });\r\n\r\n      if (!proposalId || !mongoose.Types.ObjectId.isValid(proposalId)) {\r\n        logger.warn(`Invalid proposalId: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Invalid proposalId format', received: proposalId });\r\n      }\r\n\r\n      const proposal = await BackendProposal.findById(proposalId);\r\n      if (!proposal) {\r\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Proposal not found', proposalId });\r\n      }\r\n\r\n      if (proposal.status !== 'pending') {\r\n        logger.warn(`Proposal not in pending state`, { proposalId, status: proposal.status });\r\n        return res.status(400).json({ error: 'Proposal is not pending', currentStatus: proposal.status });\r\n      }\r\n\r\n      logger.info(`Applying backend proposal`, { proposalId, file: proposal.file, change: proposal.change });\r\n\r\n      // Adjust file path based on file type\r\n      let filePath;\r\n      if (proposal.file === 'grok.js') {\r\n        filePath = path.join(__dirname, proposal.file); // grok.js is in src/routes/\r\n      } else if (proposal.file === 'db.js') {\r\n        filePath = path.join(__dirname, '..', proposal.file); // db.js is in src/\r\n      } else {\r\n        filePath = path.join(__dirname, '..', proposal.file); // Default to src/ for other files\r\n      }\r\n\r\n      // Check if file exists\r\n      try {\r\n        await fs.access(filePath);\r\n      } catch (err) {\r\n        logger.error(`File not found: ${filePath}`, { proposalId, error: err.message });\r\n        return res.status(400).json({ error: 'Target file does not exist', file: proposal.file });\r\n      }\r\n\r\n      // Backup original file\r\n      const backupPath = `${filePath}.bak.${Date.now()}`;\r\n      const originalContent = await fs.readFile(filePath, 'utf8');\r\n      await fs.writeFile(backupPath, originalContent, 'utf8');\r\n      logger.info(`Created backup of ${proposal.file} at ${backupPath}`, { proposalId });\r\n\r\n      let content = originalContent;\r\n      let newCode = '';\r\n\r\n      // Generate new code based on proposal type\r\n      if (proposal.change.includes('endpoint')) {\r\n        const endpointMatch = proposal.change.match(/POST \\/api\\/grok\\/(\\w+)/);\r\n        if (endpointMatch) {\r\n          const endpointName = endpointMatch[1];\r\n          newCode = `\r\nrouter.post('/${endpointName}', async (req, res) => {\r\n  try {\r\n    res.json({ message: '${endpointName} endpoint called' });\r\n  } catch (err) {\r\n    logger.error('${endpointName} error: \\${err.message}', { stack: err.stack });\r\n    res.status(500).json({ error: 'Failed', details: err.message });\r\n  }\r\n});\r\n          `;\r\n        }\r\n      } else if (proposal.change.includes('schema')) {\r\n        const schemaMatch = proposal.change.match(/Add (\\w+) field to (\\w+) schema/);\r\n        if (schemaMatch) {\r\n          const [_, field, schemaName] = schemaMatch;\r\n          newCode = `  ${field}: { type: String },`;\r\n          content = content.replace(\r\n            `${schemaName}Schema = new mongoose.Schema({`,\r\n            `${schemaName}Schema = new mongoose.Schema({\\n${newCode}`\r\n          );\r\n          newCode = ''; // Reset since schema changes are inline\r\n        }\r\n      } else if (proposal.change.includes('middleware')) {\r\n        newCode = `\r\nconst sanitizeInput = (req, res, next) => {\r\n  Object.keys(req.body).forEach(key => {\r\n    if (typeof req.body[key] === 'string') {\r\n      req.body[key] = req.body[key].replace(/[<>]/g, '');\r\n    }\r\n  });\r\n  next();\r\n};\r\nrouter.use(sanitizeInput);\r\n        `;\r\n      } else if (proposal.change.includes('rate limiting')) {\r\n        newCode = `\r\nconst rateLimit = require('express-rate-limit');\r\nconst limiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100 // limit each IP to 100 requests per windowMs\r\n});\r\nrouter.use(limiter);\r\n        `;\r\n        await exec(`npm install express-rate-limit --save`, { cwd: path.join(__dirname, '../../..') });\r\n        logger.info('Installed express-rate-limit for rate limiting', { proposalId });\r\n      }\r\n\r\n      // Append new code with clear separation\r\n      if (newCode) {\r\n        content = `${originalContent}\\n\\n// --- Allur Space Console Addition (Proposal ID: ${proposalId}) ---\\n${newCode}\\n// --- End Addition ---`;\r\n      }\r\n\r\n      // Log the full content for debugging\r\n      logger.debug(`Proposed content for ${proposal.file}`, { content });\r\n\r\n      // Validate syntax before applying\r\n      try {\r\n        esprima.parseScript(content);\r\n      } catch (syntaxErr) {\r\n        logger.error(`Syntax validation failed for ${proposal.file}`, { proposalId, error: syntaxErr.message, content });\r\n        await fs.unlink(backupPath);\r\n        return res.status(400).json({ error: 'Proposed change has invalid syntax', details: syntaxErr.message });\r\n      }\r\n\r\n      // Apply changes\r\n      try {\r\n        await fs.writeFile(filePath, content, 'utf8');\r\n      } catch (writeErr) {\r\n        logger.error(`Failed to write changes to ${proposal.file}`, { proposalId, error: writeErr.message });\r\n        await fs.writeFile(filePath, originalContent, 'utf8');\r\n        await fs.unlink(backupPath);\r\n        return res.status(500).json({ error: 'Failed to apply changes', details: writeErr.message });\r\n      }\r\n\r\n      // Validate server still runs (async test)\r\n      try {\r\n        await new Promise((resolve, reject) => {\r\n          exec('node app.js', { cwd: path.join(__dirname, '../../..'), timeout: 5000 }, (err) => {\r\n            if (err) reject(err);\r\n            else resolve();\r\n          });\r\n        });\r\n      } catch (serverErr) {\r\n        logger.error(`Server failed to start after applying ${proposal.file}`, { proposalId, error: serverErr.message });\r\n        await fs.writeFile(filePath, originalContent, 'utf8');\r\n        await fs.unlink(backupPath);\r\n        return res.status(500).json({ error: 'Applied changes broke the server', details: serverErr.message });\r\n      }\r\n\r\n      // Update proposal status\r\n      proposal.status = 'approved';\r\n      proposal.appliedAt = new Date();\r\n      await proposal.save();\r\n\r\n      await Memory.create({ type: 'backend_approved', data: { proposalId, file: proposal.file, change: proposal.change } });\r\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \r\n        `# Backend Proposal Approved\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nNew Code: ${newCode}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('backendProposalUpdate', { proposalId, status: 'approved' });\r\n      logger.info(`Backend proposal approved successfully`, { proposalId });\r\n      res.json({ message: 'Backend change applied', backup: backupPath });\r\n    } catch (err) {\r\n      logger.error(`Backend approval error: ${err.message}`, { proposalId, stack: err.stack });\r\n      res.status(500).json({ error: 'Approval failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/deny-backend', async (req, res) => {\r\n    logger.info('Entering /api/grok/deny-backend');\r\n    const { proposalId } = req.body;\r\n    try {\r\n      if (!mongoose.Types.ObjectId.isValid(proposalId)) {\r\n        logger.warn(`Invalid proposalId: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Invalid proposalId format' });\r\n      }\r\n      const proposal = await BackendProposal.findById(proposalId);\r\n      if (!proposal) {\r\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\r\n        return res.status(404).json({ error: 'Proposal not found' });\r\n      }\r\n      proposal.status = 'denied';\r\n      await proposal.save();\r\n      await Memory.create({ type: 'backend_denied', data: { proposalId, file: proposal.file, change: proposal.change } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Backend Proposal Denied\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('backendProposalUpdate', { proposalId, status: 'denied' });\r\n      logger.info(`Backend proposal denied successfully`, { proposalId });\r\n      res.json({ message: 'Backend proposal denied' });\r\n    } catch (err) {\r\n      logger.error(`Backend denial error: ${err.message}`, { proposalId, stack: err.stack });\r\n      res.status(500).json({ error: 'Denial failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  logger.info('Allur Space Console: Initialized with Socket.IO');\r\n  console.log('Allur Space Console: Initialized with Socket.IO');\r\n  return router;\r\n};\r\n","error":"Line 58: Unexpected token .","level":"error","message":"Syntax validation failed for grok.js","proposalId":"67f6f9dc9a1085400502e729","timestamp":"2025-04-09T22:51:34.201Z"}
{"content":"/*\r\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js\r\n * Purpose: Allur Space Console router for task management, self-evolution, system enhancement, and backend proposal handling.\r\n * Change Log:\r\n *   - 04/09/2025: Fixed manual Playwright and auth (Chat Line 9700-ish).\r\n *   - 04/09/2025: Fixed 400 error on approve-backend (Chat Line 9800-ish).\r\n *   - 04/09/2025: Enhanced /file-content to log and return content (Chat Line 10400-ish).\r\n *   - 04/09/2025: Sprint 1 - Enhanced /approve-backend for safe application (New Chat, Sprint 1).\r\n *   - 04/09/2025: Fixed 500 errors on /approve-backend (New Chat, Post-Sprint 1).\r\n *   - 04/09/2025: Fixed 400 error due to incorrect file path (New Chat, Post-Sprint 1 Fix 2).\r\n *   - 04/09/2025: Fixed 400 error due to syntax failure (New Chat, Post-Sprint 1 Fix 3).\r\n *   - 04/09/2025: Hardened code injection for syntax reliability (New Chat, Post-Sprint 1 Fix 4).\r\n *   - 04/09/2025: Fixed persistent syntax error with isolated append (New Chat, Post-Sprint 1 Fix 5).\r\n *   - 04/09/2025: Fixed syntax error with clean append and validation (New Chat, Post-Sprint 1 Fix 6).\r\n *     - Why: 400 error \"Unexpected token .\" at line 58 despite valid append (User logs, 22:51 UTC, 04/09/2025).\r\n *     - How: Trimmed content, used clean \\n separators, added pre-validation length check, ensured full content logging.\r\n *     - Test: Approve \"Add middleware for input sanitization\" (ID 67f6f9dc9a1085400502e729), verify grok.js updates, no 400 error.\r\n * Self-Notes:\r\n *   - Nate: Verify MongoDB Task document structure post-update.\r\n *   - Nate: Test with failed tasks for content persistence.\r\n *   - Nate: Check grok.log for full content dump to confirm exact syntax error if it recurs.\r\n */\r\n\r\nconst express = require('express');\r\nconst path = require('path');\r\nconst mongoose = require('mongoose');\r\nconst esprima = require('esprima');\r\nconst { exec } = require('child_process');\r\nrequire('../db');\r\nconst Task = mongoose.model('Task');\r\nconst Memory = mongoose.model('Memory');\r\nconst BackendProposal = mongoose.model('BackendProposal');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst { appendLog } = require('../utils/fileUtils');\r\nconst { processTask } = require('../utils/taskProcessorV18');\r\nconst { autoTestTask } = require('../utils/taskTesterV18');\r\nconst { xai } = require('@ai-sdk/xai');\r\nconst multer = require('multer');\r\nconst fs = require('fs').promises;\r\nconst winston = require('winston');\r\nconst upload = multer({ dest: 'uploads/' });\r\nconst client = xai({ apiKey: process.env.XAI_API_KEY });\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst logger = winston.createLogger({\r\n  level: 'info',\r\n  format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\r\n  transports: [\r\n    new winston.transports.File({ filename: path.join(__dirname, '../../../grok.log'), maxsize: 1024 * 1024 * 10 }),\r\n    new winston.transports.Console()\r\n  ]\r\n});\r\n\r\nmodule.exports = (io) => {\r\n  const router = express.Router();\r\n\r\n  const verifyToken = (req, res, next) => {\r\n    const token = req.headers['authorization']?.split(' ')[1];\r\n    if (!token) return res.status(401).json({ error: 'No token provided' });\r\n    jwt.verify(token, process.env.JWT_SECRET || 'chelsiemygirl2025420isawsome', (err, decoded) => {\r\n      if (err) {\r\n        logger.error(`JWT verification failed: ${err.message}`, { token });\r\n        return res.status(403).json({ error: 'Invalid token', details: err.message });\r\n      }\r\n      req.user = decoded;\r\n      logger.info(`Token verified for user: ${decoded.email}`, { userId: decoded._id });\r\n      next();\r\n    });\r\n  };\r\n\r\n  router.use(verifyToken);\r\n\r\n  async function readLogs(logFile) {\r\n    try {\r\n      const content = await fs.readFile(logFile, 'utf8');\r\n      return content.split('\\n').filter(line => line.trim()).map(line => {\r\n        try {\r\n          return JSON.parse(line);\r\n        } catch {\r\n          return { message: line, timestamp: new Date().toISOString() };\r\n        }\r\n      });\r\n    } catch (err) {\r\n      if (err.code === 'ENOENT') return [];\r\n      logger.error(`Failed to read log ${logFile}: ${err.message}`, { stack: err.stack });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  router.get('/logs', async (req, res) => {\r\n    logger.info('Entering /api/grok/logs');\r\n    try {\r\n      const logs = {\r\n        error: await readLogs(path.join(__dirname, '../../../ERROR_LOG.md')),\r\n        debug: await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md')),\r\n        feature: await readLogs(path.join(__dirname, '../../../FEATURE_LOG.md')),\r\n        connectivity: await readLogs(path.join(__dirname, '../../../CONNECTIVITY_LOG.md')),\r\n        grok: await readLogs(path.join(__dirname, '../../../grok.log'))\r\n      };\r\n      await Memory.create({ type: 'logs_access', data: { path: '/logs', timestamp: new Date() } });\r\n      io.emit('logUpdate', { event: 'logs_accessed', logs: Object.keys(logs), timestamp: new Date() });\r\n      res.json(logs);\r\n    } catch (err) {\r\n      logger.error(`Logs fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to fetch logs', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/tasks', async (req, res) => {\r\n    logger.info('Entering /api/grok/tasks');\r\n    try {\r\n      const errorLogs = await readLogs(path.join(__dirname, '../../../ERROR_LOG.md'));\r\n      const recentErrors = errorLogs.filter(log => \r\n        log.message.includes('Tasks fetch error') && \r\n        new Date() - new Date(log.timestamp) < 24 * 60 * 60 * 1000\r\n      );\r\n      if (recentErrors.length > 3) {\r\n        logger.warn('Recent task fetch errors detected', { count: recentErrors.length });\r\n        await appendLog(path.join(__dirname, '../../../CONNECTIVITY_LOG.md'), \r\n          `# Task Fetch Issues\\nTimestamp: ${new Date().toISOString()}\\nErrors: ${recentErrors.length} in last 24h`);\r\n        res.set('X-Task-Warning', 'High error rate detected');\r\n      }\r\n      const tasks = await Task.find().lean();\r\n      await Memory.create({ type: 'tasks_fetch', data: { count: tasks.length, timestamp: new Date() } });\r\n      const taskData = tasks.map(t => ({\r\n        taskId: t.taskId,\r\n        prompt: t.prompt,\r\n        status: t.status,\r\n        cadence: t.cadence,\r\n        priority: t.priority,\r\n        generatedFiles: t.generatedFiles,\r\n      }));\r\n      io.emit('taskUpdate', { event: 'tasks_fetched', tasks: taskData, timestamp: new Date() });\r\n      res.json(taskData);\r\n    } catch (err) {\r\n      logger.error(`Tasks fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Tasks fetch failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/files', async (req, res) => {\r\n    logger.info('Entering /api/grok/files');\r\n    const dir = path.join(__dirname, '../../../frontend/src/pages');\r\n    try {\r\n      const debugLogs = await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md'));\r\n      const recentFileOps = debugLogs.filter(log => \r\n        log.message.includes('Task queued') && \r\n        new Date() - new Date(log.timestamp) < 7 * 24 * 60 * 60 * 1000\r\n      );\r\n      if (recentFileOps.length > 10) {\r\n        logger.info(`High file activity: ${recentFileOps.length} tasks in last 7 days`);\r\n        res.set('X-File-Activity', `High: ${recentFileOps.length} tasks`);\r\n      }\r\n      await fs.access(dir);\r\n      const files = await fs.readdir(dir);\r\n      const filteredFiles = files\r\n        .filter(file => /\\.(jsx|js|css)$/.test(file))\r\n        .map(file => ({ path: `${dir}/${file}`, name: file }));\r\n      await Memory.create({ type: 'files_fetch', data: { count: filteredFiles.length, timestamp: new Date() } });\r\n      io.emit('fileUpdate', { event: 'files_fetched', files: filteredFiles, timestamp: new Date() });\r\n      res.json(filteredFiles);\r\n    } catch (err) {\r\n      logger.error(`File listing error: ${err.message}`, { dir, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to list files', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/analyze', async (req, res) => {\r\n    logger.info('Entering /api/grok/analyze');\r\n    try {\r\n      const { data } = req.body;\r\n      if (!data) return res.status(400).json({ error: 'No data provided' });\r\n      const response = await client.chat.completions.create({\r\n        model: 'grok-2-latest',\r\n        messages: [{ role: 'user', content: `Analyze this data: ${JSON.stringify(data)}` }],\r\n        maxTokens: 500,\r\n        stream: false,\r\n        temperature: 0\r\n      });\r\n      await Memory.create({ type: 'analyze', data: { input: data, result: response.choices[0].message.content } });\r\n      io.emit('analyzeUpdate', { data, result: response.choices[0].message.content, timestamp: new Date() });\r\n      res.json({ result: response.choices[0].message.content });\r\n    } catch (error) {\r\n      logger.error(`xAI API error: ${error.message}`, { stack: error.stack });\r\n      res.status(500).json({ error: 'Failed to process request', details: error.message });\r\n    }\r\n  });\r\n\r\n  router.post('/upload', upload.single('file'), async (req, res) => {\r\n    logger.info('Entering /api/grok/upload');\r\n    try {\r\n      const fileContent = await fs.readFile(req.file.path, 'utf8');\r\n      const response = await client.chat.completions.create({\r\n        model: 'grok-2-latest',\r\n        messages: [{ role: 'user', content: `Analyze this file content: ${fileContent}` }],\r\n        maxTokens: 500,\r\n        stream: false,\r\n        temperature: 0\r\n      });\r\n      await Memory.create({ type: 'upload', data: { filename: req.file.originalname, result: response.choices[0].message.content } });\r\n      await fs.unlink(req.file.path);\r\n      io.emit('uploadUpdate', { filename: req.file.originalname, result: response.choices[0].message.content, timestamp: new Date() });\r\n      res.json({ result: response.choices[0].message.content });\r\n    } catch (error) {\r\n      logger.error(`File upload error: ${error.message}`, { stack: error.stack });\r\n      res.status(500).json({ error: 'Failed to process file', details: error.message });\r\n    }\r\n  });\r\n\r\n  router.post('/edit', async (req, res) => {\r\n    logger.info('Entering /api/grok/edit');\r\n    const { prompt, file } = req.body;\r\n    if (!prompt) return res.status(400).json({ error: 'Prompt required' });\r\n    try {\r\n      const task = new Task({\r\n        taskId: uuidv4(),\r\n        prompt,\r\n        file: file || null,\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await task.save();\r\n      await Memory.create({ type: 'task_created', data: { taskId: task.taskId, prompt } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# New Task Queued\\nTask ID: ${task.taskId}\\nPrompt: ${prompt}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId: task.taskId, prompt, status: 'pending', timestamp: new Date() });\r\n      processTask(task.taskId).then(() => autoTestTask(task.taskId));\r\n      res.json({ taskId: task.taskId, message: 'Task queued' });\r\n    } catch (err) {\r\n      logger.error(`Task creation error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Task creation failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/clear-tasks', async (req, res) => {\r\n    logger.info('Entering /api/grok/clear-tasks');\r\n    try {\r\n      await Task.deleteMany({});\r\n      await Memory.create({ type: 'tasks_cleared', data: { timestamp: new Date() } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Tasks Cleared\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { event: 'tasks_cleared', timestamp: new Date() });\r\n      res.json({ message: 'All tasks cleared' });\r\n    } catch (err) {\r\n      logger.error(`Clear tasks error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to clear tasks', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.delete('/tasks/:taskId', async (req, res) => {\r\n    logger.info('Entering /api/grok/tasks/:taskId DELETE');\r\n    try {\r\n      const { taskId } = req.params;\r\n      await Task.deleteOne({ taskId });\r\n      await Memory.create({ type: 'task_deleted', data: { taskId, timestamp: new Date() } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Task Deleted\\nTask ID: ${taskId}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, status: 'deleted', timestamp: new Date() });\r\n      res.json({ message: 'Task deleted' });\r\n    } catch (err) {\r\n      logger.error(`Delete task error: ${err.message}`, { taskId: req.params.taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to delete task', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/file-content', async (req, res) => {\r\n    logger.info('Entering /api/grok/file-content');\r\n    const { taskId } = req.query;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      logger.debug(`Fetched task content for ${taskId}`, { originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\r\n      io.emit('fileContentUpdate', { \r\n        taskId, \r\n        originalContent: task.originalContent, \r\n        newContent: task.newContent, \r\n        generatedFiles: task.generatedFiles, \r\n        timestamp: new Date() \r\n      });\r\n      res.json({ originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\r\n    } catch (err) {\r\n      logger.error(`File content fetch error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'File content fetch failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/approve', async (req, res) => {\r\n    logger.info('Entering /api/grok/approve');\r\n    const { taskId } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task || task.status !== 'completed') return res.status(400).json({ error: 'Invalid task' });\r\n      for (const file of task.generatedFiles) {\r\n        await fs.writeFile(file, await fs.readFile(file, 'utf8')); // Persist generated files\r\n      }\r\n      task.status = 'applied';\r\n      await task.save();\r\n      await Memory.create({ type: 'task_approved', data: { taskId, files: task.generatedFiles } });\r\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \r\n        `# Task Approved\\nTask ID: ${taskId}\\nFiles: ${task.generatedFiles.join(', ')}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, status: 'applied', files: task.generatedFiles, timestamp: new Date() });\r\n      res.json({ message: 'Changes applied' });\r\n    } catch (err) {\r\n      logger.error(`Approval error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Approval failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/reject', async (req, res) => {\r\n    logger.info('Entering /api/grok/reject');\r\n    const { taskId, feedback } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      task.status = 'rejected';\r\n      task.feedback = feedback;\r\n      await task.save();\r\n      await Memory.create({ type: 'task_rejected', data: { taskId, feedback } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Task Rejected\\nTask ID: ${taskId}\\nFeedback: ${feedback || 'None'}\\nTimestamp: ${new Date().toISOString()}`);\r\n      let newTaskId = null;\r\n      if (feedback) {\r\n        const newTask = new Task({\r\n          taskId: uuidv4(),\r\n          prompt: `${task.prompt} - Revised with feedback: ${feedback}`,\r\n          file: task.file,\r\n          status: 'pending',\r\n          createdAt: new Date(),\r\n        });\r\n        await newTask.save();\r\n        await Memory.create({ type: 'task_created_from_rejection', data: { taskId: newTask.taskId, prompt: newTask.prompt } });\r\n        io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\r\n        processTask(newTask.taskId);\r\n        newTaskId = newTask.taskId;\r\n      }\r\n      io.emit('taskUpdate', { taskId, status: 'rejected', feedback, timestamp: new Date() });\r\n      res.json({ message: 'Task rejected', newTaskId });\r\n    } catch (err) {\r\n      logger.error(`Rejection error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Rejection failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/test', async (req, res) => {\r\n    logger.info('Entering /api/grok/test');\r\n    const { taskId, manual } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task || !task.generatedFiles.length) return res.status(400).json({ error: 'No files to test' });\r\n\r\n      if (manual) {\r\n        const mainFile = task.generatedFiles[0];\r\n        const fileName = path.basename(mainFile);\r\n        const testScript = `\r\n          const { chromium } = require('playwright');\r\n          (async () => {\r\n            const browser = await chromium.launch({ headless: false });\r\n            const context = await browser.newContext();\r\n            const page = await context.newPage();\r\n            await page.goto('http://localhost:3000/employee-log');\r\n            await page.fill('#email', 'admin@idurarapp.com');\r\n            await page.fill('#password', 'admin123');\r\n            await page.click('#login-button');\r\n            console.log('Browser open for manual review. Close when done.');\r\n          })();\r\n        `;\r\n        const testFile = path.join(__dirname, `manual-test-${taskId}-${fileName}.js`);\r\n        await fs.writeFile(testFile, testScript);\r\n        exec(`node ${testFile}`, (err, stdout, stderr) => {\r\n          if (err) logger.error(`Manual test error: ${err.message}`, { taskId });\r\n        });\r\n      } else {\r\n        await autoTestTask(taskId);\r\n      }\r\n\r\n      io.emit('testUpdate', { taskId, status: 'testing', manual, timestamp: new Date() });\r\n      res.json({ message: manual ? 'Manual Playwright test launched' : 'Auto Playwright test launched' });\r\n    } catch (err) {\r\n      logger.error(`Test endpoint error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Test failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/self-test', async (req, res) => {\r\n    logger.info('Entering /api/grok/self-test');\r\n    try {\r\n      const testTask = new Task({\r\n        taskId: uuidv4(),\r\n        prompt: 'Self-test Allur Space Console functionality',\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await testTask.save();\r\n      await processTask(testTask.taskId);\r\n      await autoTestTask(testTask.taskId);\r\n      const memory = await Memory.findOne({ taskId: testTask.taskId });\r\n      io.emit('selfTestUpdate', { taskId: testTask.taskId, result: memory?.outcome || 'pending', timestamp: new Date() });\r\n      res.json({ message: 'Self-test initiated', taskId: testTask.taskId });\r\n    } catch (err) {\r\n      logger.error(`Self-test error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Self-test failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/self-enhance', async (req, res) => {\r\n    logger.info('Entering /api/grok/self-enhance');\r\n    try {\r\n      const recentFailures = await Memory.find({ outcome: 'failure' })\r\n        .sort({ timestamp: -1 })\r\n        .limit(5)\r\n        .lean();\r\n      \r\n      if (!recentFailures.length) {\r\n        io.emit('selfEnhanceUpdate', { message: 'No recent failures to enhance from', timestamp: new Date() });\r\n        return res.json({ message: 'No recent failures to enhance from' });\r\n      }\r\n\r\n      const enhancementTasks = [];\r\n      for (const failure of recentFailures) {\r\n        if (failure.lessons && failure.lessons.includes('not defined')) {\r\n          const missing = failure.lessons.match(/(\\w+) is not defined/)?.[1];\r\n          if (missing && !['taskId'].includes(missing)) {\r\n            const newTask = new Task({\r\n              taskId: uuidv4(),\r\n              prompt: `Add ${missing} dependency to fileGeneratorV18.js and retry task ${failure.taskId}`,\r\n              status: 'pending',\r\n              createdAt: new Date(),\r\n            });\r\n            await newTask.save();\r\n            await Memory.create({ type: 'self_enhance_task', data: { taskId: newTask.taskId, prompt: newTask.prompt, originalTaskId: failure.taskId } });\r\n            enhancementTasks.push(newTask.taskId);\r\n            io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\r\n            processTask(newTask.taskId);\r\n          }\r\n        }\r\n      }\r\n\r\n      const techPrompt = 'Analyze latest tech updates, suggest improvements for Allur Space Console';\r\n      const techTask = new Task({\r\n        taskId: uuidv4(),\r\n        prompt: techPrompt,\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await techTask.save();\r\n      await Memory.create({ type: 'self_evolve', data: { taskId: techTask.taskId, prompt: techPrompt } });\r\n      enhancementTasks.push(techTask.taskId);\r\n      io.emit('taskUpdate', { taskId: techTask.taskId, prompt: techPrompt, status: 'pending', timestamp: new Date() });\r\n      processTask(techTask.taskId);\r\n\r\n      io.emit('selfEnhanceUpdate', { enhancements: enhancementTasks, timestamp: new Date() });\r\n      res.json({ message: 'Self-enhancement and evolution tasks queued', taskIds: enhancementTasks });\r\n    } catch (err) {\r\n      logger.error(`Self-enhancement error: ${err.message}`, { stack: err.stack });\r\n      io.emit('selfEnhanceUpdate', { error: err.message, timestamp: new Date() });\r\n      res.status(500).json({ error: 'Self-enhancement failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/update-priority', async (req, res) => {\r\n    logger.info('Entering /api/grok/update-priority');\r\n    const { taskId, priority } = req.body;\r\n    try {\r\n      const task = await Task.findOneAndUpdate({ taskId }, { priority }, { new: true });\r\n      await Memory.create({ type: 'priority_updated', data: { taskId, priority } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Priority Updated\\nTask ID: ${taskId}\\nNew Priority: ${priority}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, priority, timestamp: new Date() });\r\n      res.json({ message: 'Priority updated', task });\r\n    } catch (err) {\r\n      logger.error(`Priority update error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to update priority', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/maintenance', async (req, res) => {\r\n    logger.info('Entering /api/grok/maintenance');\r\n    const { taskId, action, report } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      if (action === 'approve') {\r\n        for (const proposal of report.proposals || []) {\r\n          if (proposal.type === 'merge_logs') {\r\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\r\n            await fs.writeFile('grok.log', merged.join('\\n'), 'utf8');\r\n            await Promise.all(proposal.files.filter(f => f !== 'grok.log').map(f => fs.unlink(f)));\r\n            await Memory.create({ type: 'logs_merged', data: { taskId, files: proposal.files } });\r\n          } else if (proposal.type === 'merge_memory') {\r\n            const archived = JSON.parse(await fs.readFile(proposal.files[0], 'utf8'));\r\n            await Memory.insertMany(archived);\r\n            await fs.unlink(proposal.files[0]);\r\n            await Memory.create({ type: 'memory_merged', data: { taskId, file: proposal.files[0] } });\r\n          } else if (proposal.type === 'merge_files') {\r\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\r\n            await fs.writeFile('fileGeneratorV18.js', merged.join('\\n'), 'utf8');\r\n            await Promise.all(proposal.files.map(f => fs.unlink(f)));\r\n            await Memory.create({ type: 'files_merged', data: { taskId, files: proposal.files } });\r\n          }\r\n        }\r\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'approved' };\r\n        await task.save();\r\n        io.emit('maintenanceUpdate', { taskId, status: 'approved', report, timestamp: new Date() });\r\n        res.json({ success: true, message: 'Maintenance approved' });\r\n      } else if (action === 'reject') {\r\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'rejected' };\r\n        await task.save();\r\n        await Memory.create({ type: 'maintenance_rejected', data: { taskId, report } });\r\n        io.emit('maintenanceUpdate', { taskId, status: 'rejected', report, timestamp: new Date() });\r\n        res.json({ success: true, message: 'Maintenance rejected' });\r\n      } else {\r\n        res.status(400).json({ error: 'Invalid action' });\r\n      }\r\n    } catch (err) {\r\n      logger.error(`Maintenance action failed: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Maintenance action failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/backend-proposals', async (req, res) => {\r\n    logger.info('Entering /api/grok/backend-proposals');\r\n    try {\r\n      const proposals = await BackendProposal.find().lean();\r\n      logger.info(`Fetched ${proposals.length} backend proposals`, { proposalIds: proposals.map(p => p._id) });\r\n      res.json(proposals);\r\n    } catch (err) {\r\n      logger.error(`Backend proposals fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to fetch backend proposals', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/approve-backend', async (req, res) => {\r\n    logger.info('Entering /api/grok/approve-backend');\r\n    const { proposalId } = req.body;\r\n    try {\r\n      logger.debug(`Received proposalId: ${proposalId}`, { type: typeof proposalId });\r\n\r\n      if (!proposalId || !mongoose.Types.ObjectId.isValid(proposalId)) {\r\n        logger.warn(`Invalid proposalId: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Invalid proposalId format', received: proposalId });\r\n      }\r\n\r\n      const proposal = await BackendProposal.findById(proposalId);\r\n      if (!proposal) {\r\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Proposal not found', proposalId });\r\n      }\r\n\r\n      if (proposal.status !== 'pending') {\r\n        logger.warn(`Proposal not in pending state`, { proposalId, status: proposal.status });\r\n        return res.status(400).json({ error: 'Proposal is not pending', currentStatus: proposal.status });\r\n      }\r\n\r\n      logger.info(`Applying backend proposal`, { proposalId, file: proposal.file, change: proposal.change });\r\n\r\n      // Adjust file path based on file type\r\n      let filePath;\r\n      if (proposal.file === 'grok.js') {\r\n        filePath = path.join(__dirname, proposal.file); // grok.js is in src/routes/\r\n      } else if (proposal.file === 'db.js') {\r\n        filePath = path.join(__dirname, '..', proposal.file); // db.js is in src/\r\n      } else {\r\n        filePath = path.join(__dirname, '..', proposal.file); // Default to src/ for other files\r\n      }\r\n\r\n      // Check if file exists\r\n      try {\r\n        await fs.access(filePath);\r\n      } catch (err) {\r\n        logger.error(`File not found: ${filePath}`, { proposalId, error: err.message });\r\n        return res.status(400).json({ error: 'Target file does not exist', file: proposal.file });\r\n      }\r\n\r\n      // Backup original file\r\n      const backupPath = `${filePath}.bak.${Date.now()}`;\r\n      let originalContent = await fs.readFile(filePath, 'utf8');\r\n      originalContent = originalContent.trim(); // Remove trailing whitespace/newlines\r\n      await fs.writeFile(backupPath, originalContent, 'utf8');\r\n      logger.info(`Created backup of ${proposal.file} at ${backupPath}`, { proposalId });\r\n\r\n      let content = originalContent;\r\n      let newCode = '';\r\n\r\n      // Generate new code based on proposal type\r\n      if (proposal.change.includes('endpoint')) {\r\n        const endpointMatch = proposal.change.match(/POST \\/api\\/grok\\/(\\w+)/);\r\n        if (endpointMatch) {\r\n          const endpointName = endpointMatch[1];\r\n          newCode = `\r\nrouter.post('/${endpointName}', async (req, res) => {\r\n  try {\r\n    res.json({ message: '${endpointName} endpoint called' });\r\n  } catch (err) {\r\n    logger.error('${endpointName} error: \\${err.message}', { stack: err.stack });\r\n    res.status(500).json({ error: 'Failed', details: err.message });\r\n  }\r\n});\r\n          `;\r\n        }\r\n      } else if (proposal.change.includes('schema')) {\r\n        const schemaMatch = proposal.change.match(/Add (\\w+) field to (\\w+) schema/);\r\n        if (schemaMatch) {\r\n          const [_, field, schemaName] = schemaMatch;\r\n          newCode = `  ${field}: { type: String },`;\r\n          content = content.replace(\r\n            `${schemaName}Schema = new mongoose.Schema({`,\r\n            `${schemaName}Schema = new mongoose.Schema({\\n${newCode}`\r\n          );\r\n          newCode = ''; // Reset since schema changes are inline\r\n        }\r\n      } else if (proposal.change.includes('middleware')) {\r\n        newCode = `\r\nconst sanitizeInput = (req, res, next) => {\r\n  Object.keys(req.body).forEach(key => {\r\n    if (typeof req.body[key] === 'string') {\r\n      req.body[key] = req.body[key].replace(/[<>]/g, '');\r\n    }\r\n  });\r\n  next();\r\n};\r\nrouter.use(sanitizeInput);\r\n        `;\r\n      } else if (proposal.change.includes('rate limiting')) {\r\n        newCode = `\r\nconst rateLimit = require('express-rate-limit');\r\nconst limiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100 // limit each IP to 100 requests per windowMs\r\n});\r\nrouter.use(limiter);\r\n        `;\r\n        await exec(`npm install express-rate-limit --save`, { cwd: path.join(__dirname, '../../..') });\r\n        logger.info('Installed express-rate-limit for rate limiting', { proposalId });\r\n      }\r\n\r\n      // Append new code with clean separation\r\n      if (newCode) {\r\n        content = `${originalContent}\\n// --- Allur Space Console Addition (Proposal ID: ${proposalId}) ---\\n${newCode.trim()}\\n// --- End Addition ---`;\r\n      }\r\n\r\n      // Pre-validation checks\r\n      logger.debug(`Pre-validation content length: ${content.length}`, { proposalId });\r\n      logger.debug(`Proposed content for ${proposal.file}`, { content });\r\n\r\n      // Validate syntax before applying\r\n      try {\r\n        esprima.parseScript(content);\r\n      } catch (syntaxErr) {\r\n        logger.error(`Syntax validation failed for ${proposal.file}`, { proposalId, error: syntaxErr.message, content });\r\n        await fs.unlink(backupPath);\r\n        return res.status(400).json({ error: 'Proposed change has invalid syntax', details: syntaxErr.message });\r\n      }\r\n\r\n      // Apply changes\r\n      try {\r\n        await fs.writeFile(filePath, content, 'utf8');\r\n      } catch (writeErr) {\r\n        logger.error(`Failed to write changes to ${proposal.file}`, { proposalId, error: writeErr.message });\r\n        await fs.writeFile(filePath, originalContent, 'utf8');\r\n        await fs.unlink(backupPath);\r\n        return res.status(500).json({ error: 'Failed to apply changes', details: writeErr.message });\r\n      }\r\n\r\n      // Validate server still runs (async test)\r\n      try {\r\n        await new Promise((resolve, reject) => {\r\n          exec('node app.js', { cwd: path.join(__dirname, '../../..'), timeout: 5000 }, (err) => {\r\n            if (err) reject(err);\r\n            else resolve();\r\n          });\r\n        });\r\n      } catch (serverErr) {\r\n        logger.error(`Server failed to start after applying ${proposal.file}`, { proposalId, error: serverErr.message });\r\n        await fs.writeFile(filePath, originalContent, 'utf8');\r\n        await fs.unlink(backupPath);\r\n        return res.status(500).json({ error: 'Applied changes broke the server', details: serverErr.message });\r\n      }\r\n\r\n      // Update proposal status\r\n      proposal.status = 'approved';\r\n      proposal.appliedAt = new Date();\r\n      await proposal.save();\r\n\r\n      await Memory.create({ type: 'backend_approved', data: { proposalId, file: proposal.file, change: proposal.change } });\r\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \r\n        `# Backend Proposal Approved\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nNew Code: ${newCode}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('backendProposalUpdate', { proposalId, status: 'approved' });\r\n      logger.info(`Backend proposal approved successfully`, { proposalId });\r\n      res.json({ message: 'Backend change applied', backup: backupPath });\r\n    } catch (err) {\r\n      logger.error(`Backend approval error: ${err.message}`, { proposalId, stack: err.stack });\r\n      res.status(500).json({ error: 'Approval failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/deny-backend', async (req, res) => {\r\n    logger.info('Entering /api/grok/deny-backend');\r\n    const { proposalId } = req.body;\r\n    try {\r\n      if (!mongoose.Types.ObjectId.isValid(proposalId)) {\r\n        logger.warn(`Invalid proposalId: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Invalid proposalId format' });\r\n      }\r\n      const proposal = await BackendProposal.findById(proposalId);\r\n      if (!proposal) {\r\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\r\n        return res.status(404).json({ error: 'Proposal not found' });\r\n      }\r\n      proposal.status = 'denied';\r\n      await proposal.save();\r\n      await Memory.create({ type: 'backend_denied', data: { proposalId, file: proposal.file, change: proposal.change } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Backend Proposal Denied\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('backendProposalUpdate', { proposalId, status: 'denied' });\r\n      logger.info(`Backend proposal denied successfully`, { proposalId });\r\n      res.json({ message: 'Backend proposal denied' });\r\n    } catch (err) {\r\n      logger.error(`Backend denial error: ${err.message}`, { proposalId, stack: err.stack });\r\n      res.status(500).json({ error: 'Denial failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  logger.info('Allur Space Console: Initialized with Socket.IO');\r\n  console.log('Allur Space Console: Initialized with Socket.IO');\r\n  return router;\r\n};","error":"Line 58: Unexpected token .","level":"error","message":"Syntax validation failed for grok.js","proposalId":"67f6f9dc9a1085400502e729","timestamp":"2025-04-09T22:57:55.929Z"}
{"content":"/*\r\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js\r\n * Purpose: Allur Space Console router for task management, self-evolution, system enhancement, and backend proposal handling.\r\n * Change Log:\r\n *   - 04/09/2025: Fixed manual Playwright and auth (Chat Line 9700-ish).\r\n *   - 04/09/2025: Fixed 400 error on approve-backend (Chat Line 9800-ish).\r\n *   - 04/09/2025: Enhanced /file-content to log and return content (Chat Line 10400-ish).\r\n *   - 04/09/2025: Sprint 1 - Enhanced /approve-backend for safe application (New Chat, Sprint 1).\r\n *   - 04/09/2025: Fixed 500 errors on /approve-backend (New Chat, Post-Sprint 1).\r\n *   - 04/09/2025: Fixed 400 error due to incorrect file path (New Chat, Post-Sprint 1 Fix 2).\r\n *   - 04/09/2025: Fixed 400 error due to syntax failure (New Chat, Post-Sprint 1 Fix 3).\r\n *   - 04/09/2025: Hardened code injection for syntax reliability (New Chat, Post-Sprint 1 Fix 4).\r\n *   - 04/09/2025: Fixed persistent syntax error with isolated append (New Chat, Post-Sprint 1 Fix 5).\r\n *   - 04/09/2025: Fixed syntax error with clean append and validation (New Chat, Post-Sprint 1 Fix 6).\r\n *     - Why: 400 error \"Unexpected token .\" at line 58 despite valid append (User logs, 22:51 UTC, 04/09/2025).\r\n *     - How: Trimmed content, used clean \\n separators, added pre-validation length check, ensured full content logging.\r\n *     - Test: Approve \"Add middleware for input sanitization\" (ID 67f6f9dc9a1085400502e729), verify grok.js updates, no 400 error.\r\n * Self-Notes:\r\n *   - Nate: Verify MongoDB Task document structure post-update.\r\n *   - Nate: Test with failed tasks for content persistence.\r\n *   - Nate: Check grok.log for full content dump to confirm exact syntax error if it recurs.\r\n */\r\n\r\nconst express = require('express');\r\nconst path = require('path');\r\nconst mongoose = require('mongoose');\r\nconst esprima = require('esprima');\r\nconst { exec } = require('child_process');\r\nrequire('../db');\r\nconst Task = mongoose.model('Task');\r\nconst Memory = mongoose.model('Memory');\r\nconst BackendProposal = mongoose.model('BackendProposal');\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst { appendLog } = require('../utils/fileUtils');\r\nconst { processTask } = require('../utils/taskProcessorV18');\r\nconst { autoTestTask } = require('../utils/taskTesterV18');\r\nconst { xai } = require('@ai-sdk/xai');\r\nconst multer = require('multer');\r\nconst fs = require('fs').promises;\r\nconst winston = require('winston');\r\nconst upload = multer({ dest: 'uploads/' });\r\nconst client = xai({ apiKey: process.env.XAI_API_KEY });\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst logger = winston.createLogger({\r\n  level: 'info',\r\n  format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\r\n  transports: [\r\n    new winston.transports.File({ filename: path.join(__dirname, '../../../grok.log'), maxsize: 1024 * 1024 * 10 }),\r\n    new winston.transports.Console()\r\n  ]\r\n});\r\n\r\nmodule.exports = (io) => {\r\n  const router = express.Router();\r\n\r\n  const verifyToken = (req, res, next) => {\r\n    const token = req.headers['authorization']?.split(' ')[1];\r\n    if (!token) return res.status(401).json({ error: 'No token provided' });\r\n    jwt.verify(token, process.env.JWT_SECRET || 'chelsiemygirl2025420isawsome', (err, decoded) => {\r\n      if (err) {\r\n        logger.error(`JWT verification failed: ${err.message}`, { token });\r\n        return res.status(403).json({ error: 'Invalid token', details: err.message });\r\n      }\r\n      req.user = decoded;\r\n      logger.info(`Token verified for user: ${decoded.email}`, { userId: decoded._id });\r\n      next();\r\n    });\r\n  };\r\n\r\n  router.use(verifyToken);\r\n\r\n  async function readLogs(logFile) {\r\n    try {\r\n      const content = await fs.readFile(logFile, 'utf8');\r\n      return content.split('\\n').filter(line => line.trim()).map(line => {\r\n        try {\r\n          return JSON.parse(line);\r\n        } catch {\r\n          return { message: line, timestamp: new Date().toISOString() };\r\n        }\r\n      });\r\n    } catch (err) {\r\n      if (err.code === 'ENOENT') return [];\r\n      logger.error(`Failed to read log ${logFile}: ${err.message}`, { stack: err.stack });\r\n      return [];\r\n    }\r\n  }\r\n\r\n  router.get('/logs', async (req, res) => {\r\n    logger.info('Entering /api/grok/logs');\r\n    try {\r\n      const logs = {\r\n        error: await readLogs(path.join(__dirname, '../../../ERROR_LOG.md')),\r\n        debug: await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md')),\r\n        feature: await readLogs(path.join(__dirname, '../../../FEATURE_LOG.md')),\r\n        connectivity: await readLogs(path.join(__dirname, '../../../CONNECTIVITY_LOG.md')),\r\n        grok: await readLogs(path.join(__dirname, '../../../grok.log'))\r\n      };\r\n      await Memory.create({ type: 'logs_access', data: { path: '/logs', timestamp: new Date() } });\r\n      io.emit('logUpdate', { event: 'logs_accessed', logs: Object.keys(logs), timestamp: new Date() });\r\n      res.json(logs);\r\n    } catch (err) {\r\n      logger.error(`Logs fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to fetch logs', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/tasks', async (req, res) => {\r\n    logger.info('Entering /api/grok/tasks');\r\n    try {\r\n      const errorLogs = await readLogs(path.join(__dirname, '../../../ERROR_LOG.md'));\r\n      const recentErrors = errorLogs.filter(log => \r\n        log.message.includes('Tasks fetch error') && \r\n        new Date() - new Date(log.timestamp) < 24 * 60 * 60 * 1000\r\n      );\r\n      if (recentErrors.length > 3) {\r\n        logger.warn('Recent task fetch errors detected', { count: recentErrors.length });\r\n        await appendLog(path.join(__dirname, '../../../CONNECTIVITY_LOG.md'), \r\n          `# Task Fetch Issues\\nTimestamp: ${new Date().toISOString()}\\nErrors: ${recentErrors.length} in last 24h`);\r\n        res.set('X-Task-Warning', 'High error rate detected');\r\n      }\r\n      const tasks = await Task.find().lean();\r\n      await Memory.create({ type: 'tasks_fetch', data: { count: tasks.length, timestamp: new Date() } });\r\n      const taskData = tasks.map(t => ({\r\n        taskId: t.taskId,\r\n        prompt: t.prompt,\r\n        status: t.status,\r\n        cadence: t.cadence,\r\n        priority: t.priority,\r\n        generatedFiles: t.generatedFiles,\r\n      }));\r\n      io.emit('taskUpdate', { event: 'tasks_fetched', tasks: taskData, timestamp: new Date() });\r\n      res.json(taskData);\r\n    } catch (err) {\r\n      logger.error(`Tasks fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Tasks fetch failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/files', async (req, res) => {\r\n    logger.info('Entering /api/grok/files');\r\n    const dir = path.join(__dirname, '../../../frontend/src/pages');\r\n    try {\r\n      const debugLogs = await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md'));\r\n      const recentFileOps = debugLogs.filter(log => \r\n        log.message.includes('Task queued') && \r\n        new Date() - new Date(log.timestamp) < 7 * 24 * 60 * 60 * 1000\r\n      );\r\n      if (recentFileOps.length > 10) {\r\n        logger.info(`High file activity: ${recentFileOps.length} tasks in last 7 days`);\r\n        res.set('X-File-Activity', `High: ${recentFileOps.length} tasks`);\r\n      }\r\n      await fs.access(dir);\r\n      const files = await fs.readdir(dir);\r\n      const filteredFiles = files\r\n        .filter(file => /\\.(jsx|js|css)$/.test(file))\r\n        .map(file => ({ path: `${dir}/${file}`, name: file }));\r\n      await Memory.create({ type: 'files_fetch', data: { count: filteredFiles.length, timestamp: new Date() } });\r\n      io.emit('fileUpdate', { event: 'files_fetched', files: filteredFiles, timestamp: new Date() });\r\n      res.json(filteredFiles);\r\n    } catch (err) {\r\n      logger.error(`File listing error: ${err.message}`, { dir, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to list files', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/analyze', async (req, res) => {\r\n    logger.info('Entering /api/grok/analyze');\r\n    try {\r\n      const { data } = req.body;\r\n      if (!data) return res.status(400).json({ error: 'No data provided' });\r\n      const response = await client.chat.completions.create({\r\n        model: 'grok-2-latest',\r\n        messages: [{ role: 'user', content: `Analyze this data: ${JSON.stringify(data)}` }],\r\n        maxTokens: 500,\r\n        stream: false,\r\n        temperature: 0\r\n      });\r\n      await Memory.create({ type: 'analyze', data: { input: data, result: response.choices[0].message.content } });\r\n      io.emit('analyzeUpdate', { data, result: response.choices[0].message.content, timestamp: new Date() });\r\n      res.json({ result: response.choices[0].message.content });\r\n    } catch (error) {\r\n      logger.error(`xAI API error: ${error.message}`, { stack: error.stack });\r\n      res.status(500).json({ error: 'Failed to process request', details: error.message });\r\n    }\r\n  });\r\n\r\n  router.post('/upload', upload.single('file'), async (req, res) => {\r\n    logger.info('Entering /api/grok/upload');\r\n    try {\r\n      const fileContent = await fs.readFile(req.file.path, 'utf8');\r\n      const response = await client.chat.completions.create({\r\n        model: 'grok-2-latest',\r\n        messages: [{ role: 'user', content: `Analyze this file content: ${fileContent}` }],\r\n        maxTokens: 500,\r\n        stream: false,\r\n        temperature: 0\r\n      });\r\n      await Memory.create({ type: 'upload', data: { filename: req.file.originalname, result: response.choices[0].message.content } });\r\n      await fs.unlink(req.file.path);\r\n      io.emit('uploadUpdate', { filename: req.file.originalname, result: response.choices[0].message.content, timestamp: new Date() });\r\n      res.json({ result: response.choices[0].message.content });\r\n    } catch (error) {\r\n      logger.error(`File upload error: ${error.message}`, { stack: error.stack });\r\n      res.status(500).json({ error: 'Failed to process file', details: error.message });\r\n    }\r\n  });\r\n\r\n  router.post('/edit', async (req, res) => {\r\n    logger.info('Entering /api/grok/edit');\r\n    const { prompt, file } = req.body;\r\n    if (!prompt) return res.status(400).json({ error: 'Prompt required' });\r\n    try {\r\n      const task = new Task({\r\n        taskId: uuidv4(),\r\n        prompt,\r\n        file: file || null,\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await task.save();\r\n      await Memory.create({ type: 'task_created', data: { taskId: task.taskId, prompt } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# New Task Queued\\nTask ID: ${task.taskId}\\nPrompt: ${prompt}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId: task.taskId, prompt, status: 'pending', timestamp: new Date() });\r\n      processTask(task.taskId).then(() => autoTestTask(task.taskId));\r\n      res.json({ taskId: task.taskId, message: 'Task queued' });\r\n    } catch (err) {\r\n      logger.error(`Task creation error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Task creation failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/clear-tasks', async (req, res) => {\r\n    logger.info('Entering /api/grok/clear-tasks');\r\n    try {\r\n      await Task.deleteMany({});\r\n      await Memory.create({ type: 'tasks_cleared', data: { timestamp: new Date() } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Tasks Cleared\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { event: 'tasks_cleared', timestamp: new Date() });\r\n      res.json({ message: 'All tasks cleared' });\r\n    } catch (err) {\r\n      logger.error(`Clear tasks error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to clear tasks', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.delete('/tasks/:taskId', async (req, res) => {\r\n    logger.info('Entering /api/grok/tasks/:taskId DELETE');\r\n    try {\r\n      const { taskId } = req.params;\r\n      await Task.deleteOne({ taskId });\r\n      await Memory.create({ type: 'task_deleted', data: { taskId, timestamp: new Date() } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Task Deleted\\nTask ID: ${taskId}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, status: 'deleted', timestamp: new Date() });\r\n      res.json({ message: 'Task deleted' });\r\n    } catch (err) {\r\n      logger.error(`Delete task error: ${err.message}`, { taskId: req.params.taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to delete task', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/file-content', async (req, res) => {\r\n    logger.info('Entering /api/grok/file-content');\r\n    const { taskId } = req.query;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      logger.debug(`Fetched task content for ${taskId}`, { originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\r\n      io.emit('fileContentUpdate', { \r\n        taskId, \r\n        originalContent: task.originalContent, \r\n        newContent: task.newContent, \r\n        generatedFiles: task.generatedFiles, \r\n        timestamp: new Date() \r\n      });\r\n      res.json({ originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\r\n    } catch (err) {\r\n      logger.error(`File content fetch error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'File content fetch failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/approve', async (req, res) => {\r\n    logger.info('Entering /api/grok/approve');\r\n    const { taskId } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task || task.status !== 'completed') return res.status(400).json({ error: 'Invalid task' });\r\n      for (const file of task.generatedFiles) {\r\n        await fs.writeFile(file, await fs.readFile(file, 'utf8')); // Persist generated files\r\n      }\r\n      task.status = 'applied';\r\n      await task.save();\r\n      await Memory.create({ type: 'task_approved', data: { taskId, files: task.generatedFiles } });\r\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \r\n        `# Task Approved\\nTask ID: ${taskId}\\nFiles: ${task.generatedFiles.join(', ')}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, status: 'applied', files: task.generatedFiles, timestamp: new Date() });\r\n      res.json({ message: 'Changes applied' });\r\n    } catch (err) {\r\n      logger.error(`Approval error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Approval failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/reject', async (req, res) => {\r\n    logger.info('Entering /api/grok/reject');\r\n    const { taskId, feedback } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      task.status = 'rejected';\r\n      task.feedback = feedback;\r\n      await task.save();\r\n      await Memory.create({ type: 'task_rejected', data: { taskId, feedback } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Task Rejected\\nTask ID: ${taskId}\\nFeedback: ${feedback || 'None'}\\nTimestamp: ${new Date().toISOString()}`);\r\n      let newTaskId = null;\r\n      if (feedback) {\r\n        const newTask = new Task({\r\n          taskId: uuidv4(),\r\n          prompt: `${task.prompt} - Revised with feedback: ${feedback}`,\r\n          file: task.file,\r\n          status: 'pending',\r\n          createdAt: new Date(),\r\n        });\r\n        await newTask.save();\r\n        await Memory.create({ type: 'task_created_from_rejection', data: { taskId: newTask.taskId, prompt: newTask.prompt } });\r\n        io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\r\n        processTask(newTask.taskId);\r\n        newTaskId = newTask.taskId;\r\n      }\r\n      io.emit('taskUpdate', { taskId, status: 'rejected', feedback, timestamp: new Date() });\r\n      res.json({ message: 'Task rejected', newTaskId });\r\n    } catch (err) {\r\n      logger.error(`Rejection error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Rejection failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/test', async (req, res) => {\r\n    logger.info('Entering /api/grok/test');\r\n    const { taskId, manual } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task || !task.generatedFiles.length) return res.status(400).json({ error: 'No files to test' });\r\n\r\n      if (manual) {\r\n        const mainFile = task.generatedFiles[0];\r\n        const fileName = path.basename(mainFile);\r\n        const testScript = `\r\n          const { chromium } = require('playwright');\r\n          (async () => {\r\n            const browser = await chromium.launch({ headless: false });\r\n            const context = await browser.newContext();\r\n            const page = await context.newPage();\r\n            await page.goto('http://localhost:3000/employee-log');\r\n            await page.fill('#email', 'admin@idurarapp.com');\r\n            await page.fill('#password', 'admin123');\r\n            await page.click('#login-button');\r\n            console.log('Browser open for manual review. Close when done.');\r\n          })();\r\n        `;\r\n        const testFile = path.join(__dirname, `manual-test-${taskId}-${fileName}.js`);\r\n        await fs.writeFile(testFile, testScript);\r\n        exec(`node ${testFile}`, (err, stdout, stderr) => {\r\n          if (err) logger.error(`Manual test error: ${err.message}`, { taskId });\r\n        });\r\n      } else {\r\n        await autoTestTask(taskId);\r\n      }\r\n\r\n      io.emit('testUpdate', { taskId, status: 'testing', manual, timestamp: new Date() });\r\n      res.json({ message: manual ? 'Manual Playwright test launched' : 'Auto Playwright test launched' });\r\n    } catch (err) {\r\n      logger.error(`Test endpoint error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Test failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/self-test', async (req, res) => {\r\n    logger.info('Entering /api/grok/self-test');\r\n    try {\r\n      const testTask = new Task({\r\n        taskId: uuidv4(),\r\n        prompt: 'Self-test Allur Space Console functionality',\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await testTask.save();\r\n      await processTask(testTask.taskId);\r\n      await autoTestTask(testTask.taskId);\r\n      const memory = await Memory.findOne({ taskId: testTask.taskId });\r\n      io.emit('selfTestUpdate', { taskId: testTask.taskId, result: memory?.outcome || 'pending', timestamp: new Date() });\r\n      res.json({ message: 'Self-test initiated', taskId: testTask.taskId });\r\n    } catch (err) {\r\n      logger.error(`Self-test error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Self-test failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/self-enhance', async (req, res) => {\r\n    logger.info('Entering /api/grok/self-enhance');\r\n    try {\r\n      const recentFailures = await Memory.find({ outcome: 'failure' })\r\n        .sort({ timestamp: -1 })\r\n        .limit(5)\r\n        .lean();\r\n      \r\n      if (!recentFailures.length) {\r\n        io.emit('selfEnhanceUpdate', { message: 'No recent failures to enhance from', timestamp: new Date() });\r\n        return res.json({ message: 'No recent failures to enhance from' });\r\n      }\r\n\r\n      const enhancementTasks = [];\r\n      for (const failure of recentFailures) {\r\n        if (failure.lessons && failure.lessons.includes('not defined')) {\r\n          const missing = failure.lessons.match(/(\\w+) is not defined/)?.[1];\r\n          if (missing && !['taskId'].includes(missing)) {\r\n            const newTask = new Task({\r\n              taskId: uuidv4(),\r\n              prompt: `Add ${missing} dependency to fileGeneratorV18.js and retry task ${failure.taskId}`,\r\n              status: 'pending',\r\n              createdAt: new Date(),\r\n            });\r\n            await newTask.save();\r\n            await Memory.create({ type: 'self_enhance_task', data: { taskId: newTask.taskId, prompt: newTask.prompt, originalTaskId: failure.taskId } });\r\n            enhancementTasks.push(newTask.taskId);\r\n            io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\r\n            processTask(newTask.taskId);\r\n          }\r\n        }\r\n      }\r\n\r\n      const techPrompt = 'Analyze latest tech updates, suggest improvements for Allur Space Console';\r\n      const techTask = new Task({\r\n        taskId: uuidv4(),\r\n        prompt: techPrompt,\r\n        status: 'pending',\r\n        createdAt: new Date(),\r\n      });\r\n      await techTask.save();\r\n      await Memory.create({ type: 'self_evolve', data: { taskId: techTask.taskId, prompt: techPrompt } });\r\n      enhancementTasks.push(techTask.taskId);\r\n      io.emit('taskUpdate', { taskId: techTask.taskId, prompt: techPrompt, status: 'pending', timestamp: new Date() });\r\n      processTask(techTask.taskId);\r\n\r\n      io.emit('selfEnhanceUpdate', { enhancements: enhancementTasks, timestamp: new Date() });\r\n      res.json({ message: 'Self-enhancement and evolution tasks queued', taskIds: enhancementTasks });\r\n    } catch (err) {\r\n      logger.error(`Self-enhancement error: ${err.message}`, { stack: err.stack });\r\n      io.emit('selfEnhanceUpdate', { error: err.message, timestamp: new Date() });\r\n      res.status(500).json({ error: 'Self-enhancement failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/update-priority', async (req, res) => {\r\n    logger.info('Entering /api/grok/update-priority');\r\n    const { taskId, priority } = req.body;\r\n    try {\r\n      const task = await Task.findOneAndUpdate({ taskId }, { priority }, { new: true });\r\n      await Memory.create({ type: 'priority_updated', data: { taskId, priority } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Priority Updated\\nTask ID: ${taskId}\\nNew Priority: ${priority}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('taskUpdate', { taskId, priority, timestamp: new Date() });\r\n      res.json({ message: 'Priority updated', task });\r\n    } catch (err) {\r\n      logger.error(`Priority update error: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to update priority', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/maintenance', async (req, res) => {\r\n    logger.info('Entering /api/grok/maintenance');\r\n    const { taskId, action, report } = req.body;\r\n    try {\r\n      const task = await Task.findOne({ taskId });\r\n      if (!task) return res.status(404).json({ error: 'Task not found' });\r\n      if (action === 'approve') {\r\n        for (const proposal of report.proposals || []) {\r\n          if (proposal.type === 'merge_logs') {\r\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\r\n            await fs.writeFile('grok.log', merged.join('\\n'), 'utf8');\r\n            await Promise.all(proposal.files.filter(f => f !== 'grok.log').map(f => fs.unlink(f)));\r\n            await Memory.create({ type: 'logs_merged', data: { taskId, files: proposal.files } });\r\n          } else if (proposal.type === 'merge_memory') {\r\n            const archived = JSON.parse(await fs.readFile(proposal.files[0], 'utf8'));\r\n            await Memory.insertMany(archived);\r\n            await fs.unlink(proposal.files[0]);\r\n            await Memory.create({ type: 'memory_merged', data: { taskId, file: proposal.files[0] } });\r\n          } else if (proposal.type === 'merge_files') {\r\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\r\n            await fs.writeFile('fileGeneratorV18.js', merged.join('\\n'), 'utf8');\r\n            await Promise.all(proposal.files.map(f => fs.unlink(f)));\r\n            await Memory.create({ type: 'files_merged', data: { taskId, files: proposal.files } });\r\n          }\r\n        }\r\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'approved' };\r\n        await task.save();\r\n        io.emit('maintenanceUpdate', { taskId, status: 'approved', report, timestamp: new Date() });\r\n        res.json({ success: true, message: 'Maintenance approved' });\r\n      } else if (action === 'reject') {\r\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'rejected' };\r\n        await task.save();\r\n        await Memory.create({ type: 'maintenance_rejected', data: { taskId, report } });\r\n        io.emit('maintenanceUpdate', { taskId, status: 'rejected', report, timestamp: new Date() });\r\n        res.json({ success: true, message: 'Maintenance rejected' });\r\n      } else {\r\n        res.status(400).json({ error: 'Invalid action' });\r\n      }\r\n    } catch (err) {\r\n      logger.error(`Maintenance action failed: ${err.message}`, { taskId, stack: err.stack });\r\n      res.status(500).json({ error: 'Maintenance action failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.get('/backend-proposals', async (req, res) => {\r\n    logger.info('Entering /api/grok/backend-proposals');\r\n    try {\r\n      const proposals = await BackendProposal.find().lean();\r\n      logger.info(`Fetched ${proposals.length} backend proposals`, { proposalIds: proposals.map(p => p._id) });\r\n      res.json(proposals);\r\n    } catch (err) {\r\n      logger.error(`Backend proposals fetch error: ${err.message}`, { stack: err.stack });\r\n      res.status(500).json({ error: 'Failed to fetch backend proposals', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/approve-backend', async (req, res) => {\r\n    logger.info('Entering /api/grok/approve-backend');\r\n    const { proposalId } = req.body;\r\n    try {\r\n      logger.debug(`Received proposalId: ${proposalId}`, { type: typeof proposalId });\r\n\r\n      if (!proposalId || !mongoose.Types.ObjectId.isValid(proposalId)) {\r\n        logger.warn(`Invalid proposalId: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Invalid proposalId format', received: proposalId });\r\n      }\r\n\r\n      const proposal = await BackendProposal.findById(proposalId);\r\n      if (!proposal) {\r\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Proposal not found', proposalId });\r\n      }\r\n\r\n      if (proposal.status !== 'pending') {\r\n        logger.warn(`Proposal not in pending state`, { proposalId, status: proposal.status });\r\n        return res.status(400).json({ error: 'Proposal is not pending', currentStatus: proposal.status });\r\n      }\r\n\r\n      logger.info(`Applying backend proposal`, { proposalId, file: proposal.file, change: proposal.change });\r\n\r\n      // Adjust file path based on file type\r\n      let filePath;\r\n      if (proposal.file === 'grok.js') {\r\n        filePath = path.join(__dirname, proposal.file); // grok.js is in src/routes/\r\n      } else if (proposal.file === 'db.js') {\r\n        filePath = path.join(__dirname, '..', proposal.file); // db.js is in src/\r\n      } else {\r\n        filePath = path.join(__dirname, '..', proposal.file); // Default to src/ for other files\r\n      }\r\n\r\n      // Check if file exists\r\n      try {\r\n        await fs.access(filePath);\r\n      } catch (err) {\r\n        logger.error(`File not found: ${filePath}`, { proposalId, error: err.message });\r\n        return res.status(400).json({ error: 'Target file does not exist', file: proposal.file });\r\n      }\r\n\r\n      // Backup original file\r\n      const backupPath = `${filePath}.bak.${Date.now()}`;\r\n      let originalContent = await fs.readFile(filePath, 'utf8');\r\n      originalContent = originalContent.trim(); // Remove trailing whitespace/newlines\r\n      await fs.writeFile(backupPath, originalContent, 'utf8');\r\n      logger.info(`Created backup of ${proposal.file} at ${backupPath}`, { proposalId });\r\n\r\n      let content = originalContent;\r\n      let newCode = '';\r\n\r\n      // Generate new code based on proposal type\r\n      if (proposal.change.includes('endpoint')) {\r\n        const endpointMatch = proposal.change.match(/POST \\/api\\/grok\\/(\\w+)/);\r\n        if (endpointMatch) {\r\n          const endpointName = endpointMatch[1];\r\n          newCode = `\r\nrouter.post('/${endpointName}', async (req, res) => {\r\n  try {\r\n    res.json({ message: '${endpointName} endpoint called' });\r\n  } catch (err) {\r\n    logger.error('${endpointName} error: \\${err.message}', { stack: err.stack });\r\n    res.status(500).json({ error: 'Failed', details: err.message });\r\n  }\r\n});\r\n          `;\r\n        }\r\n      } else if (proposal.change.includes('schema')) {\r\n        const schemaMatch = proposal.change.match(/Add (\\w+) field to (\\w+) schema/);\r\n        if (schemaMatch) {\r\n          const [_, field, schemaName] = schemaMatch;\r\n          newCode = `  ${field}: { type: String },`;\r\n          content = content.replace(\r\n            `${schemaName}Schema = new mongoose.Schema({`,\r\n            `${schemaName}Schema = new mongoose.Schema({\\n${newCode}`\r\n          );\r\n          newCode = ''; // Reset since schema changes are inline\r\n        }\r\n      } else if (proposal.change.includes('middleware')) {\r\n        newCode = `\r\nconst sanitizeInput = (req, res, next) => {\r\n  Object.keys(req.body).forEach(key => {\r\n    if (typeof req.body[key] === 'string') {\r\n      req.body[key] = req.body[key].replace(/[<>]/g, '');\r\n    }\r\n  });\r\n  next();\r\n};\r\nrouter.use(sanitizeInput);\r\n        `;\r\n      } else if (proposal.change.includes('rate limiting')) {\r\n        newCode = `\r\nconst rateLimit = require('express-rate-limit');\r\nconst limiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutes\r\n  max: 100 // limit each IP to 100 requests per windowMs\r\n});\r\nrouter.use(limiter);\r\n        `;\r\n        await exec(`npm install express-rate-limit --save`, { cwd: path.join(__dirname, '../../..') });\r\n        logger.info('Installed express-rate-limit for rate limiting', { proposalId });\r\n      }\r\n\r\n      // Append new code with clean separation\r\n      if (newCode) {\r\n        content = `${originalContent}\\n// --- Allur Space Console Addition (Proposal ID: ${proposalId}) ---\\n${newCode.trim()}\\n// --- End Addition ---`;\r\n      }\r\n\r\n      // Pre-validation checks\r\n      logger.debug(`Pre-validation content length: ${content.length}`, { proposalId });\r\n      logger.debug(`Proposed content for ${proposal.file}`, { content });\r\n\r\n      // Validate syntax before applying\r\n      try {\r\n        esprima.parseScript(content);\r\n      } catch (syntaxErr) {\r\n        logger.error(`Syntax validation failed for ${proposal.file}`, { proposalId, error: syntaxErr.message, content });\r\n        await fs.unlink(backupPath);\r\n        return res.status(400).json({ error: 'Proposed change has invalid syntax', details: syntaxErr.message });\r\n      }\r\n\r\n      // Apply changes\r\n      try {\r\n        await fs.writeFile(filePath, content, 'utf8');\r\n      } catch (writeErr) {\r\n        logger.error(`Failed to write changes to ${proposal.file}`, { proposalId, error: writeErr.message });\r\n        await fs.writeFile(filePath, originalContent, 'utf8');\r\n        await fs.unlink(backupPath);\r\n        return res.status(500).json({ error: 'Failed to apply changes', details: writeErr.message });\r\n      }\r\n\r\n      // Validate server still runs (async test)\r\n      try {\r\n        await new Promise((resolve, reject) => {\r\n          exec('node app.js', { cwd: path.join(__dirname, '../../..'), timeout: 5000 }, (err) => {\r\n            if (err) reject(err);\r\n            else resolve();\r\n          });\r\n        });\r\n      } catch (serverErr) {\r\n        logger.error(`Server failed to start after applying ${proposal.file}`, { proposalId, error: serverErr.message });\r\n        await fs.writeFile(filePath, originalContent, 'utf8');\r\n        await fs.unlink(backupPath);\r\n        return res.status(500).json({ error: 'Applied changes broke the server', details: serverErr.message });\r\n      }\r\n\r\n      // Update proposal status\r\n      proposal.status = 'approved';\r\n      proposal.appliedAt = new Date();\r\n      await proposal.save();\r\n\r\n      await Memory.create({ type: 'backend_approved', data: { proposalId, file: proposal.file, change: proposal.change } });\r\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \r\n        `# Backend Proposal Approved\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nNew Code: ${newCode}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('backendProposalUpdate', { proposalId, status: 'approved' });\r\n      logger.info(`Backend proposal approved successfully`, { proposalId });\r\n      res.json({ message: 'Backend change applied', backup: backupPath });\r\n    } catch (err) {\r\n      logger.error(`Backend approval error: ${err.message}`, { proposalId, stack: err.stack });\r\n      res.status(500).json({ error: 'Approval failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  router.post('/deny-backend', async (req, res) => {\r\n    logger.info('Entering /api/grok/deny-backend');\r\n    const { proposalId } = req.body;\r\n    try {\r\n      if (!mongoose.Types.ObjectId.isValid(proposalId)) {\r\n        logger.warn(`Invalid proposalId: ${proposalId}`);\r\n        return res.status(400).json({ error: 'Invalid proposalId format' });\r\n      }\r\n      const proposal = await BackendProposal.findById(proposalId);\r\n      if (!proposal) {\r\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\r\n        return res.status(404).json({ error: 'Proposal not found' });\r\n      }\r\n      proposal.status = 'denied';\r\n      await proposal.save();\r\n      await Memory.create({ type: 'backend_denied', data: { proposalId, file: proposal.file, change: proposal.change } });\r\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \r\n        `# Backend Proposal Denied\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nTimestamp: ${new Date().toISOString()}`);\r\n      io.emit('backendProposalUpdate', { proposalId, status: 'denied' });\r\n      logger.info(`Backend proposal denied successfully`, { proposalId });\r\n      res.json({ message: 'Backend proposal denied' });\r\n    } catch (err) {\r\n      logger.error(`Backend denial error: ${err.message}`, { proposalId, stack: err.stack });\r\n      res.status(500).json({ error: 'Denial failed', details: err.message });\r\n    }\r\n  });\r\n\r\n  logger.info('Allur Space Console: Initialized with Socket.IO');\r\n  console.log('Allur Space Console: Initialized with Socket.IO');\r\n  return router;\r\n};","error":"Line 58: Unexpected token .","level":"error","message":"Syntax validation failed for grok.js","proposalId":"67f6fb7ffb130ab63d120cab","timestamp":"2025-04-09T22:58:32.291Z"}
{"error":"Command failed: node app.js\nnode:internal/modules/cjs/loader:1051\r\n  throw err;\r\n  ^\r\n\r\nError: Cannot find module 'C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\app.js'\r\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1048:15)\r\n    at Module._load (node:internal/modules/cjs/loader:901:27)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\r\n    at node:internal/main/run_main_module:23:47 {\r\n  code: 'MODULE_NOT_FOUND',\r\n  requireStack: []\r\n}\r\n\r\nNode.js v20.9.0\r\n","level":"error","message":"Server failed to start after applying db.js","proposalId":"67f6fe529b8b87308d5c389c","timestamp":"2025-04-09T23:10:44.044Z"}
{"content":"/*\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js\n * Purpose: Allur Space Console router for task management, self-evolution, system enhancement, and backend proposal handling.\n * Change Log:\n *   - 04/09/2025: Fixed manual Playwright and auth (Chat Line 9700-ish).\n *   - 04/09/2025: Fixed 400 error on approve-backend (Chat Line 9800-ish).\n *   - 04/09/2025: Enhanced /file-content to log and return content (Chat Line 10400-ish).\n *   - 04/09/2025: Sprint 1 - Enhanced /approve-backend for safe application (New Chat, Sprint 1).\n *   - 04/09/2025: Fixed 500 errors on /approve-backend (New Chat, Post-Sprint 1).\n *   - 04/09/2025: Fixed 400 error due to incorrect file path (New Chat, Post-Sprint 1 Fix 2).\n *   - 04/09/2025: Fixed 400 error due to syntax failure (New Chat, Post-Sprint 1 Fix 3).\n *   - 04/09/2025: Hardened code injection for syntax reliability (New Chat, Post-Sprint 1 Fix 4).\n *   - 04/09/2025: Fixed persistent syntax error with isolated append (New Chat, Post-Sprint 1 Fix 5).\n *   - 04/09/2025: Fixed syntax error with clean append and validation (New Chat, Post-Sprint 1 Fix 6).\n *   - 04/09/2025: Fixed mixed ENOENT and syntax errors (New Chat, Post-Sprint 1 Fix 7).\n *   - 04/09/2025: Fixed startup SyntaxError in /logs endpoint (New Chat, Post-Sprint 1 Fix 8).\n *     - Why: \"missing ) after argument list\" crashed server at startup (User logs, 23:05 UTC, 04/09/2025).\n *     - How: Corrected object literal syntax in /logs from ':' to '=', fixed typo in __dirname.\n *     - Test: Run `npm start`, verify server starts, then approve proposal ID 67f6f2f3fc128bcc67f9dfdd.\n * Self-Notes:\n *   - Nate: Verify server starts cleanly post-fix.\n *   - Nate: Test /approve-backend with latest logic after startup fix.\n *   - Nate: Check grok.log for full content dump if 400 errors persist.\n */\n\nconst express = require('express');\nconst path = require('path');\nconst mongoose = require('mongoose');\nconst esprima = require('esprima');\nconst { exec } = require('child_process');\nrequire('../db');\nconst Task = mongoose.model('Task');\nconst Memory = mongoose.model('Memory');\nconst BackendProposal = mongoose.model('BackendProposal');\nconst { v4: uuidv4 } = require('uuid');\nconst { appendLog } = require('../utils/fileUtils');\nconst { processTask } = require('../utils/taskProcessorV18');\nconst { autoTestTask } = require('../utils/taskTesterV18');\nconst { xai } = require('@ai-sdk/xai');\nconst multer = require('multer');\nconst fs = require('fs').promises;\nconst winston = require('winston');\nconst upload = multer({ dest: 'uploads/' });\nconst client = xai({ apiKey: process.env.XAI_API_KEY });\nconst jwt = require('jsonwebtoken');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\n  transports: [\n    new winston.transports.File({ filename: path.join(__dirname, '../../../grok.log'), maxsize: 1024 * 1024 * 10 }),\n    new winston.transports.Console()\n  ]\n});\n\nmodule.exports = (io) => {\n  const router = express.Router();\n\n  const verifyToken = (req, res, next) => {\n    const token = req.headers['authorization']?.split(' ')[1];\n    if (!token) return res.status(401).json({ error: 'No token provided' });\n    jwt.verify(token, process.env.JWT_SECRET || 'chelsiemygirl2025420isawsome', (err, decoded) => {\n      if (err) {\n        logger.error(`JWT verification failed: ${err.message}`, { token });\n        return res.status(403).json({ error: 'Invalid token', details: err.message });\n      }\n      req.user = decoded;\n      logger.info(`Token verified for user: ${decoded.email}`, { userId: decoded._id });\n      next();\n    });\n  };\n\n  router.use(verifyToken);\n\n  async function readLogs(logFile) {\n    try {\n      const content = await fs.readFile(logFile, 'utf8');\n      return content.split('\\n').filter(line => line.trim()).map(line => {\n        try {\n          return JSON.parse(line);\n        } catch {\n          return { message: line, timestamp: new Date().toISOString() };\n        }\n      });\n    } catch (err) {\n      if (err.code === 'ENOENT') return [];\n      logger.error(`Failed to read log ${logFile}: ${err.message}`, { stack: err.stack });\n      return [];\n    }\n  }\n\n  router.get('/logs', async (req, res) => {\n    logger.info('Entering /api/grok/logs');\n    try {\n      const logs = {\n        error: await readLogs(path.join(__dirname, '../../../ERROR_LOG.md')),\n        debug: await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md')),\n        feature: await readLogs(path.join(__dirname, '../../../FEATURE_LOG.md')),\n        connectivity: await readLogs(path.join(__dirname, '../../../CONNECTIVITY_LOG.md')),\n        grok: await readLogs(path.join(__dirname, '../../../grok.log'))\n      };\n      await Memory.create({ type: 'logs_access', data: { path: '/logs', timestamp: new Date() } });\n      io.emit('logUpdate', { event: 'logs_accessed', logs: Object.keys(logs), timestamp: new Date() });\n      res.json(logs);\n    } catch (err) {\n      logger.error(`Logs fetch error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Failed to fetch logs', details: err.message });\n    }\n  });\n\n  router.get('/tasks', async (req, res) => {\n    logger.info('Entering /api/grok/tasks');\n    try {\n      const errorLogs = await readLogs(path.join(__dirname, '../../../ERROR_LOG.md'));\n      const recentErrors = errorLogs.filter(log => \n        log.message.includes('Tasks fetch error') && \n        new Date() - new Date(log.timestamp) < 24 * 60 * 60 * 1000\n      );\n      if (recentErrors.length > 3) {\n        logger.warn('Recent task fetch errors detected', { count: recentErrors.length });\n        await appendLog(path.join(__dirname, '../../../CONNECTIVITY_LOG.md'), \n          `# Task Fetch Issues\\nTimestamp: ${new Date().toISOString()}\\nErrors: ${recentErrors.length} in last 24h`);\n        res.set('X-Task-Warning', 'High error rate detected');\n      }\n      const tasks = await Task.find().lean();\n      await Memory.create({ type: 'tasks_fetch', data: { count: tasks.length, timestamp: new Date() } });\n      const taskData = tasks.map(t => ({\n        taskId: t.taskId,\n        prompt: t.prompt,\n        status: t.status,\n        cadence: t.cadence,\n        priority: t.priority,\n        generatedFiles: t.generatedFiles,\n      }));\n      io.emit('taskUpdate', { event: 'tasks_fetched', tasks: taskData, timestamp: new Date() });\n      res.json(taskData);\n    } catch (err) {\n      logger.error(`Tasks fetch error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Tasks fetch failed', details: err.message });\n    }\n  });\n\n  router.get('/files', async (req, res) => {\n    logger.info('Entering /api/grok/files');\n    const dir = path.join(__dirname, '../../../frontend/src/pages');\n    try {\n      const debugLogs = await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md'));\n      const recentFileOps = debugLogs.filter(log => \n        log.message.includes('Task queued') && \n        new Date() - new Date(log.timestamp) < 7 * 24 * 60 * 60 * 1000\n      );\n      if (recentFileOps.length > 10) {\n        logger.info(`High file activity: ${recentFileOps.length} tasks in last 7 days`);\n        res.set('X-File-Activity', `High: ${recentFileOps.length} tasks`);\n      }\n      await fs.access(dir);\n      const files = await fs.readdir(dir);\n      const filteredFiles = files\n        .filter(file => /\\.(jsx|js|css)$/.test(file))\n        .map(file => ({ path: `${dir}/${file}`, name: file }));\n      await Memory.create({ type: 'files_fetch', data: { count: filteredFiles.length, timestamp: new Date() } });\n      io.emit('fileUpdate', { event: 'files_fetched', files: filteredFiles, timestamp: new Date() });\n      res.json(filteredFiles);\n    } catch (err) {\n      logger.error(`File listing error: ${err.message}`, { dir, stack: err.stack });\n      res.status(500).json({ error: 'Failed to list files', details: err.message });\n    }\n  });\n\n  router.post('/analyze', async (req, res) => {\n    logger.info('Entering /api/grok/analyze');\n    try {\n      const { data } = req.body;\n      if (!data) return res.status(400).json({ error: 'No data provided' });\n      const response = await client.chat.completions.create({\n        model: 'grok-2-latest',\n        messages: [{ role: 'user', content: `Analyze this data: ${JSON.stringify(data)}` }],\n        maxTokens: 500,\n        stream: false,\n        temperature: 0\n      });\n      await Memory.create({ type: 'analyze', data: { input: data, result: response.choices[0].message.content } });\n      io.emit('analyzeUpdate', { data, result: response.choices[0].message.content, timestamp: new Date() });\n      res.json({ result: response.choices[0].message.content });\n    } catch (error) {\n      logger.error(`xAI API error: ${error.message}`, { stack: error.stack });\n      res.status(500).json({ error: 'Failed to process request', details: error.message });\n    }\n  });\n\n  router.post('/upload', upload.single('file'), async (req, res) => {\n    logger.info('Entering /api/grok/upload');\n    try {\n      const fileContent = await fs.readFile(req.file.path, 'utf8');\n      const response = await client.chat.completions.create({\n        model: 'grok-2-latest',\n        messages: [{ role: 'user', content: `Analyze this file content: ${fileContent}` }],\n        maxTokens: 500,\n        stream: false,\n        temperature: 0\n      });\n      await Memory.create({ type: 'upload', data: { filename: req.file.originalname, result: response.choices[0].message.content } });\n      await fs.unlink(req.file.path);\n      io.emit('uploadUpdate', { filename: req.file.originalname, result: response.choices[0].message.content, timestamp: new Date() });\n      res.json({ result: response.choices[0].message.content });\n    } catch (error) {\n      logger.error(`File upload error: ${error.message}`, { stack: error.stack });\n      res.status(500).json({ error: 'Failed to process file', details: error.message });\n    }\n  });\n\n  router.post('/edit', async (req, res) => {\n    logger.info('Entering /api/grok/edit');\n    const { prompt, file } = req.body;\n    if (!prompt) return res.status(400).json({ error: 'Prompt required' });\n    try {\n      const task = new Task({\n        taskId: uuidv4(),\n        prompt,\n        file: file || null,\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      await task.save();\n      await Memory.create({ type: 'task_created', data: { taskId: task.taskId, prompt } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# New Task Queued\\nTask ID: ${task.taskId}\\nPrompt: ${prompt}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId: task.taskId, prompt, status: 'pending', timestamp: new Date() });\n      processTask(task.taskId).then(() => autoTestTask(task.taskId));\n      res.json({ taskId: task.taskId, message: 'Task queued' });\n    } catch (err) {\n      logger.error(`Task creation error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Task creation failed', details: err.message });\n    }\n  });\n\n  router.post('/clear-tasks', async (req, res) => {\n    logger.info('Entering /api/grok/clear-tasks');\n    try {\n      await Task.deleteMany({});\n      await Memory.create({ type: 'tasks_cleared', data: { timestamp: new Date() } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Tasks Cleared\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { event: 'tasks_cleared', timestamp: new Date() });\n      res.json({ message: 'All tasks cleared' });\n    } catch (err) {\n      logger.error(`Clear tasks error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Failed to clear tasks', details: err.message });\n    }\n  });\n\n  router.delete('/tasks/:taskId', async (req, res) => {\n    logger.info('Entering /api/grok/tasks/:taskId DELETE');\n    try {\n      const { taskId } = req.params;\n      await Task.deleteOne({ taskId });\n      await Memory.create({ type: 'task_deleted', data: { taskId, timestamp: new Date() } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Task Deleted\\nTask ID: ${taskId}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId, status: 'deleted', timestamp: new Date() });\n      res.json({ message: 'Task deleted' });\n    } catch (err) {\n      logger.error(`Delete task error: ${err.message}`, { taskId: req.params.taskId, stack: err.stack });\n      res.status(500).json({ error: 'Failed to delete task', details: err.message });\n    }\n  });\n\n  router.get('/file-content', async (req, res) => {\n    logger.info('Entering /api/grok/file-content');\n    const { taskId } = req.query;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task) return res.status(404).json({ error: 'Task not found' });\n      logger.debug(`Fetched task content for ${taskId}`, { originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\n      io.emit('fileContentUpdate', { \n        taskId, \n        originalContent: task.originalContent, \n        newContent: task.newContent, \n        generatedFiles: task.generatedFiles, \n        timestamp: new Date() \n      });\n      res.json({ originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\n    } catch (err) {\n      logger.error(`File content fetch error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'File content fetch failed', details: err.message });\n    }\n  });\n\n  router.post('/approve', async (req, res) => {\n    logger.info('Entering /api/grok/approve');\n    const { taskId } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task || task.status !== 'completed') return res.status(400).json({ error: 'Invalid task' });\n      for (const file of task.generatedFiles) {\n        await fs.writeFile(file, await fs.readFile(file, 'utf8')); // Persist generated files\n      }\n      task.status = 'applied';\n      await task.save();\n      await Memory.create({ type: 'task_approved', data: { taskId, files: task.generatedFiles } });\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \n        `# Task Approved\\nTask ID: ${taskId}\\nFiles: ${task.generatedFiles.join(', ')}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId, status: 'applied', files: task.generatedFiles, timestamp: new Date() });\n      res.json({ message: 'Changes applied' });\n    } catch (err) {\n      logger.error(`Approval error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Approval failed', details: err.message });\n    }\n  });\n\n  router.post('/reject', async (req, res) => {\n    logger.info('Entering /api/grok/reject');\n    const { taskId, feedback } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task) return res.status(404).json({ error: 'Task not found' });\n      task.status = 'rejected';\n      task.feedback = feedback;\n      await task.save();\n      await Memory.create({ type: 'task_rejected', data: { taskId, feedback } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Task Rejected\\nTask ID: ${taskId}\\nFeedback: ${feedback || 'None'}\\nTimestamp: ${new Date().toISOString()}`);\n      let newTaskId = null;\n      if (feedback) {\n        const newTask = new Task({\n          taskId: uuidv4(),\n          prompt: `${task.prompt} - Revised with feedback: ${feedback}`,\n          file: task.file,\n          status: 'pending',\n          createdAt: new Date(),\n        });\n        await newTask.save();\n        await Memory.create({ type: 'task_created_from_rejection', data: { taskId: newTask.taskId, prompt: newTask.prompt } });\n        io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\n        processTask(newTask.taskId);\n        newTaskId = newTask.taskId;\n      }\n      io.emit('taskUpdate', { taskId, status: 'rejected', feedback, timestamp: new Date() });\n      res.json({ message: 'Task rejected', newTaskId });\n    } catch (err) {\n      logger.error(`Rejection error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Rejection failed', details: err.message });\n    }\n  });\n\n  router.post('/test', async (req, res) => {\n    logger.info('Entering /api/grok/test');\n    const { taskId, manual } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task || !task.generatedFiles.length) return res.status(400).json({ error: 'No files to test' });\n\n      if (manual) {\n        const mainFile = task.generatedFiles[0];\n        const fileName = path.basename(mainFile);\n        const testScript = `\n          const { chromium } = require('playwright');\n          (async () => {\n            const browser = await chromium.launch({ headless: false });\n            const context = await browser.newContext();\n            const page = await context.newPage();\n            await page.goto('http://localhost:3000/employee-log');\n            await page.fill('#email', 'admin@idurarapp.com');\n            await page.fill('#password', 'admin123');\n            await page.click('#login-button');\n            console.log('Browser open for manual review. Close when done.');\n          })();\n        `;\n        const testFile = path.join(__dirname, `manual-test-${taskId}-${fileName}.js`);\n        await fs.writeFile(testFile, testScript);\n        exec(`node ${testFile}`, (err, stdout, stderr) => {\n          if (err) logger.error(`Manual test error: ${err.message}`, { taskId });\n        });\n      } else {\n        await autoTestTask(taskId);\n      }\n\n      io.emit('testUpdate', { taskId, status: 'testing', manual, timestamp: new Date() });\n      res.json({ message: manual ? 'Manual Playwright test launched' : 'Auto Playwright test launched' });\n    } catch (err) {\n      logger.error(`Test endpoint error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Test failed', details: err.message });\n    }\n  });\n\n  router.post('/self-test', async (req, res) => {\n    logger.info('Entering /api/grok/self-test');\n    try {\n      const testTask = new Task({\n        taskId: uuidv4(),\n        prompt: 'Self-test Allur Space Console functionality',\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      await testTask.save();\n      await processTask(testTask.taskId);\n      await autoTestTask(testTask.taskId);\n      const memory = await Memory.findOne({ taskId: testTask.taskId });\n      io.emit('selfTestUpdate', { taskId: testTask.taskId, result: memory?.outcome || 'pending', timestamp: new Date() });\n      res.json({ message: 'Self-test initiated', taskId: testTask.taskId });\n    } catch (err) {\n      logger.error(`Self-test error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Self-test failed', details: err.message });\n    }\n  });\n\n  router.post('/self-enhance', async (req, res) => {\n    logger.info('Entering /api/grok/self-enhance');\n    try {\n      const recentFailures = await Memory.find({ outcome: 'failure' })\n        .sort({ timestamp: -1 })\n        .limit(5)\n        .lean();\n      \n      if (!recentFailures.length) {\n        io.emit('selfEnhanceUpdate', { message: 'No recent failures to enhance from', timestamp: new Date() });\n        return res.json({ message: 'No recent failures to enhance from' });\n      }\n\n      const enhancementTasks = [];\n      for (const failure of recentFailures) {\n        if (failure.lessons && failure.lessons.includes('not defined')) {\n          const missing = failure.lessons.match(/(\\w+) is not defined/)?.[1];\n          if (missing && !['taskId'].includes(missing)) {\n            const newTask = new Task({\n              taskId: uuidv4(),\n              prompt: `Add ${missing} dependency to fileGeneratorV18.js and retry task ${failure.taskId}`,\n              status: 'pending',\n              createdAt: new Date(),\n            });\n            await newTask.save();\n            await Memory.create({ type: 'self_enhance_task', data: { taskId: newTask.taskId, prompt: newTask.prompt, originalTaskId: failure.taskId } });\n            enhancementTasks.push(newTask.taskId);\n            io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\n            processTask(newTask.taskId);\n          }\n        }\n      }\n\n      const techPrompt = 'Analyze latest tech updates, suggest improvements for Allur Space Console';\n      const techTask = new Task({\n        taskId: uuidv4(),\n        prompt: techPrompt,\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      await techTask.save();\n      await Memory.create({ type: 'self_evolve', data: { taskId: techTask.taskId, prompt: techPrompt } });\n      enhancementTasks.push(techTask.taskId);\n      io.emit('taskUpdate', { taskId: techTask.taskId, prompt: techPrompt, status: 'pending', timestamp: new Date() });\n      processTask(techTask.taskId);\n\n      io.emit('selfEnhanceUpdate', { enhancements: enhancementTasks, timestamp: new Date() });\n      res.json({ message: 'Self-enhancement and evolution tasks queued', taskIds: enhancementTasks });\n    } catch (err) {\n      logger.error(`Self-enhancement error: ${err.message}`, { stack: err.stack });\n      io.emit('selfEnhanceUpdate', { error: err.message, timestamp: new Date() });\n      res.status(500).json({ error: 'Self-enhancement failed', details: err.message });\n    }\n  });\n\n  router.post('/update-priority', async (req, res) => {\n    logger.info('Entering /api/grok/update-priority');\n    const { taskId, priority } = req.body;\n    try {\n      const task = await Task.findOneAndUpdate({ taskId }, { priority }, { new: true });\n      await Memory.create({ type: 'priority_updated', data: { taskId, priority } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Priority Updated\\nTask ID: ${taskId}\\nNew Priority: ${priority}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId, priority, timestamp: new Date() });\n      res.json({ message: 'Priority updated', task });\n    } catch (err) {\n      logger.error(`Priority update error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Failed to update priority', details: err.message });\n    }\n  });\n\n  router.post('/maintenance', async (req, res) => {\n    logger.info('Entering /api/grok/maintenance');\n    const { taskId, action, report } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task) return res.status(404).json({ error: 'Task not found' });\n      if (action === 'approve') {\n        for (const proposal of report.proposals || []) {\n          if (proposal.type === 'merge_logs') {\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\n            await fs.writeFile('grok.log', merged.join('\\n'), 'utf8');\n            await Promise.all(proposal.files.filter(f => f !== 'grok.log').map(f => fs.unlink(f)));\n            await Memory.create({ type: 'logs_merged', data: { taskId, files: proposal.files } });\n          } else if (proposal.type === 'merge_memory') {\n            const archived = JSON.parse(await fs.readFile(proposal.files[0], 'utf8'));\n            await Memory.insertMany(archived);\n            await fs.unlink(proposal.files[0]);\n            await Memory.create({ type: 'memory_merged', data: { taskId, file: proposal.files[0] } });\n          } else if (proposal.type === 'merge_files') {\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\n            await fs.writeFile('fileGeneratorV18.js', merged.join('\\n'), 'utf8');\n            await Promise.all(proposal.files.map(f => fs.unlink(f)));\n            await Memory.create({ type: 'files_merged', data: { taskId, files: proposal.files } });\n          }\n        }\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'approved' };\n        await task.save();\n        io.emit('maintenanceUpdate', { taskId, status: 'approved', report, timestamp: new Date() });\n        res.json({ success: true, message: 'Maintenance approved' });\n      } else if (action === 'reject') {\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'rejected' };\n        await task.save();\n        await Memory.create({ type: 'maintenance_rejected', data: { taskId, report } });\n        io.emit('maintenanceUpdate', { taskId, status: 'rejected', report, timestamp: new Date() });\n        res.json({ success: true, message: 'Maintenance rejected' });\n      } else {\n        res.status(400).json({ error: 'Invalid action' });\n      }\n    } catch (err) {\n      logger.error(`Maintenance action failed: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Maintenance action failed', details: err.message });\n    }\n  });\n\n  router.get('/backend-proposals', async (req, res) => {\n    logger.info('Entering /api/grok/backend-proposals');\n    try {\n      const proposals = await BackendProposal.find().lean();\n      logger.info(`Fetched ${proposals.length} backend proposals`, { proposalIds: proposals.map(p => p._id) });\n      res.json(proposals);\n    } catch (err) {\n      logger.error(`Backend proposals fetch error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Failed to fetch backend proposals', details: err.message });\n    }\n  });\n\n  router.post('/approve-backend', async (req, res) => {\n    logger.info('Entering /api/grok/approve-backend');\n    const { proposalId } = req.body;\n    try {\n      logger.debug(`Received proposalId: ${proposalId}`, { type: typeof proposalId });\n\n      if (!proposalId || !mongoose.Types.ObjectId.isValid(proposalId)) {\n        logger.warn(`Invalid proposalId: ${proposalId}`);\n        return res.status(400).json({ error: 'Invalid proposalId format', received: proposalId });\n      }\n\n      const proposal = await BackendProposal.findById(proposalId);\n      if (!proposal) {\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\n        return res.status(400).json({ error: 'Proposal not found', proposalId });\n      }\n\n      if (proposal.status !== 'pending') {\n        logger.warn(`Proposal not in pending state`, { proposalId, status: proposal.status });\n        return res.status(400).json({ error: 'Proposal is not pending', currentStatus: proposal.status });\n      }\n\n      logger.info(`Applying backend proposal`, { proposalId, file: proposal.file, change: proposal.change });\n\n      // Adjust file path based on file type\n      let filePath;\n      if (proposal.file === 'grok.js') {\n        filePath = path.join(__dirname, proposal.file); // grok.js is in src/routes/\n      } else if (proposal.file === 'db.js') {\n        filePath = path.join(__dirname, '..', proposal.file); // db.js is in src/\n      } else {\n        filePath = path.join(__dirname, '..', proposal.file); // Default to src/ for other files\n      }\n\n      // Check if file exists\n      try {\n        await fs.access(filePath);\n      } catch (err) {\n        logger.error(`File not found: ${filePath}`, { proposalId, error: err.message });\n        return res.status(400).json({ error: 'Target file does not exist', file: proposal.file });\n      }\n\n      // Backup original file\n      const backupPath = `${filePath}.bak.${Date.now()}`;\n      let originalContent = await fs.readFile(filePath, 'utf8');\n      originalContent = originalContent.replace(/\\r\\n/g, '\\n').trim(); // Normalize line endings, remove trailing whitespace\n      await fs.writeFile(backupPath, originalContent, 'utf8');\n      logger.info(`Created backup of ${proposal.file} at ${backupPath}`, { proposalId });\n\n      let content = originalContent;\n      let newCode = '';\n\n      // Generate new code based on proposal type\n      if (proposal.change.includes('endpoint')) {\n        const endpointMatch = proposal.change.match(/POST \\/api\\/grok\\/(\\w+)/);\n        if (endpointMatch) {\n          const endpointName = endpointMatch[1];\n          newCode = `\nrouter.post('/${endpointName}', async (req, res) => {\n  try {\n    res.json({ message: '${endpointName} endpoint called' });\n  } catch (err) {\n    logger.error('${endpointName} error: \\${err.message}', { stack: err.stack });\n    res.status(500).json({ error: 'Failed', details: err.message });\n  }\n});\n          `;\n        }\n      } else if (proposal.change.includes('schema')) {\n        const schemaMatch = proposal.change.match(/Add (\\w+) field to (\\w+) schema/);\n        if (schemaMatch) {\n          const [_, field, schemaName] = schemaMatch;\n          newCode = `  ${field}: { type: String },`;\n          content = content.replace(\n            `${schemaName}Schema = new mongoose.Schema({`,\n            `${schemaName}Schema = new mongoose.Schema({\\n${newCode}`\n          );\n          newCode = ''; // Reset since schema changes are inline\n        }\n      } else if (proposal.change.includes('middleware')) {\n        newCode = `\nconst sanitizeInput = (req, res, next) => {\n  Object.keys(req.body).forEach(key => {\n    if (typeof req.body[key] === 'string') {\n      req.body[key] = req.body[key].replace(/[<>]/g, '');\n    }\n  });\n  next();\n};\nrouter.use(sanitizeInput);\n        `;\n      } else if (proposal.change.includes('rate limiting')) {\n        newCode = `\nconst rateLimit = require('express-rate-limit');\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\nrouter.use(limiter);\n        `;\n        await exec(`npm install express-rate-limit --save`, { cwd: path.join(__dirname, '../../..') });\n        logger.info('Installed express-rate-limit for rate limiting', { proposalId });\n      }\n\n      // Append new code with clean separation\n      if (newCode) {\n        newCode = newCode.replace(/\\r\\n/g, '\\n').trim(); // Normalize newCode line endings\n        content = `${originalContent}\\n// --- Allur Space Console Addition (Proposal ID: ${proposalId}) ---\\n${newCode}\\n// --- End Addition ---`;\n      }\n\n      // Pre-validation checks\n      logger.debug(`Pre-validation content length: ${content.length}`, { proposalId });\n      logger.debug(`Proposed content for ${proposal.file}`, { content });\n\n      // Validate syntax before applying\n      try {\n        esprima.parseScript(content);\n      } catch (syntaxErr) {\n        logger.error(`Syntax validation failed for ${proposal.file}`, { proposalId, error: syntaxErr.message, content });\n        await fs.unlink(backupPath);\n        return res.status(400).json({ error: 'Proposed change has invalid syntax', details: syntaxErr.message });\n      }\n\n      // Apply changes\n      try {\n        await fs.writeFile(filePath, content, 'utf8');\n      } catch (writeErr) {\n        logger.error(`Failed to write changes to ${proposal.file}`, { proposalId, error: writeErr.message });\n        await fs.writeFile(filePath, originalContent, 'utf8');\n        await fs.unlink(backupPath);\n        return res.status(500).json({ error: 'Failed to apply changes', details: writeErr.message });\n      }\n\n      // Validate server still runs (async test)\n      try {\n        await new Promise((resolve, reject) => {\n          exec('node app.js', { cwd: path.join(__dirname, '../../..'), timeout: 5000 }, (err) => {\n            if (err) reject(err);\n            else resolve();\n          });\n        });\n      } catch (serverErr) {\n        logger.error(`Server failed to start after applying ${proposal.file}`, { proposalId, error: serverErr.message });\n        await fs.writeFile(filePath, originalContent, 'utf8');\n        await fs.unlink(backupPath);\n        return res.status(500).json({ error: 'Applied changes broke the server', details: serverErr.message });\n      }\n\n      // Update proposal status\n      proposal.status = 'approved';\n      proposal.appliedAt = new Date();\n      await proposal.save();\n\n      await Memory.create({ type: 'backend_approved', data: { proposalId, file: proposal.file, change: proposal.change } });\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \n        `# Backend Proposal Approved\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nNew Code: ${newCode}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('backendProposalUpdate', { proposalId, status: 'approved' });\n      logger.info(`Backend proposal approved successfully`, { proposalId });\n      res.json({ message: 'Backend change applied', backup: backupPath });\n    } catch (err) {\n      logger.error(`Backend approval error: ${err.message}`, { proposalId, stack: err.stack });\n      res.status(500).json({ error: 'Approval failed', details: err.message });\n    }\n  });\n\n  router.post('/deny-backend', async (req, res) => {\n    logger.info('Entering /api/grok/deny-backend');\n    const { proposalId } = req.body;\n    try {\n      if (!mongoose.Types.ObjectId.isValid(proposalId)) {\n        logger.warn(`Invalid proposalId: ${proposalId}`);\n        return res.status(400).json({ error: 'Invalid proposalId format' });\n      }\n      const proposal = await BackendProposal.findById(proposalId);\n      if (!proposal) {\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\n        return res.status(404).json({ error: 'Proposal not found' });\n      }\n      proposal.status = 'denied';\n      await proposal.save();\n      await Memory.create({ type: 'backend_denied', data: { proposalId, file: proposal.file, change: proposal.change } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Backend Proposal Denied\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('backendProposalUpdate', { proposalId, status: 'denied' });\n      logger.info(`Backend proposal denied successfully`, { proposalId });\n      res.json({ message: 'Backend proposal denied' });\n    } catch (err) {\n      logger.error(`Backend denial error: ${err.message}`, { proposalId, stack: err.stack });\n      res.status(500).json({ error: 'Denial failed', details: err.message });\n    }\n  });\n\n  logger.info('Allur Space Console: Initialized with Socket.IO');\n  console.log('Allur Space Console: Initialized with Socket.IO');\n  return router;\n};","error":"Line 60: Unexpected token .","level":"error","message":"Syntax validation failed for grok.js","proposalId":"67f6fe529b8b87308d5c389d","timestamp":"2025-04-09T23:10:49.655Z"}
{"level":"error","message":"Manual test error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-6ad368ed-5582-4239-9d68-ed72a39e7a2d-EmployeeLog.jsx.js\nnode:internal/process/promises:289\r\n            triggerUncaughtException(err, true /* fromPromise */);\r\n            ^\r\n\r\npage.click: Target page, context or browser has been closed\r\nCall log:\r\n\u001b[2m  - waiting for locator('#login-button')\u001b[22m\r\n\r\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-6ad368ed-5582-4239-9d68-ed72a39e7a2d-EmployeeLog.jsx.js:10:24\r\n\r\nNode.js v20.9.0\r\n","taskId":"6ad368ed-5582-4239-9d68-ed72a39e7a2d","timestamp":"2025-04-09T23:26:32.940Z"}
{"level":"error","message":"Backend approval error: loggerfÃ¶ld is not defined","proposalId":"67f7021662c58d45ce726e61","stack":"ReferenceError: loggerfÃ¶ld is not defined\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:647:7","timestamp":"2025-04-09T23:26:44.865Z"}
{"level":"error","message":"Backend approval error: loggerfÃ¶ld is not defined","proposalId":"67f7021662c58d45ce726e62","stack":"ReferenceError: loggerfÃ¶ld is not defined\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:647:7","timestamp":"2025-04-09T23:26:49.131Z"}
{"error":"Command failed: node app.js\n(node:35112) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:35112) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\nnode:events:492\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nError: listen EADDRINUSE: address already in use :::8888\r\n    at Server.setupListenHandle [as _listen2] (node:net:1872:16)\r\n    at listenInCluster (node:net:1920:12)\r\n    at Server.listen (node:net:2008:7)\r\n    at startServer (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:95:12)\r\n    at Object.<anonymous> (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:106:1)\r\n    at Module._compile (node:internal/modules/cjs/loader:1241:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1295:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1091:32)\r\n    at Module._load (node:internal/modules/cjs/loader:938:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\r\nEmitted 'error' event on Server instance at:\r\n    at emitErrorNT (node:net:1899:8)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\n  code: 'EADDRINUSE',\r\n  errno: -4091,\r\n  syscall: 'listen',\r\n  address: '::',\r\n  port: 8888\r\n}\r\n\r\nNode.js v20.9.0\r\n","level":"error","message":"Exec error during server validation","proposalId":"67f70280cc14aee0c6150158","stderr":"(node:35112) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:35112) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\nnode:events:492\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nError: listen EADDRINUSE: address already in use :::8888\r\n    at Server.setupListenHandle [as _listen2] (node:net:1872:16)\r\n    at listenInCluster (node:net:1920:12)\r\n    at Server.listen (node:net:2008:7)\r\n    at startServer (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:95:12)\r\n    at Object.<anonymous> (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:106:1)\r\n    at Module._compile (node:internal/modules/cjs/loader:1241:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1295:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1091:32)\r\n    at Module._load (node:internal/modules/cjs/loader:938:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\r\nEmitted 'error' event on Server instance at:\r\n    at emitErrorNT (node:net:1899:8)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\n  code: 'EADDRINUSE',\r\n  errno: -4091,\r\n  syscall: 'listen',\r\n  address: '::',\r\n  port: 8888\r\n}\r\n\r\nNode.js v20.9.0\r\n","timestamp":"2025-04-09T23:28:34.907Z"}
{"error":"Command failed: node app.js\n(node:35112) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:35112) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\nnode:events:492\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nError: listen EADDRINUSE: address already in use :::8888\r\n    at Server.setupListenHandle [as _listen2] (node:net:1872:16)\r\n    at listenInCluster (node:net:1920:12)\r\n    at Server.listen (node:net:2008:7)\r\n    at startServer (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:95:12)\r\n    at Object.<anonymous> (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:106:1)\r\n    at Module._compile (node:internal/modules/cjs/loader:1241:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1295:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1091:32)\r\n    at Module._load (node:internal/modules/cjs/loader:938:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\r\nEmitted 'error' event on Server instance at:\r\n    at emitErrorNT (node:net:1899:8)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\n  code: 'EADDRINUSE',\r\n  errno: -4091,\r\n  syscall: 'listen',\r\n  address: '::',\r\n  port: 8888\r\n}\r\n\r\nNode.js v20.9.0\r\n","level":"error","message":"Server failed to start after applying db.js","proposalId":"67f70280cc14aee0c6150158","stack":"Error: Command failed: node app.js\n(node:35112) [MONGODB DRIVER] Warning: useNewUrlParser is a deprecated option: useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:35112) [MONGODB DRIVER] Warning: useUnifiedTopology is a deprecated option: useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version\nnode:events:492\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nError: listen EADDRINUSE: address already in use :::8888\r\n    at Server.setupListenHandle [as _listen2] (node:net:1872:16)\r\n    at listenInCluster (node:net:1920:12)\r\n    at Server.listen (node:net:2008:7)\r\n    at startServer (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:95:12)\r\n    at Object.<anonymous> (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\app.js:106:1)\r\n    at Module._compile (node:internal/modules/cjs/loader:1241:14)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1295:10)\r\n    at Module.load (node:internal/modules/cjs/loader:1091:32)\r\n    at Module._load (node:internal/modules/cjs/loader:938:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:83:12)\r\nEmitted 'error' event on Server instance at:\r\n    at emitErrorNT (node:net:1899:8)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\n  code: 'EADDRINUSE',\r\n  errno: -4091,\r\n  syscall: 'listen',\r\n  address: '::',\r\n  port: 8888\r\n}\r\n\r\nNode.js v20.9.0\r\n\n    at ChildProcess.exithandler (node:child_process:422:12)\n    at ChildProcess.emit (node:events:514:28)\n    at maybeClose (node:internal/child_process:1105:16)\n    at ChildProcess._handle.onexit (node:internal/child_process:305:5)\n    at Process.callbackTrampoline (node:internal/async_hooks:130:17)","timestamp":"2025-04-09T23:28:34.908Z"}
{"content":"/*\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js\n * Purpose: Allur Space Console router for task management, self-evolution, system enhancement, and backend proposal handling.\n * Change Log:\n *   - 04/09/2025: Fixed manual Playwright and auth (Chat Line 9700-ish).\n *   - 04/09/2025: Fixed 400 error on approve-backend (Chat Line 9800-ish).\n *   - 04/09/2025: Enhanced /file-content to log and return content (Chat Line 10400-ish).\n *   - 04/09/2025: Sprint 1 - Enhanced /approve-backend for safe application (New Chat, Sprint 1).\n *   - 04/09/2025: Fixed 500 errors on /approve-backend (New Chat, Post-Sprint 1).\n *   - 04/09/2025: Fixed 400 error due to incorrect file path (New Chat, Post-Sprint 1 Fix 2).\n *   - 04/09/2025: Fixed 400 error due to syntax failure (New Chat, Post-Sprint 1 Fix 3).\n *   - 04/09/2025: Hardened code injection for syntax reliability (New Chat, Post-Sprint 1 Fix 4).\n *   - 04/09/2025: Fixed persistent syntax error with isolated append (New Chat, Post-Sprint 1 Fix 5).\n *   - 04/09/2025: Fixed syntax error with clean append and validation (New Chat, Post-Sprint 1 Fix 6).\n *   - 04/09/2025: Fixed mixed ENOENT and syntax errors (New Chat, Post-Sprint 1 Fix 7).\n *   - 04/09/2025: Fixed startup SyntaxError in /logs endpoint (New Chat, Post-Sprint 1 Fix 8).\n *   - 04/09/2025: Fixed 500/400 errors with enhanced logging (New Chat, Post-Sprint 1 Fix 9).\n *   - 04/09/2025: Fixed 500 exec path and 400 syntax with deeper logging (New Chat, Post-Sprint 1 Fix 10).\n *     - Why: 500 (exec path error) and 400 (syntax at line 60) on /approve-backend (User logs, 23:21 UTC, 04/09/2025).\n *     - How: Fixed exec cwd to absolute backend path, added line-specific logging around syntax error.\n *     - Test: Approve IDs 67f6fe529b8b87308d5c389c (db.js) and 67f6fe529b8b87308d5c389d (grok.js).\n * Self-Notes:\n *   - Nate: Verify exec runs from correct dir (backend/).\n *   - Nate: Check grok.log for line 60 context if 400 persists.\n *   - Nate: Sync frontend to AllurSpaceConsole.jsx post-fix.\n */\n\nconst express = require('express');\nconst path = require('path');\nconst mongoose = require('mongoose');\nconst esprima = require('esprima');\nconst { exec } = require('child_process');\nrequire('../db');\nconst Task = mongoose.model('Task');\nconst Memory = mongoose.model('Memory');\nconst BackendProposal = mongoose.model('BackendProposal');\nconst { v4: uuidv4 } = require('uuid');\nconst { appendLog } = require('../utils/fileUtils');\nconst { processTask } = require('../utils/taskProcessorV18');\nconst { autoTestTask } = require('../utils/taskTesterV18');\nconst { xai } = require('@ai-sdk/xai');\nconst multer = require('multer');\nconst fs = require('fs').promises;\nconst winston = require('winston');\nconst upload = multer({ dest: 'uploads/' });\nconst client = xai({ apiKey: process.env.XAI_API_KEY });\nconst jwt = require('jsonwebtoken');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\n  transports: [\n    new winston.transports.File({ filename: path.join(__dirname, '../../../grok.log'), maxsize: 1024 * 1024 * 10 }),\n    new winston.transports.Console()\n  ]\n});\n\nmodule.exports = (io) => {\n  const router = express.Router();\n\n  const verifyToken = (req, res, next) => {\n    const token = req.headers['authorization']?.split(' ')[1];\n    if (!token) return res.status(401).json({ error: 'No token provided' });\n    jwt.verify(token, process.env.JWT_SECRET || 'chelsiemygirl2025420isawsome', (err, decoded) => {\n      if (err) {\n        logger.error(`JWT verification failed: ${err.message}`, { token });\n        return res.status(403).json({ error: 'Invalid token', details: err.message });\n      }\n      req.user = decoded;\n      logger.info(`Token verified for user: ${decoded.email}`, { userId: decoded._id });\n      next();\n    });\n  };\n\n  router.use(verifyToken);\n\n  async function readLogs(logFile) {\n    try {\n      const content = await fs.readFile(logFile, 'utf8');\n      return content.split('\\n').filter(line => line.trim()).map(line => {\n        try {\n          return JSON.parse(line);\n        } catch {\n          return { message: line, timestamp: new Date().toISOString() };\n        }\n      });\n    } catch (err) {\n      if (err.code === 'ENOENT') return [];\n      logger.error(`Failed to read log ${logFile}: ${err.message}`, { stack: err.stack });\n      return [];\n    }\n  }\n\n  router.get('/logs', async (req, res) => {\n    logger.info('Entering /api/grok/logs');\n    try {\n      const logs = {\n        error: await readLogs(path.join(__dirname, '../../../ERROR_LOG.md')),\n        debug: await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md')),\n        feature: await readLogs(path.join(__dirname, '../../../FEATURE_LOG.md')),\n        connectivity: await readLogs(path.join(__dirname, '../../../CONNECTIVITY_LOG.md')),\n        grok: await readLogs(path.join(__dirname, '../../../grok.log'))\n      };\n      await Memory.create({ type: 'logs_access', data: { path: '/logs', timestamp: new Date() } });\n      io.emit('logUpdate', { event: 'logs_accessed', logs: Object.keys(logs), timestamp: new Date() });\n      res.json(logs);\n    } catch (err) {\n      logger.error(`Logs fetch error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Failed to fetch logs', details: err.message });\n    }\n  });\n\n  router.get('/tasks', async (req, res) => {\n    logger.info('Entering /api/grok/tasks');\n    try {\n      const errorLogs = await readLogs(path.join(__dirname, '../../../ERROR_LOG.md'));\n      const recentErrors = errorLogs.filter(log => \n        log.message.includes('Tasks fetch error') && \n        new Date() - new Date(log.timestamp) < 24 * 60 * 60 * 1000\n      );\n      if (recentErrors.length > 3) {\n        logger.warn('Recent task fetch errors detected', { count: recentErrors.length });\n        await appendLog(path.join(__dirname, '../../../CONNECTIVITY_LOG.md'), \n          `# Task Fetch Issues\\nTimestamp: ${new Date().toISOString()}\\nErrors: ${recentErrors.length} in last 24h`);\n        res.set('X-Task-Warning', 'High error rate detected');\n      }\n      const tasks = await Task.find().lean();\n      await Memory.create({ type: 'tasks_fetch', data: { count: tasks.length, timestamp: new Date() } });\n      const taskData = tasks.map(t => ({\n        taskId: t.taskId,\n        prompt: t.prompt,\n        status: t.status,\n        cadence: t.cadence,\n        priority: t.priority,\n        generatedFiles: t.generatedFiles,\n      }));\n      io.emit('taskUpdate', { event: 'tasks_fetched', tasks: taskData, timestamp: new Date() });\n      res.json(taskData);\n    } catch (err) {\n      logger.error(`Tasks fetch error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Tasks fetch failed', details: err.message });\n    }\n  });\n\n  router.get('/files', async (req, res) => {\n    logger.info('Entering /api/grok/files');\n    const dir = path.join(__dirname, '../../../frontend/src/pages');\n    try {\n      const debugLogs = await readLogs(path.join(__dirname, '../../../DEBUG_LOG.md'));\n      const recentFileOps = debugLogs.filter(log => \n        log.message.includes('Task queued') && \n        new Date() - new Date(log.timestamp) < 7 * 24 * 60 * 60 * 1000\n      );\n      if (recentFileOps.length > 10) {\n        logger.info(`High file activity: ${recentFileOps.length} tasks in last 7 days`);\n        res.set('X-File-Activity', `High: ${recentFileOps.length} tasks`);\n      }\n      await fs.access(dir);\n      const files = await fs.readdir(dir);\n      const filteredFiles = files\n        .filter(file => /\\.(jsx|js|css)$/.test(file))\n        .map(file => ({ path: `${dir}/${file}`, name: file }));\n      await Memory.create({ type: 'files_fetch', data: { count: filteredFiles.length, timestamp: new Date() } });\n      io.emit('fileUpdate', { event: 'files_fetched', files: filteredFiles, timestamp: new Date() });\n      res.json(filteredFiles);\n    } catch (err) {\n      logger.error(`File listing error: ${err.message}`, { dir, stack: err.stack });\n      res.status(500).json({ error: 'Failed to list files', details: err.message });\n    }\n  });\n\n  router.post('/analyze', async (req, res) => {\n    logger.info('Entering /api/grok/analyze');\n    try {\n      const { data } = req.body;\n      if (!data) return res.status(400).json({ error: 'No data provided' });\n      const response = await client.chat.completions.create({\n        model: 'grok-2-latest',\n        messages: [{ role: 'user', content: `Analyze this data: ${JSON.stringify(data)}` }],\n        maxTokens: 500,\n        stream: false,\n        temperature: 0\n      });\n      await Memory.create({ type: 'analyze', data: { input: data, result: response.choices[0].message.content } });\n      io.emit('analyzeUpdate', { data, result: response.choices[0].message.content, timestamp: new Date() });\n      res.json({ result: response.choices[0].message.content });\n    } catch (error) {\n      logger.error(`xAI API error: ${error.message}`, { stack: error.stack });\n      res.status(500).json({ error: 'Failed to process request', details: error.message });\n    }\n  });\n\n  router.post('/upload', upload.single('file'), async (req, res) => {\n    logger.info('Entering /api/grok/upload');\n    try {\n      const fileContent = await fs.readFile(req.file.path, 'utf8');\n      const response = await client.chat.completions.create({\n        model: 'grok-2-latest',\n        messages: [{ role: 'user', content: `Analyze this file content: ${fileContent}` }],\n        maxTokens: 500,\n        stream: false,\n        temperature: 0\n      });\n      await Memory.create({ type: 'upload', data: { filename: req.file.originalname, result: response.choices[0].message.content } });\n      await fs.unlink(req.file.path);\n      io.emit('uploadUpdate', { filename: req.file.originalname, result: response.choices[0].message.content, timestamp: new Date() });\n      res.json({ result: response.choices[0].message.content });\n    } catch (error) {\n      logger.error(`File upload error: ${error.message}`, { stack: error.stack });\n      res.status(500).json({ error: 'Failed to process file', details: error.message });\n    }\n  });\n\n  router.post('/edit', async (req, res) => {\n    logger.info('Entering /api/grok/edit');\n    const { prompt, file } = req.body;\n    if (!prompt) return res.status(400).json({ error: 'Prompt required' });\n    try {\n      const task = new Task({\n        taskId: uuidv4(),\n        prompt,\n        file: file || null,\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      await task.save();\n      await Memory.create({ type: 'task_created', data: { taskId: task.taskId, prompt } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# New Task Queued\\nTask ID: ${task.taskId}\\nPrompt: ${prompt}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId: task.taskId, prompt, status: 'pending', timestamp: new Date() });\n      processTask(task.taskId).then(() => autoTestTask(task.taskId));\n      res.json({ taskId: task.taskId, message: 'Task queued' });\n    } catch (err) {\n      logger.error(`Task creation error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Task creation failed', details: err.message });\n    }\n  });\n\n  router.post('/clear-tasks', async (req, res) => {\n    logger.info('Entering /api/grok/clear-tasks');\n    try {\n      await Task.deleteMany({});\n      await Memory.create({ type: 'tasks_cleared', data: { timestamp: new Date() } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Tasks Cleared\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { event: 'tasks_cleared', timestamp: new Date() });\n      res.json({ message: 'All tasks cleared' });\n    } catch (err) {\n      logger.error(`Clear tasks\n\n error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Failed to clear tasks', details: err.message });\n    }\n  });\n\n  router.delete('/tasks/:taskId', async (req, res) => {\n    logger.info('Entering /api/grok/tasks/:taskId DELETE');\n    try {\n      const { taskId } = req.params;\n      await Task.deleteOne({ taskId });\n      await Memory.create({ type: 'task_deleted', data: { taskId, timestamp: new Date() } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Task Deleted\\nTask ID: ${taskId}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId, status: 'deleted', timestamp: new Date() });\n      res.json({ message: 'Task deleted' });\n    } catch (err) {\n      logger.error(`Delete task error: ${err.message}`, { taskId: req.params.taskId, stack: err.stack });\n      res.status(500).json({ error: 'Failed to delete task', details: err.message });\n    }\n  });\n\n  router.get('/file-content', async (req, res) => {\n    logger.info('Entering /api/grok/file-content');\n    const { taskId } = req.query;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task) return res.status(404).json({ error: 'Task not found' });\n      logger.debug(`Fetched task content for ${taskId}`, { originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\n      io.emit('fileContentUpdate', { \n        taskId, \n        originalContent: task.originalContent, \n        newContent: task.newContent, \n        generatedFiles: task.generatedFiles, \n        timestamp: new Date() \n      });\n      res.json({ originalContent: task.originalContent, newContent: task.newContent, generatedFiles: task.generatedFiles });\n    } catch (err) {\n      logger.error(`File content fetch error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'File content fetch failed', details: err.message });\n    }\n  });\n\n  router.post('/approve', async (req, res) => {\n    logger.info('Entering /api/grok/approve');\n    const { taskId } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task || task.status !== 'completed') return res.status(400).json({ error: 'Invalid task' });\n      for (const file of task.generatedFiles) {\n        await fs.writeFile(file, await fs.readFile(file, 'utf8')); // Persist generated files\n      }\n      task.status = 'applied';\n      await task.save();\n      await Memory.create({ type: 'task_approved', data: { taskId, files: task.generatedFiles } });\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \n        `# Task Approved\\nTask ID: ${taskId}\\nFiles: ${task.generatedFiles.join(', ')}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId, status: 'applied', files: task.generatedFiles, timestamp: new Date() });\n      res.json({ message: 'Changes applied' });\n    } catch (err) {\n      logger.error(`Approval error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Approval failed', details: err.message });\n    }\n  });\n\n  router.post('/reject', async (req, res) => {\n    logger.info('Entering /api/grok/reject');\n    const { taskId, feedback } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task) return res.status(404).json({ error: 'Task not found' });\n      task.status = 'rejected';\n      task.feedback = feedback;\n      await task.save();\n      await Memory.create({ type: 'task_rejected', data: { taskId, feedback } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Task Rejected\\nTask ID: ${taskId}\\nFeedback: ${feedback || 'None'}\\nTimestamp: ${new Date().toISOString()}`);\n      let newTaskId = null;\n      if (feedback) {\n        const newTask = new Task({\n          taskId: uuidv4(),\n          prompt: `${task.prompt} - Revised with feedback: ${feedback}`,\n          file: task.file,\n          status: 'pending',\n          createdAt: new Date(),\n        });\n        await newTask.save();\n        await Memory.create({ type: 'task_created_from_rejection', data: { taskId: newTask.taskId, prompt: newTask.prompt } });\n        io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\n        processTask(newTask.taskId);\n        newTaskId = newTask.taskId;\n      }\n      io.emit('taskUpdate', { taskId, status: 'rejected', feedback, timestamp: new Date() });\n      res.json({ message: 'Task rejected', newTaskId });\n    } catch (err) {\n      logger.error(`Rejection error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Rejection failed', details: err.message });\n    }\n  });\n\n  router.post('/test', async (req, res) => {\n    logger.info('Entering /api/grok/test');\n    const { taskId, manual } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task || !task.generatedFiles.length) return res.status(400).json({ error: 'No files to test' });\n\n      if (manual) {\n        const mainFile = task.generatedFiles[0];\n        const fileName = path.basename(mainFile);\n        const testScript = `\n          const { chromium } = require('playwright');\n          (async () => {\n            const browser = await chromium.launch({ headless: false });\n            const context = await browser.newContext();\n            const page = await context.newPage();\n            await page.goto('http://localhost:3000/employee-log');\n            await page.fill('#email', 'admin@idurarapp.com');\n            await page.fill('#password', 'admin123');\n            await page.click('#login-button');\n            console.log('Browser open for manual review. Close when done.');\n          })();\n        `;\n        const testFile = path.join(__dirname, `manual-test-${taskId}-${fileName}.js`);\n        await fs.writeFile(testFile, testScript);\n        exec(`node ${testFile}`, (err, stdout, stderr) => {\n          if (err) logger.error(`Manual test error: ${err.message}`, { taskId });\n        });\n      } else {\n        await autoTestTask(taskId);\n      }\n\n      io.emit('testUpdate', { taskId, status: 'testing', manual, timestamp: new Date() });\n      res.json({ message: manual ? 'Manual Playwright test launched' : 'Auto Playwright test launched' });\n    } catch (err) {\n      logger.error(`Test endpoint error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Test failed', details: err.message });\n    }\n  });\n\n  router.post('/self-test', async (req, res) => {\n    logger.info('Entering /api/grok/self-test');\n    try {\n      const testTask = new Task({\n        taskId: uuidv4(),\n        prompt: 'Self-test Allur Space Console functionality',\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      await testTask.save();\n      await processTask(testTask.taskId);\n      await autoTestTask(testTask.taskId);\n      const memory = await Memory.findOne({ taskId: testTask.taskId });\n      io.emit('selfTestUpdate', { taskId: testTask.taskId, result: memory?.outcome || 'pending', timestamp: new Date() });\n      res.json({ message: 'Self-test initiated', taskId: testTask.taskId });\n    } catch (err) {\n      logger.error(`Self-test error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Self-test failed', details: err.message });\n    }\n  });\n\n  router.post('/self-enhance', async (req, res) => {\n    logger.info('Entering /api/grok/self-enhance');\n    try {\n      const recentFailures = await Memory.find({ outcome: 'failure' })\n        .sort({ timestamp: -1 })\n        .limit(5)\n        .lean();\n      \n      if (!recentFailures.length) {\n        io.emit('selfEnhanceUpdate', { message: 'No recent failures to enhance from', timestamp: new Date() });\n        return res.json({ message: 'No recent failures to enhance from' });\n      }\n\n      const enhancementTasks = [];\n      for (const failure of recentFailures) {\n        if (failure.lessons && failure.lessons.includes('not defined')) {\n          const missing = failure.lessons.match(/(\\w+) is not defined/)?.[1];\n          if (missing && !['taskId'].includes(missing)) {\n            const newTask = new Task({\n              taskId: uuidv4(),\n              prompt: `Add ${missing} dependency to fileGeneratorV18.js and retry task ${failure.taskId}`,\n              status: 'pending',\n              createdAt: new Date(),\n            });\n            await newTask.save();\n            await Memory.create({ type: 'self_enhance_task', data: { taskId: newTask.taskId, prompt: newTask.prompt, originalTaskId: failure.taskId } });\n            enhancementTasks.push(newTask.taskId);\n            io.emit('taskUpdate', { taskId: newTask.taskId, prompt: newTask.prompt, status: 'pending', timestamp: new Date() });\n            processTask(newTask.taskId);\n          }\n        }\n      }\n\n      const techPrompt = 'Analyze latest tech updates, suggest improvements for Allur Space Console';\n      const techTask = new Task({\n        taskId: uuidv4(),\n        prompt: techPrompt,\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      await techTask.save();\n      await Memory.create({ type: 'self_evolve', data: { taskId: techTask.taskId, prompt: techPrompt } });\n      enhancementTasks.push(techTask.taskId);\n      io.emit('taskUpdate', { taskId: techTask.taskId, prompt: techPrompt, status: 'pending', timestamp: new Date() });\n      processTask(techTask.taskId);\n\n      io.emit('selfEnhanceUpdate', { enhancements: enhancementTasks, timestamp: new Date() });\n      res.json({ message: 'Self-enhancement and evolution tasks queued', taskIds: enhancementTasks });\n    } catch (err) {\n      logger.error(`Self-enhancement error: ${err.message}`, { stack: err.stack });\n      io.emit('selfEnhanceUpdate', { error: err.message, timestamp: new Date() });\n      res.status(500).json({ error: 'Self-enhancement failed', details: err.message });\n    }\n  });\n\n  router.post('/update-priority', async (req, res) => {\n    logger.info('Entering /api/grok/update-priority');\n    const { taskId, priority } = req.body;\n    try {\n      const task = await Task.findOneAndUpdate({ taskId }, { priority }, { new: true });\n      await Memory.create({ type: 'priority_updated', data: { taskId, priority } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Priority Updated\\nTask ID: ${taskId}\\nNew Priority: ${priority}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('taskUpdate', { taskId, priority, timestamp: new Date() });\n      res.json({ message: 'Priority updated', task });\n    } catch (err) {\n      logger.error(`Priority update error: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Failed to update priority', details: err.message });\n    }\n  });\n\n  router.post('/maintenance', async (req, res) => {\n    logger.info('Entering /api/grok/maintenance');\n    const { taskId, action, report } = req.body;\n    try {\n      const task = await Task.findOne({ taskId });\n      if (!task) return res.status(404).json({ error: 'Task not found' });\n      if (action === 'approve') {\n        for (const proposal of report.proposals || []) {\n          if (proposal.type === 'merge_logs') {\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\n            await fs.writeFile('grok.log', merged.join('\\n'), 'utf8');\n            await Promise.all(proposal.files.filter(f => f !== 'grok.log').map(f => fs.unlink(f)));\n            await Memory.create({ type: 'logs_merged', data: { taskId, files: proposal.files } });\n          } else if (proposal.type === 'merge_memory') {\n            const archived = JSON.parse(await fs.readFile(proposal.files[0], 'utf8'));\n            await Memory.insertMany(archived);\n            await fs.unlink(proposal.files[0]);\n            await Memory.create({ type: 'memory_merged', data: { taskId, file: proposal.files[0] } });\n          } else if (proposal.type === 'merge_files') {\n            const merged = await Promise.all(proposal.files.map(f => fs.readFile(f, 'utf8')));\n            await fs.writeFile('fileGeneratorV18.js', merged.join('\\n'), 'utf8');\n            await Promise.all(proposal.files.map(f => fs.unlink(f)));\n            await Memory.create({ type: 'files_merged', data: { taskId, files: proposal.files } });\n          }\n        }\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'approved' };\n        await task.save();\n        io.emit('maintenanceUpdate', { taskId, status: 'approved', report, timestamp: new Date() });\n        res.json({ success: true, message: 'Maintenance approved' });\n      } else if (action === 'reject') {\n        task.maintenanceReport = { ...task.maintenanceReport, status: 'rejected' };\n        await task.save();\n        await Memory.create({ type: 'maintenance_rejected', data: { taskId, report } });\n        io.emit('maintenanceUpdate', { taskId, status: 'rejected', report, timestamp: new Date() });\n        res.json({ success: true, message: 'Maintenance rejected' });\n      } else {\n        res.status(400).json({ error: 'Invalid action' });\n      }\n    } catch (err) {\n      logger.error(`Maintenance action failed: ${err.message}`, { taskId, stack: err.stack });\n      res.status(500).json({ error: 'Maintenance action failed', details: err.message });\n    }\n  });\n\n  router.get('/backend-proposals', async (req, res) => {\n    logger.info('Entering /api/grok/backend-proposals');\n    try {\n      const proposals = await BackendProposal.find().lean();\n      logger.info(`Fetched ${proposals.length} backend proposals`, { proposalIds: proposals.map(p => p._id) });\n      res.json(proposals);\n    } catch (err) {\n      logger.error(`Backend proposals fetch error: ${err.message}`, { stack: err.stack });\n      res.status(500).json({ error: 'Failed to fetch backend proposals', details: err.message });\n    }\n  });\n\n  router.post('/approve-backend', async (req, res) => {\n    logger.info('Entering /api/grok/approve-backend');\n    const { proposalId } = req.body;\n    try {\n      logger.debug(`Received proposalId: ${proposalId}`, { type: typeof proposalId });\n\n      if (!proposalId || !mongoose.Types.ObjectId.isValid(proposalId)) {\n        logger.warn(`Invalid proposalId: ${proposalId}`);\n        return res.status(400).json({ error: 'Invalid proposalId format', received: proposalId });\n      }\n\n      const proposal = await BackendProposal.findById(proposalId);\n      if (!proposal) {\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\n        return res.status(400).json({ error: 'Proposal not found', proposalId });\n      }\n\n      if (proposal.status !== 'pending') {\n        logger.warn(`Proposal not in pending state`, { proposalId, status: proposal.status });\n        return res.status(400).json({ error: 'Proposal is not pending', currentStatus: proposal.status });\n      }\n\n      logger.info(`Applying backend proposal`, { proposalId, file: proposal.file, change: proposal.change });\n\n      // Adjust file path based on file type\n      let filePath;\n      if (proposal.file === 'grok.js') {\n        filePath = path.join(__dirname, proposal.file); // grok.js is in src/routes/\n      } else if (proposal.file === 'db.js') {\n        filePath = path.join(__dirname, '..', proposal.file); // db.js is in src/\n      } else {\n        filePath = path.join(__dirname, '..', proposal.file); // Default to src/ for other files\n      }\n\n      // Check if file exists\n      try {\n        await fs.access(filePath);\n      } catch (err) {\n        logger.error(`File not found: ${filePath}`, { proposalId, error: err.message });\n        return res.status(400).json({ error: 'Target file does not exist', file: proposal.file });\n      }\n\n      // Backup original file\n      const backupPath = `${filePath}.bak.${Date.now()}`;\n      let originalContent = await fs.readFile(filePath, 'utf8');\n      originalContent = originalContent.replace(/\\r\\n/g, '\\n').trim(); // Normalize line endings, remove trailing whitespace\n      await fs.writeFile(backupPath, originalContent, 'utf8');\n      logger.info(`Created backup of ${proposal.file} at ${backupPath}`, { proposalId });\n\n      let content = originalContent;\n      let newCode = '';\n\n      // Generate new code based on proposal type\n      if (proposal.change.includes('endpoint')) {\n        const endpointMatch = proposal.change.match(/POST \\/api\\/grok\\/(\\w+)/);\n        if (endpointMatch) {\n          const endpointName = endpointMatch[1];\n          newCode = `\nrouter.post('/${endpointName}', async (req, res) => {\n  try {\n    res.json({ message: '${endpointName} endpoint called' });\n  } catch (err) {\n    logger.error('${endpointName} error: \\${err.message}', { stack: err.stack });\n    res.status(500).json({ error: 'Failed', details: err.message });\n  }\n});\n          `;\n        }\n      } else if (proposal.change.includes('schema')) {\n        const schemaMatch = proposal.change.match(/Add (\\w+) field to (\\w+) schema/);\n        if (schemaMatch) {\n          const [_, field, schemaName] = schemaMatch;\n          newCode = `  ${field}: { type: String },`;\n          content = content.replace(\n            `${schemaName}Schema = new mongoose.Schema({`,\n            `${schemaName}Schema = new mongoose.Schema({\\n${newCode}`\n          );\n          newCode = ''; // Reset since schema changes are inline\n        }\n      } else if (proposal.change.includes('middleware')) {\n        newCode = `\nconst sanitizeInput = (req, res, next) => {\n  Object.keys(req.body).forEach(key => {\n    if (typeof req.body[key] === 'string') {\n      req.body[key] = req.body[key].replace(/[<>]/g, '');\n    }\n  });\n  next();\n};\nrouter.use(sanitizeInput);\n        `;\n      } else if (proposal.change.includes('rate limiting')) {\n        newCode = `\nconst rateLimit = require('express-rate-limit');\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100 // limit each IP to 100 requests per windowMs\n});\nrouter.use(limiter);\n        `;\n        await exec(`npm install express-rate-limit --save`, { cwd: path.join(__dirname, '../../..') });\n        logger.info('Installed express-rate-limit for rate limiting', { proposalId });\n      }\n\n      // Append new code with clean separation\n      if (newCode) {\n        newCode = newCode.replace(/\\r\\n/g, '\\n').trim(); // Normalize newCode line endings\n        content = `${originalContent}\\n// --- Allur Space Console Addition (Proposal ID: ${proposalId}) ---\\n${newCode}\\n// --- End Addition ---`;\n      }\n\n      // Pre-validation checks\n      logger.debug(`Pre-validation content length: ${content.length}`, { proposalId });\n      const lines = content.split('\\n');\n      logger.debug(`Lines around 55-65 for ${proposal.file}`, { \n        lines: lines.slice(50, 70).map((line, i) => `${i + 51}: ${line}`) \n      });\n      logger.debug(`Proposed content for ${proposal.file}`, { content });\n\n      // Validate syntax before applying\n      try {\n        esprima.parseScript(content);\n      } catch (syntaxErr) {\n        logger.error(`Syntax validation failed for ${proposal.file}`, { proposalId, error: syntaxErr.message, content });\n        await fs.unlink(backupPath);\n        return res.status(400).json({ error: 'Proposed change has invalid syntax', details: syntaxErr.message });\n      }\n\n      // Apply changes with detailed error handling\n      try {\n        await fs.writeFile(filePath, content, 'utf8');\n        logger.info(`Successfully wrote changes to ${filePath}`, { proposalId });\n      } catch (writeErr) {\n        logger.error(`Failed to write changes to ${proposal.file}`, { proposalId, error: writeErr.message, stack: writeErr.stack });\n        await fs.writeFile(filePath, originalContent, 'utf8');\n        await fs.unlink(backupPath);\n        return res.status(500).json({ error: 'Failed to apply changes to file', details: writeErr.message });\n      }\n\n      // Validate server still runs with detailed error handling\n      try {\n        const backendRoot = 'C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\backend';\n        await new Promise((resolve, reject) => {\n          const child = exec('node app.js', { cwd: backendRoot, timeout: 5000 }, (err, stdout, stderr) => {\n            if (err) {\n              logger.error(`Exec error during server validation`, { proposalId, error: err.message, stderr });\n              reject(err);\n            } else {\n              logger.info(`Server validation exec succeeded`, { proposalId, stdout });\n              resolve();\n            }\n          });\n          child.on('error', (err) => {\n            logger.error(`Child process error during server validation`, { proposalId, error: err.message });\n            reject(err);\n          });\n        });\n      } catch (serverErr) {\n        logger.error(`Server failed to start after applying ${proposal.file}`, { proposalId, error: serverErr.message, stack: serverErr.stack });\n        await fs.writeFile(filePath, originalContent, 'utf8');\n        await fs.unlink(backupPath);\n        return res.status(500).json({ error: 'Applied changes broke the server', details: serverErr.message });\n      }\n\n      // Update proposal status\n      proposal.status = 'approved';\n      proposal.appliedAt = new Date();\n      await proposal.save();\n\n      await Memory.create({ type: 'backend_approved', data: { proposalId, file: proposal.file, change: proposal.change } });\n      await appendLog(path.join(__dirname, '../../../FEATURE_LOG.md'), \n        `# Backend Proposal Approved\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nNew Code: ${newCode}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('backendProposalUpdate', { proposalId, status: 'approved' });\n      logger.info(`Backend proposal approved successfully`, { proposalId });\n      res.json({ message: 'Backend change applied', backup: backupPath });\n    } catch (err) {\n      logger.error(`Backend approval error: ${err.message}`, { proposalId, stack: err.stack });\n      res.status(500).json({ error: 'Approval failed', details: err.message });\n    }\n  });\n\n  router.post('/deny-backend', async (req, res) => {\n    logger.info('Entering /api/grok/deny-backend');\n    const { proposalId } = req.body;\n    try {\n      if (!mongoose.Types.ObjectId.isValid(proposalId)) {\n        logger.warn(`Invalid proposalId: ${proposalId}`);\n        return res.status(400).json({ error: 'Invalid proposalId format' });\n      }\n      const proposal = await BackendProposal.findById(proposalId);\n      if (!proposal) {\n        logger.warn(`Proposal not found for ID: ${proposalId}`);\n        return res.status(404).json({ error: 'Proposal not found' });\n      }\n      proposal.status = 'denied';\n      await proposal.save();\n      await Memory.create({ type: 'backend_denied', data: { proposalId, file: proposal.file, change: proposal.change } });\n      await appendLog(path.join(__dirname, '../../../DEBUG_LOG.md'), \n        `# Backend Proposal Denied\\nProposal ID: ${proposalId}\\nFile: ${proposal.file}\\nChange: ${proposal.change}\\nTimestamp: ${new Date().toISOString()}`);\n      io.emit('backendProposalUpdate', { proposalId, status: 'denied' });\n      logger.info(`Backend proposal denied successfully`, { proposalId });\n      res.json({ message: 'Backend proposal denied' });\n    } catch (err) {\n      logger.error(`Backend denial error: ${err.message}`, { proposalId, stack: err.stack });\n      res.status(500).json({ error: 'Denial failed', details: err.message });\n    }\n  });\n\n  logger.info('Allur Space Console: Initialized with Socket.IO');\n  console.log('Allur Space Console: Initialized with Socket.IO');\n  return router;\n};","error":"Line 62: Unexpected token .","level":"error","message":"Syntax validation failed for grok.js","proposalId":"67f70280cc14aee0c6150159","timestamp":"2025-04-09T23:28:38.794Z"}
{"level":"error","message":"Test endpoint error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-9bf47395-7e30-4daa-9e54-cd46ad14b585-EmployeeLog-v564.jsx.js","stack":"Error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-9bf47395-7e30-4daa-9e54-cd46ad14b585-EmployeeLog-v564.jsx.js\n    at checkExecSyncError (node:child_process:890:11)\n    at execSync (node:child_process:962:15)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:374:9","taskId":"9bf47395-7e30-4daa-9e54-cd46ad14b585","timestamp":"2025-04-10T02:02:55.920Z"}
{"level":"error","message":"Test endpoint error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-9bf47395-7e30-4daa-9e54-cd46ad14b585-EmployeeLog-v564.jsx.js","stack":"Error: Command failed: node C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\manual-test-9bf47395-7e30-4daa-9e54-cd46ad14b585-EmployeeLog-v564.jsx.js\n    at checkExecSyncError (node:child_process:890:11)\n    at execSync (node:child_process:962:15)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:374:9","taskId":"9bf47395-7e30-4daa-9e54-cd46ad14b585","timestamp":"2025-04-10T02:03:16.959Z"}
{"level":"error","message":"Delete task error: task.stagedFiles is not iterable","stack":"TypeError: task.stagedFiles is not iterable\n    at deleteTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:839:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:683:7","taskId":"9bf47395-7e30-4daa-9e54-cd46ad14b585","timestamp":"2025-04-10T02:32:24.089Z"}
{"level":"error","message":"Delete task error: io is not defined","stack":"ReferenceError: io is not defined\n    at deleteTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:862:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:701:7","taskId":"4c9a69fc-21e5-40c1-beca-991139090436","timestamp":"2025-04-10T03:44:59.970Z"}
{"level":"error","message":"Backend approval error: task.stagedFiles is not iterable","proposalId":"67f741265854d5275265e84a","stack":"TypeError: task.stagedFiles is not iterable\n    at applyApprovedChanges (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:779:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:565:7","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:43.684Z"}
{"level":"error","message":"Backend approval error: task.stagedFiles is not iterable","proposalId":"67f741265854d5275265e84b","stack":"TypeError: task.stagedFiles is not iterable\n    at applyApprovedChanges (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:779:33)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:565:7","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:56.421Z"}
{"level":"error","message":"Backend approval error: backendPath is not defined","proposalId":"67f7430f3a81a0dfd871ae73","stack":"ReferenceError: backendPath is not defined\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:581:26","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0","timestamp":"2025-04-10T04:03:39.568Z"}
{"level":"error","message":"Task processing failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined","stack":"TypeError [ERR_INVALID_ARG_TYPE]: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n    at open (node:internal/fs/promises:586:10)\n    at Object.readFile (node:internal/fs/promises:1044:20)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:503:44)","taskId":"a6ad4551-a51c-4638-9b4b-48e075d85ca3","timestamp":"2025-04-10T15:27:09.311Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:524:30)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"a7597ace-466d-4df7-98a3-ee68271e82a0","timestamp":"2025-04-10T15:37:23.717Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:525:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"f51b0c3a-d718-462a-a52d-521fc7c548bc","timestamp":"2025-04-10T15:52:41.685Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:525:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"c3fe992a-e66b-4e35-9b04-bbb68d01a5d4","timestamp":"2025-04-10T16:53:47.686Z"}
{"level":"error","message":"Task processing failed: err is not defined","stack":"ReferenceError: err is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:346:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:460:71)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"0302483f-ee05-4904-a6d3-d6c6642e7ea4","timestamp":"2025-04-10T17:28:25.154Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:349:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:467:71)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T17:34:32.973Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:535:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"964fb8ef-ae5e-4ca9-86a9-7d4e7b2fe6c7","timestamp":"2025-04-10T17:34:32.987Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:527:38)","taskId":"8ef40425-43bd-4637-8abf-5e2c8df037c8","timestamp":"2025-04-10T17:55:33.751Z"}
{"level":"warn","message":"Failed to generate backend changes: err is not defined","stack":"ReferenceError: err is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:349:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:468:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T18:31:29.442Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:549:38)","taskId":"77ceb905-a035-43e0-8718-dcb6fdd61690","timestamp":"2025-04-10T18:31:31.013Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:350:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:468:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T18:40:02.825Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:551:38)","taskId":"63f44ef8-c718-4cdc-bbb2-298a7ad65989","timestamp":"2025-04-10T18:40:04.494Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:350:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:473:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T19:04:27.423Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:557:38)","taskId":"0491400f-4687-411d-acea-da1482c82598","timestamp":"2025-04-10T19:04:29.232Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:350:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:468:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T19:16:15.840Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:552:38)","taskId":"78e991b1-cfca-4e1e-9a15-14fa9836b610","timestamp":"2025-04-10T19:16:17.369Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:347:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:465:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T19:24:35.104Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:550:38)","taskId":"690aab83-d61d-4965-b996-f046fd99dcfa","timestamp":"2025-04-10T19:24:37.038Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:347:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:470:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T19:39:26.482Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:555:38)","taskId":"6192d3f6-e700-449b-9c71-cadba683c3bd","timestamp":"2025-04-10T19:39:28.072Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:347:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:470:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T19:44:56.322Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:555:38)","taskId":"5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9","timestamp":"2025-04-10T19:44:58.095Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:343:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:461:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T19:53:35.427Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:546:38)","taskId":"6b106c0f-0a5a-4806-b799-8e83667429c1","timestamp":"2025-04-10T19:53:37.063Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:343:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:461:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T20:01:07.801Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:546:38)","taskId":"3be4f27b-9167-4173-b420-0cf015adc4a3","timestamp":"2025-04-10T20:01:09.489Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:343:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:461:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T20:01:33.771Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:546:38)","taskId":"1ec56244-85bc-479e-bf5d-2530122608fe","timestamp":"2025-04-10T20:01:35.399Z"}
{"level":"warn","message":"Failed to generate backend changes: error is not defined","stack":"ReferenceError: error is not defined\n    at parsePrompt (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:343:36)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:461:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-04-10T20:09:08.799Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:546:38)","taskId":"dddfbb2f-6833-408e-9db3-3bea0811bd10","timestamp":"2025-04-10T20:09:10.475Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:553:35)","taskId":"dc7eef8d-69b7-47de-85e3-f9da31d8f62e","timestamp":"2025-04-10T21:29:33.122Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:557:35)","taskId":"1e91aaaa-0678-4f6e-bd42-a9623d200500","timestamp":"2025-04-10T21:42:00.822Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:557:35)","taskId":"3e3467b9-fce2-4e3c-84cb-d615b1b28140","timestamp":"2025-04-10T21:42:19.598Z"}
{"level":"debug","message":"Staged Login.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T21:51:41.286Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.297Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T21:51:41.297Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.306Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T21:51:41.308Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.328Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T21:51:41.329Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.339Z"}
{"level":"debug","message":"Staged Settings.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:41.340Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v5.jsx\\n * Path: frontend/src/pages/Login-v5.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.237Z"}
{"level":"debug","message":"Staged Login.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:43.238Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v1.jsx\\n * Path: frontend/src/pages/Dashboard-v1.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.252Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:43.254Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.266Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:43.268Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v26.jsx\\n * Path: frontend/src/pages/EmployeeLog-v26.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.292Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:43.293Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.305Z"}
{"level":"debug","message":"Staged Settings.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:43.306Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v6.jsx\\n * Path: frontend/src/pages/Login-v6.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.090Z"}
{"level":"debug","message":"Staged Login.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:45.091Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v2.jsx\\n * Path: frontend/src/pages/Dashboard-v2.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.105Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:45.107Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.120Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:45.122Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v27.jsx\\n * Path: frontend/src/pages/EmployeeLog-v27.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.148Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:45.149Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.162Z"}
{"level":"debug","message":"Staged Settings.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:45.163Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v7.jsx\\n * Path: frontend/src/pages/Login-v7.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.947Z"}
{"level":"debug","message":"Staged Login.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:46.949Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v3.jsx\\n * Path: frontend/src/pages/Dashboard-v3.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.963Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:46.965Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.976Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:46.979Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v28.jsx\\n * Path: frontend/src/pages/EmployeeLog-v28.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:47.014Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:47.016Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:47.028Z"}
{"level":"debug","message":"Staged Settings.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:47.030Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v8.jsx\\n * Path: frontend/src/pages/Login-v8.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.868Z"}
{"level":"debug","message":"Staged Login.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:48.869Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v4.jsx\\n * Path: frontend/src/pages/Dashboard-v4.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.886Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:48.888Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.901Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:48.902Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v29.jsx\\n * Path: frontend/src/pages/EmployeeLog-v29.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.928Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v30.jsx\\n * Path: frontend/src/pages/EmployeeLog-v30.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:48.929Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v5.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v30.jsx\\n * Path: frontend/src/pages/EmployeeLog-v30.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.941Z"}
{"level":"debug","message":"Staged Settings.jsx for task 12169af9-a451-47df-9cc6-413cae0a9231, newContent = {\"Login\":\"/*\\n * File: Login-v9.jsx\\n * Path: frontend/src/pages/Login-v9.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v5.jsx\\n * Path: frontend/src/pages/Dashboard-v5.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v30.jsx\\n * Path: frontend/src/pages/EmployeeLog-v30.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 12169af9-a451-47df-9cc6-413cae0a9231\\n * Notes:\\n *   - Generated for task: 12169af9-a451-47df-9cc6-413cae0a9231 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (false) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    \\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T21:51:48.942Z"}
{"level":"debug","message":"Staged Login.jsx for task 6842986b-c59b-4cbf-b8f3-38f9ef825464, newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T22:07:37.942Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.958Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 6842986b-c59b-4cbf-b8f3-38f9ef825464, newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T22:07:37.959Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.971Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 6842986b-c59b-4cbf-b8f3-38f9ef825464, newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T22:07:37.972Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.997Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 6842986b-c59b-4cbf-b8f3-38f9ef825464, newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v31.jsx\\n * Path: frontend/src/pages/EmployeeLog-v31.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T22:07:37.998Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v6.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v31.jsx\\n * Path: frontend/src/pages/EmployeeLog-v31.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:38.011Z"}
{"level":"debug","message":"Staged Settings.jsx for task 6842986b-c59b-4cbf-b8f3-38f9ef825464, newContent = {\"Login\":\"/*\\n * File: Login-v10.jsx\\n * Path: frontend/src/pages/Login-v10.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v6.jsx\\n * Path: frontend/src/pages/Dashboard-v6.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v31.jsx\\n * Path: frontend/src/pages/EmployeeLog-v31.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\\n * Notes:\\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T22:07:38.012Z"}
{"level":"error","message":"Test error: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:389:39\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:08:08.709Z"}
{"level":"error","message":"Task approval error: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:08:17.263Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 6842986b-c59b-4cbf-b8f3-38f9ef825464","newContent":{"Dashboard":"/*\n * File: Dashboard-v6.jsx\n * Path: frontend/src/pages/Dashboard-v6.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-10: Generated by Grok for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\n * Notes:\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v31.jsx\n * Path: frontend/src/pages/EmployeeLog-v31.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\n * Notes:\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v10.jsx\n * Path: frontend/src/pages/Login-v10.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-10: Updated for task 6842986b-c59b-4cbf-b8f3-38f9ef825464\n * Notes:\n *   - Generated for task: 6842986b-c59b-4cbf-b8f3-38f9ef825464 with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"timestamp":"2025-04-10T22:08:21.145Z"}
{"level":"debug","message":"Staged Login.jsx for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6, newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T22:24:53.537Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.550Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6, newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T22:24:53.550Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.563Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6, newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T22:24:53.564Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.587Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6, newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v32.jsx\\n * Path: frontend/src/pages/EmployeeLog-v32.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T22:24:53.589Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v7.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v32.jsx\\n * Path: frontend/src/pages/EmployeeLog-v32.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.599Z"}
{"level":"debug","message":"Staged Settings.jsx for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6, newContent = {\"Login\":\"/*\\n * File: Login-v11.jsx\\n * Path: frontend/src/pages/Login-v11.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v7.jsx\\n * Path: frontend/src/pages/Dashboard-v7.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v32.jsx\\n * Path: frontend/src/pages/EmployeeLog-v32.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\\n * Notes:\\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \\\"Build CRM system and self-enhance\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T22:24:53.600Z"}
{"level":"info","message":"Fetched 90 backend proposals","proposalIds":["67f68b1cec04356dabde9b2d","67f68b1cec04356dabde9b2e","67f68b9dec04356dabde9b65","67f68b9dec04356dabde9b66","67f68c977d83c50c7304e109","67f68c977d83c50c7304e10a","67f69d2a1d908c8f48ee0bd4","67f69d2a1d908c8f48ee0bd5","67f69fa5cd9ba2fa5fdb8cf4","67f69fa5cd9ba2fa5fdb8cf5","67f6a1065a5b3572c48ef690","67f6a1065a5b3572c48ef691","67f6a2b9f2268c664fc66b95","67f6a2b9f2268c664fc66b96","67f6a4e0644eacfad824adc9","67f6a4e0644eacfad824adca","67f6a84583fe1ba963b29da4","67f6a84583fe1ba963b29da5","67f6ada178f7320cbbbe420c","67f6ada178f7320cbbbe420d","67f6b0400290b87726e95f29","67f6b0400290b87726e95f2a","67f6b3afff49390740d7ddb1","67f6b3afff49390740d7ddb2","67f6b8391b4d4344348b1045","67f6b8391b4d4344348b1046","67f6ba643f383fb02a48d96d","67f6ba643f383fb02a48d96e","67f6be27fba5ed2760fd85ad","67f6be27fba5ed2760fd85ae","67f6c018522423ced87dc76f","67f6c018522423ced87dc770","67f6c54d1755110506530065","67f6c54d1755110506530066","67f6c54d1755110506530067","67f6d55ad37ea0209260b96a","67f6d55ad37ea0209260b96c","67f6d55ad37ea0209260b96b","67f6ed87b45bbcfd4f5b7755","67f6ed87b45bbcfd4f5b7754","67f6ed87b45bbcfd4f5b7756","67f6ed87b45bbcfd4f5b7753","67f6f080853fe4e6b18b6845","67f6f080853fe4e6b18b6847","67f6f080853fe4e6b18b6846","67f6f080853fe4e6b18b6848","67f6f2f3fc128bcc67f9dfda","67f6f2f3fc128bcc67f9dfdb","67f6f2f3fc128bcc67f9dfdc","67f6f2f3fc128bcc67f9dfdd","67f6f4cffff74e99a056d368","67f6f4cffff74e99a056d369","67f6f4cffff74e99a056d36a","67f6f4cffff74e99a056d36b","67f6f77e9d2782e53eabe880","67f6f77e9d2782e53eabe87e","67f6f77e9d2782e53eabe87f","67f6f77e9d2782e53eabe881","67f6f8359d2782e53eabe89c","67f6f8359d2782e53eabe89d","67f6f8359d2782e53eabe89e","67f6f8359d2782e53eabe89f","67f6f9dc9a1085400502e726","67f6f9dc9a1085400502e728","67f6f9dc9a1085400502e729","67f6f9dc9a1085400502e727","67f6fb7ffb130ab63d120ca9","67f6fb7ffb130ab63d120ca8","67f6fb7ffb130ab63d120cab","67f6fb7ffb130ab63d120caa","67f6fe529b8b87308d5c389c","67f6fe529b8b87308d5c389b","67f6fe529b8b87308d5c389a","67f6fe529b8b87308d5c389d","67f7021662c58d45ce726e5f","67f7021662c58d45ce726e61","67f7021662c58d45ce726e60","67f7021662c58d45ce726e62","67f70280cc14aee0c6150157","67f70280cc14aee0c6150159","67f70280cc14aee0c6150156","67f70280cc14aee0c6150158","67f703f9a5cd5d627a895ea0","67f703f9a5cd5d627a895ea1","67f703f9a5cd5d627a895ea2","67f703f9a5cd5d627a895ea3","67f725e306862f406d7287e6","67f725e306862f406d7287e7","67f725e306862f406d7287e9","67f725e306862f406d7287e8"],"timestamp":"2025-04-10T02:04:54.601Z"}
{"change":"Add payroll field to EmployeeLog schema","file":"db.js","level":"info","message":"Applying backend proposal","proposalId":"67f725e306862f406d7287e8","timestamp":"2025-04-10T02:05:17.113Z"}
{"level":"info","message":"Created backup of db.js at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\db.js.bak.1744250717113","proposalId":"67f725e306862f406d7287e8","timestamp":"2025-04-10T02:05:17.116Z"}
{"level":"info","message":"Syntax validated successfully for db.js","proposalId":"67f725e306862f406d7287e8","timestamp":"2025-04-10T02:05:17.392Z"}
{"level":"info","message":"Successfully wrote changes to C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\db.js","proposalId":"67f725e306862f406d7287e8","timestamp":"2025-04-10T02:05:17.393Z"}
{"level":"info","message":"Backend proposal approved successfully","proposalId":"67f725e306862f406d7287e8","timestamp":"2025-04-10T02:05:17.399Z"}
{"change":"Add middleware for input sanitization on all endpoints","file":"grok.js","level":"info","message":"Applying backend proposal","proposalId":"67f725e306862f406d7287e9","timestamp":"2025-04-10T02:05:25.631Z"}
{"level":"info","message":"Created backup of grok.js at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js.bak.1744250725631","proposalId":"67f725e306862f406d7287e9","timestamp":"2025-04-10T02:05:25.633Z"}
{"level":"info","message":"Syntax validated successfully for grok.js","proposalId":"67f725e306862f406d7287e9","timestamp":"2025-04-10T02:05:25.931Z"}
{"level":"info","message":"Successfully wrote changes to C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js","proposalId":"67f725e306862f406d7287e9","timestamp":"2025-04-10T02:05:25.933Z"}
{"level":"info","message":"Backend proposal approved successfully","proposalId":"67f725e306862f406d7287e9","timestamp":"2025-04-10T02:05:25.939Z"}
{"change":"Add payroll field to EmployeeLog schema","file":"db.js","level":"info","message":"Applying backend proposal","proposalId":"67f725e306862f406d7287e7","timestamp":"2025-04-10T02:05:31.513Z"}
{"level":"info","message":"Created backup of db.js at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\db.js.bak.1744250731514","proposalId":"67f725e306862f406d7287e7","timestamp":"2025-04-10T02:05:31.515Z"}
{"level":"info","message":"Syntax validated successfully for db.js","proposalId":"67f725e306862f406d7287e7","timestamp":"2025-04-10T02:05:31.790Z"}
{"level":"info","message":"Successfully wrote changes to C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\db.js","proposalId":"67f725e306862f406d7287e7","timestamp":"2025-04-10T02:05:31.791Z"}
{"level":"info","message":"Backend proposal approved successfully","proposalId":"67f725e306862f406d7287e7","timestamp":"2025-04-10T02:05:31.795Z"}
{"level":"info","message":"Task started: 211ca55c-90fc-4feb-8894-04fb95c0c8dc, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T02:31:33.970Z"}
{"level":"info","message":"System analysis completed: files=585, logs=65, memory=20, security=40, uxIssues=580, flowIssues=24","timestamp":"2025-04-10T02:31:38.581Z"}
{"level":"info","message":"Memory tweak: Enabled AI for EmployeeLog due to past failures","pastFailures":0,"timestamp":"2025-04-10T02:31:38.583Z"}
{"level":"info","message":"Generated 4 backend proposals for task 211ca55c-90fc-4feb-8894-04fb95c0c8dc","proposals":[{"_id":"67f72d8a4096252e10a52cb3","change":"Add POST /api/grok/payroll endpoint","file":"grok.js","reason":"Support payroll data submission from EmployeeLog","status":"pending","taskId":"211ca55c-90fc-4feb-8894-04fb95c0c8dc"},{"_id":"67f72d8a4096252e10a52cb4","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking","status":"pending","taskId":"211ca55c-90fc-4feb-8894-04fb95c0c8dc"},{"_id":"67f72d8a4096252e10a52cb5","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking (UX improvement)","status":"pending","taskId":"211ca55c-90fc-4feb-8894-04fb95c0c8dc"},{"_id":"67f72d8a4096252e10a52cb6","change":"Add middleware for input sanitization on all endpoints","file":"grok.js","reason":"Improve security due to low security score detected in system analysis","status":"pending","taskId":"211ca55c-90fc-4feb-8894-04fb95c0c8dc"}],"timestamp":"2025-04-10T02:31:38.588Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v589.jsx","taskId":"211ca55c-90fc-4feb-8894-04fb95c0c8dc","timestamp":"2025-04-10T02:31:38.590Z"}
{"level":"info","message":"Generated Playwright test: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\tests\\employeelog-v589.spec.js","timestamp":"2025-04-10T02:31:39.556Z"}
{"level":"info","message":"Playwright test passed for EmployeeLog-v589: IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","timestamp":"2025-04-10T02:31:39.643Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true},\"/employeelog-v589\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-10T02:31:39.707Z"}
{"level":"error","message":"Task processing error: testUserJourney is not a function","taskId":"211ca55c-90fc-4feb-8894-04fb95c0c8dc","timestamp":"2025-04-10T02:31:40.755Z"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-10T02:32:24.085Z"}
{"level":"info","message":"Fetched 94 backend proposals","proposalIds":["67f68b1cec04356dabde9b2d","67f68b1cec04356dabde9b2e","67f68b9dec04356dabde9b65","67f68b9dec04356dabde9b66","67f68c977d83c50c7304e109","67f68c977d83c50c7304e10a","67f69d2a1d908c8f48ee0bd4","67f69d2a1d908c8f48ee0bd5","67f69fa5cd9ba2fa5fdb8cf4","67f69fa5cd9ba2fa5fdb8cf5","67f6a1065a5b3572c48ef690","67f6a1065a5b3572c48ef691","67f6a2b9f2268c664fc66b95","67f6a2b9f2268c664fc66b96","67f6a4e0644eacfad824adc9","67f6a4e0644eacfad824adca","67f6a84583fe1ba963b29da4","67f6a84583fe1ba963b29da5","67f6ada178f7320cbbbe420c","67f6ada178f7320cbbbe420d","67f6b0400290b87726e95f29","67f6b0400290b87726e95f2a","67f6b3afff49390740d7ddb1","67f6b3afff49390740d7ddb2","67f6b8391b4d4344348b1045","67f6b8391b4d4344348b1046","67f6ba643f383fb02a48d96d","67f6ba643f383fb02a48d96e","67f6be27fba5ed2760fd85ad","67f6be27fba5ed2760fd85ae","67f6c018522423ced87dc76f","67f6c018522423ced87dc770","67f6c54d1755110506530065","67f6c54d1755110506530066","67f6c54d1755110506530067","67f6d55ad37ea0209260b96a","67f6d55ad37ea0209260b96c","67f6d55ad37ea0209260b96b","67f6ed87b45bbcfd4f5b7755","67f6ed87b45bbcfd4f5b7754","67f6ed87b45bbcfd4f5b7756","67f6ed87b45bbcfd4f5b7753","67f6f080853fe4e6b18b6845","67f6f080853fe4e6b18b6847","67f6f080853fe4e6b18b6846","67f6f080853fe4e6b18b6848","67f6f2f3fc128bcc67f9dfda","67f6f2f3fc128bcc67f9dfdb","67f6f2f3fc128bcc67f9dfdc","67f6f2f3fc128bcc67f9dfdd","67f6f4cffff74e99a056d368","67f6f4cffff74e99a056d369","67f6f4cffff74e99a056d36a","67f6f4cffff74e99a056d36b","67f6f77e9d2782e53eabe880","67f6f77e9d2782e53eabe87e","67f6f77e9d2782e53eabe87f","67f6f77e9d2782e53eabe881","67f6f8359d2782e53eabe89c","67f6f8359d2782e53eabe89d","67f6f8359d2782e53eabe89e","67f6f8359d2782e53eabe89f","67f6f9dc9a1085400502e726","67f6f9dc9a1085400502e728","67f6f9dc9a1085400502e729","67f6f9dc9a1085400502e727","67f6fb7ffb130ab63d120ca9","67f6fb7ffb130ab63d120ca8","67f6fb7ffb130ab63d120cab","67f6fb7ffb130ab63d120caa","67f6fe529b8b87308d5c389c","67f6fe529b8b87308d5c389b","67f6fe529b8b87308d5c389a","67f6fe529b8b87308d5c389d","67f7021662c58d45ce726e5f","67f7021662c58d45ce726e61","67f7021662c58d45ce726e60","67f7021662c58d45ce726e62","67f70280cc14aee0c6150157","67f70280cc14aee0c6150159","67f70280cc14aee0c6150156","67f70280cc14aee0c6150158","67f703f9a5cd5d627a895ea0","67f703f9a5cd5d627a895ea1","67f703f9a5cd5d627a895ea2","67f703f9a5cd5d627a895ea3","67f725e306862f406d7287e6","67f725e306862f406d7287e7","67f725e306862f406d7287e9","67f725e306862f406d7287e8","67f72d8a4096252e10a52cb3","67f72d8a4096252e10a52cb4","67f72d8a4096252e10a52cb5","67f72d8a4096252e10a52cb6"],"timestamp":"2025-04-10T02:55:57.008Z"}
{"level":"info","message":"Entering /api/grok/rollback","timestamp":"2025-04-10T03:02:31.462Z"}
{"level":"warn","message":"Task not pending approval: f3970745-4bf6-4124-943c-910bd1538726","timestamp":"2025-04-10T03:06:00.882Z"}
{"level":"warn","message":"Task not found for rollback: 8f9b311e-6615-424c-891b-83ab013c4e8e","timestamp":"2025-04-10T03:24:44.554Z"}
{"level":"warn","message":"Task not found for rollback: 83f718ca-ba95-4ceb-b1aa-5209ce6030b8","timestamp":"2025-04-10T03:25:17.848Z"}
{"level":"warn","message":"Task not found for rollback: 8f57c488-dbec-4788-84df-0d22c4f4ae1f","timestamp":"2025-04-10T03:25:18.062Z"}
{"level":"warn","message":"Task not found for rollback: 419a568d-2f1b-4778-9e45-d782810cba42","timestamp":"2025-04-10T03:25:18.263Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-10T03:43:06.402Z"}
{"level":"info","message":"Task started: 4c9a69fc-21e5-40c1-beca-991139090436, Prompt: please add more functionality to the employee log in and out pages.","timestamp":"2025-04-10T03:43:45.787Z"}
{"level":"info","message":"System analysis completed: files=587, logs=65, memory=20, security=40, uxIssues=582, flowIssues=24","timestamp":"2025-04-10T03:43:50.349Z"}
{"level":"info","message":"Generated 2 backend proposals for task 4c9a69fc-21e5-40c1-beca-991139090436","proposals":[{"_id":"67f73e761ac96fe89d015bbb","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking (UX improvement)","status":"pending","taskId":"4c9a69fc-21e5-40c1-beca-991139090436"},{"_id":"67f73e761ac96fe89d015bbc","change":"Add middleware for input sanitization on all endpoints","file":"grok.js","reason":"Improve security due to low security score detected in system analysis","status":"pending","taskId":"4c9a69fc-21e5-40c1-beca-991139090436"}],"timestamp":"2025-04-10T03:43:50.359Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog.jsx","taskId":"4c9a69fc-21e5-40c1-beca-991139090436","timestamp":"2025-04-10T03:43:50.363Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 4c9a69fc-21e5-40c1-beca-991139090436","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/employeelog":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T03:43:52.607Z"}
{"level":"info","message":"Task 4c9a69fc-21e5-40c1-beca-991139090436 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T03:43:52.609Z"}
{"level":"info","message":"Task 4c9a69fc-21e5-40c1-beca-991139090436 failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T03:43:54.891Z"}
{"level":"info","message":"Task 4c9a69fc-21e5-40c1-beca-991139090436 failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T03:43:57.059Z"}
{"level":"info","message":"Task 4c9a69fc-21e5-40c1-beca-991139090436 failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T03:43:59.402Z"}
{"level":"info","message":"Task 4c9a69fc-21e5-40c1-beca-991139090436 failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T03:44:01.639Z"}
{"level":"warn","message":"Task not pending approval: 4c9a69fc-21e5-40c1-beca-991139090436","status":"failed","timestamp":"2025-04-10T03:44:42.407Z"}
{"level":"info","message":"Proposal 67f73e761ac96fe89d015bbb marked as denied","taskId":"4c9a69fc-21e5-40c1-beca-991139090436","timestamp":"2025-04-10T03:44:48.731Z"}
{"level":"info","message":"Rollback completed for task 4c9a69fc-21e5-40c1-beca-991139090436 and proposal 67f73e761ac96fe89d015bbb","timestamp":"2025-04-10T03:44:48.735Z"}
{"level":"info","message":"Fetched 1 backend proposals","proposalIds":["67f73e761ac96fe89d015bbb"],"timestamp":"2025-04-10T03:44:48.759Z"}
{"level":"info","message":"Deleting task: 4c9a69fc-21e5-40c1-beca-991139090436","timestamp":"2025-04-10T03:44:59.965Z"}
{"level":"info","message":"Task started: 87523d4c-2d00-4783-8c79-f5033f99cc2e, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T03:53:04.428Z"}
{"level":"info","message":"System analysis completed: files=588, logs=65, memory=20, security=40, uxIssues=583, flowIssues=24","timestamp":"2025-04-10T03:53:06.032Z"}
{"level":"info","message":"Generated 4 backend proposals for task 87523d4c-2d00-4783-8c79-f5033f99cc2e","proposals":[{"_id":"67f740a25854d5275265e7b2","change":"Add POST /api/grok/payroll endpoint","file":"grok.js","reason":"Support payroll data submission from EmployeeLog","status":"pending","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e"},{"_id":"67f740a25854d5275265e7b3","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking","status":"pending","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e"},{"_id":"67f740a25854d5275265e7b4","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking (UX improvement)","status":"pending","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e"},{"_id":"67f740a25854d5275265e7b5","change":"Add middleware for input sanitization on all endpoints","file":"grok.js","reason":"Improve security due to low security score detected in system analysis","status":"pending","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e"}],"timestamp":"2025-04-10T03:53:06.040Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v042.jsx","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:06.043Z"}
{"level":"info","message":"Generated Playwright test: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\tests\\employeelog-v042.spec.js","timestamp":"2025-04-10T03:53:07.014Z"}
{"level":"info","message":"Playwright test passed for EmployeeLog-v042: IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","timestamp":"2025-04-10T03:53:07.117Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true},\"/employeelog-v042\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-10T03:53:07.180Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 87523d4c-2d00-4783-8c79-f5033f99cc2e","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/employeelog-v042":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T03:53:08.280Z"}
{"level":"info","message":"Task 87523d4c-2d00-4783-8c79-f5033f99cc2e failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T03:53:08.283Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v287.jsx","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:08.288Z"}
{"level":"info","message":"Task 87523d4c-2d00-4783-8c79-f5033f99cc2e failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T03:53:10.374Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v377.jsx","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:10.378Z"}
{"level":"info","message":"Task 87523d4c-2d00-4783-8c79-f5033f99cc2e failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T03:53:12.707Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v709.jsx","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:12.711Z"}
{"level":"info","message":"Task 87523d4c-2d00-4783-8c79-f5033f99cc2e failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T03:53:14.919Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v922.jsx","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:14.923Z"}
{"level":"info","message":"Task 87523d4c-2d00-4783-8c79-f5033f99cc2e failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T03:53:17.009Z"}
{"level":"info","message":"Proposal 67f740a25854d5275265e7b2 marked as denied","taskId":"87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:37.242Z"}
{"level":"info","message":"Deleted 3 pending proposals for task 87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:37.245Z"}
{"level":"info","message":"Rollback completed for task 87523d4c-2d00-4783-8c79-f5033f99cc2e and proposal 67f740a25854d5275265e7b2","timestamp":"2025-04-10T03:53:37.247Z"}
{"level":"info","message":"Fetched 1 backend proposals","proposalIds":["67f740a25854d5275265e7b2"],"timestamp":"2025-04-10T03:53:37.278Z"}
{"level":"info","message":"Deleting task: 87523d4c-2d00-4783-8c79-f5033f99cc2e","timestamp":"2025-04-10T03:53:59.691Z"}
{"level":"info","message":"Task 87523d4c-2d00-4783-8c79-f5033f99cc2e fully deleted","timestamp":"2025-04-10T03:53:59.697Z"}
{"level":"warn","message":"Missing taskId in delete-task request","timestamp":"2025-04-10T03:54:02.225Z"}
{"level":"info","message":"Task started: a5ffd534-ba8a-4157-978e-7c4caa712946, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T03:55:17.372Z"}
{"level":"info","message":"System analysis completed: files=594, logs=65, memory=20, security=40, uxIssues=589, flowIssues=24","timestamp":"2025-04-10T03:55:18.982Z"}
{"level":"info","message":"Generated 4 backend proposals for task a5ffd534-ba8a-4157-978e-7c4caa712946","proposals":[{"_id":"67f741265854d5275265e84a","change":"Add POST /api/grok/payroll endpoint","file":"grok.js","reason":"Support payroll data submission from EmployeeLog","status":"pending","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946"},{"_id":"67f741265854d5275265e84b","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking","status":"pending","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946"},{"_id":"67f741265854d5275265e84c","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking (UX improvement)","status":"pending","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946"},{"_id":"67f741265854d5275265e84d","change":"Add middleware for input sanitization on all endpoints","file":"grok.js","reason":"Improve security due to low security score detected in system analysis","status":"pending","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946"}],"timestamp":"2025-04-10T03:55:18.986Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v987.jsx","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:18.988Z"}
{"level":"info","message":"Generated Playwright test: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\tests\\employeelog-v987.spec.js","timestamp":"2025-04-10T03:55:19.916Z"}
{"level":"info","message":"Playwright test passed for EmployeeLog-v987: IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","timestamp":"2025-04-10T03:55:20.015Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true},\"/employeelog-v987\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-10T03:55:20.074Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task a5ffd534-ba8a-4157-978e-7c4caa712946","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/employeelog-v987":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T03:55:21.155Z"}
{"level":"info","message":"Task a5ffd534-ba8a-4157-978e-7c4caa712946 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T03:55:21.157Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v160.jsx","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:21.161Z"}
{"level":"info","message":"Task a5ffd534-ba8a-4157-978e-7c4caa712946 failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T03:55:23.253Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v255.jsx","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:23.256Z"}
{"level":"info","message":"Task a5ffd534-ba8a-4157-978e-7c4caa712946 failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T03:55:25.412Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v415.jsx","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:25.416Z"}
{"level":"info","message":"Task a5ffd534-ba8a-4157-978e-7c4caa712946 failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T03:55:27.528Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v531.jsx","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T03:55:27.532Z"}
{"level":"info","message":"Task a5ffd534-ba8a-4157-978e-7c4caa712946 failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T03:55:29.599Z"}
{"level":"info","message":"Fetched 4 backend proposals","proposalIds":["67f741265854d5275265e84a","67f741265854d5275265e84b","67f741265854d5275265e84d","67f741265854d5275265e84c"],"timestamp":"2025-04-10T04:02:54.342Z"}
{"level":"info","message":"Proposal 67f741265854d5275265e84a marked as denied","taskId":"a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T04:03:08.330Z"}
{"level":"info","message":"Deleted 3 pending proposals for task a5ffd534-ba8a-4157-978e-7c4caa712946","timestamp":"2025-04-10T04:03:08.332Z"}
{"level":"info","message":"Rollback completed for task a5ffd534-ba8a-4157-978e-7c4caa712946 and proposal 67f741265854d5275265e84a","timestamp":"2025-04-10T04:03:08.334Z"}
{"level":"info","message":"Fetched 1 backend proposals","proposalIds":["67f741265854d5275265e84a"],"timestamp":"2025-04-10T04:03:08.368Z"}
{"level":"info","message":"Task started: 69b8081b-44de-4109-8092-58bd1da60aa0, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T04:03:25.184Z"}
{"level":"info","message":"System analysis completed: files=600, logs=65, memory=20, security=40, uxIssues=595, flowIssues=24","timestamp":"2025-04-10T04:03:27.022Z"}
{"level":"info","message":"Generated 4 backend proposals for task 69b8081b-44de-4109-8092-58bd1da60aa0","proposals":[{"_id":"67f7430f3a81a0dfd871ae70","change":"Add POST /api/grok/payroll endpoint","file":"grok.js","reason":"Support payroll data submission from EmployeeLog","status":"pending","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0"},{"_id":"67f7430f3a81a0dfd871ae71","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking","status":"pending","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0"},{"_id":"67f7430f3a81a0dfd871ae72","change":"Add payroll field to EmployeeLog schema","file":"db.js","reason":"Enhance EmployeeLog with payroll tracking (UX improvement)","status":"pending","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0"},{"_id":"67f7430f3a81a0dfd871ae73","change":"Add middleware for input sanitization on all endpoints","file":"grok.js","reason":"Improve security due to low security score detected in system analysis","status":"pending","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0"}],"timestamp":"2025-04-10T04:03:27.029Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v031.jsx","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0","timestamp":"2025-04-10T04:03:27.033Z"}
{"level":"info","message":"Generated Playwright test: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\tests\\employeelog-v031.spec.js","timestamp":"2025-04-10T04:03:27.983Z"}
{"level":"info","message":"Playwright test passed for EmployeeLog-v031: IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","timestamp":"2025-04-10T04:03:28.089Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true},\"/employeelog-v031\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-10T04:03:28.144Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 69b8081b-44de-4109-8092-58bd1da60aa0","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/employeelog-v031":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T04:03:29.257Z"}
{"level":"info","message":"Task 69b8081b-44de-4109-8092-58bd1da60aa0 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T04:03:29.259Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v263.jsx","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0","timestamp":"2025-04-10T04:03:29.264Z"}
{"level":"info","message":"Task 69b8081b-44de-4109-8092-58bd1da60aa0 failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T04:03:31.589Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v593.jsx","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0","timestamp":"2025-04-10T04:03:31.595Z"}
{"level":"info","message":"Task 69b8081b-44de-4109-8092-58bd1da60aa0 failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T04:03:33.897Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v900.jsx","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0","timestamp":"2025-04-10T04:03:33.901Z"}
{"level":"info","message":"Task 69b8081b-44de-4109-8092-58bd1da60aa0 failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T04:03:36.024Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v027.jsx","taskId":"69b8081b-44de-4109-8092-58bd1da60aa0","timestamp":"2025-04-10T04:03:36.028Z"}
{"level":"info","message":"Task 69b8081b-44de-4109-8092-58bd1da60aa0 failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T04:03:38.221Z"}
{"level":"info","message":"Applied changes for task 69b8081b-44de-4109-8092-58bd1da60aa0 and proposal 67f7430f3a81a0dfd871ae73","timestamp":"2025-04-10T04:03:39.567Z"}
{"level":"info","message":"Fetched 5 backend proposals","proposalIds":["67f741265854d5275265e84a","67f7430f3a81a0dfd871ae70","67f7430f3a81a0dfd871ae71","67f7430f3a81a0dfd871ae73","67f7430f3a81a0dfd871ae72"],"timestamp":"2025-04-10T04:03:39.600Z"}
{"level":"warn","message":"Task not pending approval: 69b8081b-44de-4109-8092-58bd1da60aa0","status":"applied","timestamp":"2025-04-10T04:03:43.926Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-10T04:44:40.982Z"}
{"level":"info","message":"Task started: 5367f105-de38-4920-9bba-38a6a1990bce, Prompt: Build EmployeeLog with payroll\n","timestamp":"2025-04-10T04:45:45.201Z"}
{"level":"info","message":"System analysis completed: files=606, logs=65, memory=20, security=30, uxIssues=600, flowIssues=23","timestamp":"2025-04-10T04:45:49.784Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v786.jsx","taskId":"5367f105-de38-4920-9bba-38a6a1990bce","timestamp":"2025-04-10T04:45:49.787Z"}
{"level":"info","message":"Task started: 20267285-968d-4eb6-bf09-96c5a5accae7, Prompt: Build EmployeeLog with payroll and self-enhance","timestamp":"2025-04-10T04:55:54.230Z"}
{"level":"info","message":"System analysis completed: files=607, logs=65, memory=20, security=30, uxIssues=601, flowIssues=23","timestamp":"2025-04-10T04:55:58.660Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v662.jsx","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:55:58.663Z"}
{"level":"warn","message":"Cannot generate Playwright test: task not found or no staged files","taskId":"EmployeeLog","timestamp":"2025-04-10T04:55:59.480Z"}
{"level":"warn","message":"Cannot generate Playwright test: task not found or no staged files","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:55:59.535Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:55:59.535Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 20267285-968d-4eb6-bf09-96c5a5accae7","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T04:56:00.486Z"}
{"level":"info","message":"Task 20267285-968d-4eb6-bf09-96c5a5accae7 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T04:56:00.488Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v491.jsx","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:56:00.493Z"}
{"level":"info","message":"Task 20267285-968d-4eb6-bf09-96c5a5accae7 failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T04:56:02.220Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v223.jsx","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:56:02.224Z"}
{"level":"info","message":"Task 20267285-968d-4eb6-bf09-96c5a5accae7 failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T04:56:03.866Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v870.jsx","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:56:03.871Z"}
{"level":"info","message":"Task 20267285-968d-4eb6-bf09-96c5a5accae7 failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T04:56:05.495Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v498.jsx","taskId":"20267285-968d-4eb6-bf09-96c5a5accae7","timestamp":"2025-04-10T04:56:05.499Z"}
{"level":"info","message":"Task 20267285-968d-4eb6-bf09-96c5a5accae7 failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T04:56:07.118Z"}
{"level":"info","message":"Task started: 55238eb2-d7f8-496f-914c-cee90025d07a, Prompt: Build EmployeeLog with payroll and self-enhance","timestamp":"2025-04-10T15:03:40.780Z"}
{"level":"info","message":"System analysis completed: files=612, logs=65, memory=20, security=30, uxIssues=606, flowIssues=23","timestamp":"2025-04-10T15:03:45.679Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v681.jsx","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:45.683Z"}
{"level":"warn","message":"Cannot generate Playwright test: task not found","taskId":"EmployeeLog","timestamp":"2025-04-10T15:03:46.588Z"}
{"level":"warn","message":"No staged files for testing","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:46.654Z"}
{"level":"warn","message":"Skipping auto-test due to no valid test generated","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:46.654Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 55238eb2-d7f8-496f-914c-cee90025d07a","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T15:03:47.629Z"}
{"level":"info","message":"Task 55238eb2-d7f8-496f-914c-cee90025d07a failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T15:03:47.632Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v637.jsx","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:47.638Z"}
{"level":"info","message":"Task 55238eb2-d7f8-496f-914c-cee90025d07a failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T15:03:49.733Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v739.jsx","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:49.740Z"}
{"level":"info","message":"Task 55238eb2-d7f8-496f-914c-cee90025d07a failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T15:03:51.775Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v778.jsx","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:51.779Z"}
{"level":"info","message":"Task 55238eb2-d7f8-496f-914c-cee90025d07a failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T15:03:53.716Z"}
{"level":"info","message":"File staged: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\temp\\EmployeeLog-v720.jsx","taskId":"55238eb2-d7f8-496f-914c-cee90025d07a","timestamp":"2025-04-10T15:03:53.722Z"}
{"level":"info","message":"Task 55238eb2-d7f8-496f-914c-cee90025d07a failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T15:03:55.623Z"}
{"level":"info","message":"Task started: a6ad4551-a51c-4638-9b4b-48e075d85ca3, Prompt: Build EmployeeLog with payroll\n\n","timestamp":"2025-04-10T15:27:04.506Z"}
{"level":"info","message":"System analysis completed: files=617, logs=65, memory=20, security=30, uxIssues=611, flowIssues=23","timestamp":"2025-04-10T15:27:09.291Z"}
{"level":"info","message":"Task started: a7597ace-466d-4df7-98a3-ee68271e82a0, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T15:37:19.118Z"}
{"level":"info","message":"System analysis completed: files=618, logs=65, memory=20, security=30, uxIssues=612, flowIssues=23","timestamp":"2025-04-10T15:37:23.695Z"}
{"level":"info","message":"Task started: f51b0c3a-d718-462a-a52d-521fc7c548bc, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T15:52:37.333Z"}
{"level":"info","message":"System analysis completed: files=619, logs=65, memory=20, security=30, uxIssues=613, flowIssues=23","timestamp":"2025-04-10T15:52:41.665Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"f51b0c3a-d718-462a-a52d-521fc7c548bc","timestamp":"2025-04-10T15:52:41.685Z"}
{"level":"info","message":"Task started: c3fe992a-e66b-4e35-9b04-bbb68d01a5d4, Prompt: Build EmployeeLog with payroll\n\n","timestamp":"2025-04-10T16:53:43.090Z"}
{"level":"info","message":"System analysis completed: files=620, logs=65, memory=20, security=30, uxIssues=614, flowIssues=23","timestamp":"2025-04-10T16:53:47.671Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"c3fe992a-e66b-4e35-9b04-bbb68d01a5d4","timestamp":"2025-04-10T16:53:47.685Z"}
{"level":"info","message":"Task started: 0302483f-ee05-4904-a6d3-d6c6642e7ea4, Prompt: Build EmployeeLog with payroll\n\n","timestamp":"2025-04-10T17:28:20.907Z"}
{"level":"info","message":"System analysis completed: files=621, logs=65, memory=20, security=30, uxIssues=615, flowIssues=23","timestamp":"2025-04-10T17:28:25.152Z"}
{"level":"info","message":"Task started: 964fb8ef-ae5e-4ca9-86a9-7d4e7b2fe6c7, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T17:34:31.681Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"964fb8ef-ae5e-4ca9-86a9-7d4e7b2fe6c7","timestamp":"2025-04-10T17:34:32.987Z"}
{"level":"info","message":"Task started: 8ef40425-43bd-4637-8abf-5e2c8df037c8, Prompt: Build EmployeeLog with payroll\n\n","timestamp":"2025-04-10T17:55:28.113Z"}
{"level":"info","message":"System analysis completed: files=622, logs=65, memory=20, security=40, uxIssues=617, flowIssues=24","timestamp":"2025-04-10T17:55:32.208Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"8ef40425-43bd-4637-8abf-5e2c8df037c8","timestamp":"2025-04-10T17:55:32.226Z"}
{"level":"warn","message":"No staged files for testing","taskId":"8ef40425-43bd-4637-8abf-5e2c8df037c8","timestamp":"2025-04-10T17:55:32.998Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"8ef40425-43bd-4637-8abf-5e2c8df037c8","timestamp":"2025-04-10T17:55:32.999Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 8ef40425-43bd-4637-8abf-5e2c8df037c8","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T17:55:33.744Z"}
{"level":"info","message":"Task 8ef40425-43bd-4637-8abf-5e2c8df037c8 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T17:55:33.747Z"}
{"level":"info","message":"Task started: 77ceb905-a035-43e0-8718-dcb6fdd61690, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T18:31:25.330Z"}
{"level":"info","message":"System analysis completed: files=623, logs=65, memory=20, security=40, uxIssues=618, flowIssues=24","timestamp":"2025-04-10T18:31:29.441Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"77ceb905-a035-43e0-8718-dcb6fdd61690","timestamp":"2025-04-10T18:31:29.459Z"}
{"level":"warn","message":"No staged files for testing","taskId":"77ceb905-a035-43e0-8718-dcb6fdd61690","timestamp":"2025-04-10T18:31:30.233Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"77ceb905-a035-43e0-8718-dcb6fdd61690","timestamp":"2025-04-10T18:31:30.234Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 77ceb905-a035-43e0-8718-dcb6fdd61690","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T18:31:31.006Z"}
{"level":"info","message":"Task 77ceb905-a035-43e0-8718-dcb6fdd61690 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T18:31:31.008Z"}
{"level":"info","message":"Task started: 63f44ef8-c718-4cdc-bbb2-298a7ad65989, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T18:40:01.456Z"}
{"level":"info","message":"System analysis completed: files=624, logs=65, memory=20, security=40, uxIssues=619, flowIssues=24","timestamp":"2025-04-10T18:40:02.824Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"63f44ef8-c718-4cdc-bbb2-298a7ad65989","timestamp":"2025-04-10T18:40:02.844Z"}
{"level":"warn","message":"No staged files for testing","taskId":"63f44ef8-c718-4cdc-bbb2-298a7ad65989","timestamp":"2025-04-10T18:40:03.668Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"63f44ef8-c718-4cdc-bbb2-298a7ad65989","timestamp":"2025-04-10T18:40:03.669Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 63f44ef8-c718-4cdc-bbb2-298a7ad65989","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T18:40:04.487Z"}
{"level":"info","message":"Task 63f44ef8-c718-4cdc-bbb2-298a7ad65989 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T18:40:04.490Z"}
{"level":"info","message":"Task started: 0491400f-4687-411d-acea-da1482c82598, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T19:04:23.151Z"}
{"level":"info","message":"System analysis completed: files=625, logs=65, memory=20, security=40, uxIssues=620, flowIssues=24","timestamp":"2025-04-10T19:04:27.421Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"0491400f-4687-411d-acea-da1482c82598","timestamp":"2025-04-10T19:04:27.439Z"}
{"level":"warn","message":"No staged files for testing","taskId":"0491400f-4687-411d-acea-da1482c82598","timestamp":"2025-04-10T19:04:28.319Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"0491400f-4687-411d-acea-da1482c82598","timestamp":"2025-04-10T19:04:28.320Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 0491400f-4687-411d-acea-da1482c82598","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T19:04:29.226Z"}
{"level":"info","message":"Task 0491400f-4687-411d-acea-da1482c82598 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T19:04:29.228Z"}
{"level":"info","message":"Task started: 78e991b1-cfca-4e1e-9a15-14fa9836b610, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T19:16:11.556Z"}
{"level":"info","message":"System analysis completed: files=626, logs=65, memory=20, security=40, uxIssues=621, flowIssues=24","timestamp":"2025-04-10T19:16:15.839Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"78e991b1-cfca-4e1e-9a15-14fa9836b610","timestamp":"2025-04-10T19:16:15.856Z"}
{"level":"warn","message":"No staged files for testing","taskId":"78e991b1-cfca-4e1e-9a15-14fa9836b610","timestamp":"2025-04-10T19:16:16.600Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"78e991b1-cfca-4e1e-9a15-14fa9836b610","timestamp":"2025-04-10T19:16:16.601Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 78e991b1-cfca-4e1e-9a15-14fa9836b610","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T19:16:17.363Z"}
{"level":"info","message":"Task 78e991b1-cfca-4e1e-9a15-14fa9836b610 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T19:16:17.365Z"}
{"level":"info","message":"Task started: 690aab83-d61d-4965-b996-f046fd99dcfa, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T19:24:30.799Z"}
{"level":"info","message":"System analysis completed: files=627, logs=65, memory=20, security=40, uxIssues=622, flowIssues=24","timestamp":"2025-04-10T19:24:35.102Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"690aab83-d61d-4965-b996-f046fd99dcfa","timestamp":"2025-04-10T19:24:35.122Z"}
{"level":"warn","message":"No staged files for testing","taskId":"690aab83-d61d-4965-b996-f046fd99dcfa","timestamp":"2025-04-10T19:24:36.021Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"690aab83-d61d-4965-b996-f046fd99dcfa","timestamp":"2025-04-10T19:24:36.021Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 690aab83-d61d-4965-b996-f046fd99dcfa","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T19:24:37.030Z"}
{"level":"info","message":"Task 690aab83-d61d-4965-b996-f046fd99dcfa failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T19:24:37.033Z"}
{"level":"info","message":"Task started: 6192d3f6-e700-449b-9c71-cadba683c3bd, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T19:39:22.387Z"}
{"level":"info","message":"System analysis completed: files=628, logs=65, memory=20, security=40, uxIssues=623, flowIssues=24","timestamp":"2025-04-10T19:39:26.481Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"6192d3f6-e700-449b-9c71-cadba683c3bd","timestamp":"2025-04-10T19:39:26.498Z"}
{"level":"warn","message":"No staged files for testing","taskId":"6192d3f6-e700-449b-9c71-cadba683c3bd","timestamp":"2025-04-10T19:39:27.292Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"6192d3f6-e700-449b-9c71-cadba683c3bd","timestamp":"2025-04-10T19:39:27.293Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 6192d3f6-e700-449b-9c71-cadba683c3bd","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T19:39:28.065Z"}
{"level":"info","message":"Task 6192d3f6-e700-449b-9c71-cadba683c3bd failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T19:39:28.067Z"}
{"level":"info","message":"Task started: 5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T19:44:54.755Z"}
{"level":"info","message":"System analysis completed: files=629, logs=65, memory=20, security=40, uxIssues=624, flowIssues=24","timestamp":"2025-04-10T19:44:56.321Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9","timestamp":"2025-04-10T19:44:56.339Z"}
{"level":"warn","message":"No staged files for testing","taskId":"5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9","timestamp":"2025-04-10T19:44:57.225Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9","timestamp":"2025-04-10T19:44:57.226Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T19:44:58.089Z"}
{"level":"info","message":"Task 5ad7dd09-51a4-49bf-9505-6eaaaeb4d0c9 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T19:44:58.091Z"}
{"level":"info","message":"Task started: 6b106c0f-0a5a-4806-b799-8e83667429c1, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T19:53:33.933Z"}
{"level":"info","message":"System analysis completed: files=630, logs=65, memory=20, security=40, uxIssues=625, flowIssues=24","timestamp":"2025-04-10T19:53:35.426Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"6b106c0f-0a5a-4806-b799-8e83667429c1","timestamp":"2025-04-10T19:53:35.468Z"}
{"level":"warn","message":"No staged files for testing","taskId":"6b106c0f-0a5a-4806-b799-8e83667429c1","timestamp":"2025-04-10T19:53:36.249Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"6b106c0f-0a5a-4806-b799-8e83667429c1","timestamp":"2025-04-10T19:53:36.249Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 6b106c0f-0a5a-4806-b799-8e83667429c1","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T19:53:37.058Z"}
{"level":"info","message":"Task 6b106c0f-0a5a-4806-b799-8e83667429c1 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T19:53:37.060Z"}
{"level":"info","message":"Task started: 3be4f27b-9167-4173-b420-0cf015adc4a3, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T20:01:03.681Z"}
{"level":"info","message":"System analysis completed: files=632, logs=65, memory=20, security=30, uxIssues=626, flowIssues=24","timestamp":"2025-04-10T20:01:07.800Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"3be4f27b-9167-4173-b420-0cf015adc4a3","timestamp":"2025-04-10T20:01:07.819Z"}
{"level":"warn","message":"No staged files for testing","taskId":"3be4f27b-9167-4173-b420-0cf015adc4a3","timestamp":"2025-04-10T20:01:08.650Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"3be4f27b-9167-4173-b420-0cf015adc4a3","timestamp":"2025-04-10T20:01:08.651Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 3be4f27b-9167-4173-b420-0cf015adc4a3","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T20:01:09.482Z"}
{"level":"info","message":"Task 3be4f27b-9167-4173-b420-0cf015adc4a3 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T20:01:09.485Z"}
{"level":"info","message":"Task started: 1ec56244-85bc-479e-bf5d-2530122608fe, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T20:01:32.616Z"}
{"level":"info","message":"System analysis completed: files=633, logs=65, memory=20, security=30, uxIssues=627, flowIssues=24","timestamp":"2025-04-10T20:01:33.770Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"1ec56244-85bc-479e-bf5d-2530122608fe","timestamp":"2025-04-10T20:01:33.787Z"}
{"level":"warn","message":"No staged files for testing","taskId":"1ec56244-85bc-479e-bf5d-2530122608fe","timestamp":"2025-04-10T20:01:34.585Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"1ec56244-85bc-479e-bf5d-2530122608fe","timestamp":"2025-04-10T20:01:34.585Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 1ec56244-85bc-479e-bf5d-2530122608fe","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T20:01:35.393Z"}
{"level":"info","message":"Task 1ec56244-85bc-479e-bf5d-2530122608fe failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T20:01:35.395Z"}
{"level":"info","message":"Task started: dddfbb2f-6833-408e-9db3-3bea0811bd10, Prompt: Build EmployeeLog with payroll","timestamp":"2025-04-10T20:09:07.514Z"}
{"level":"info","message":"System analysis completed: files=634, logs=65, memory=20, security=30, uxIssues=628, flowIssues=24","timestamp":"2025-04-10T20:09:08.798Z"}
{"level":"warn","message":"No staged file to read for EmployeeLog","taskId":"dddfbb2f-6833-408e-9db3-3bea0811bd10","timestamp":"2025-04-10T20:09:08.819Z"}
{"level":"warn","message":"No staged files for testing","taskId":"dddfbb2f-6833-408e-9db3-3bea0811bd10","timestamp":"2025-04-10T20:09:09.640Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"dddfbb2f-6833-408e-9db3-3bea0811bd10","timestamp":"2025-04-10T20:09:09.640Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task dddfbb2f-6833-408e-9db3-3bea0811bd10","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T20:09:10.469Z"}
{"level":"info","message":"Task dddfbb2f-6833-408e-9db3-3bea0811bd10 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T20:09:10.471Z"}
{"level":"info","message":"Task started: dc7eef8d-69b7-47de-85e3-f9da31d8f62e, Prompt: Build CRM system\n\n","timestamp":"2025-04-10T21:29:23.282Z"}
{"level":"info","message":"System analysis completed: files=635, logs=65, memory=20, security=30, uxIssues=629, flowIssues=24","timestamp":"2025-04-10T21:29:27.407Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-10T21:29:27.408Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"dc7eef8d-69b7-47de-85e3-f9da31d8f62e","timestamp":"2025-04-10T21:29:27.408Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v2.jsx\"]","taskId":"dc7eef8d-69b7-47de-85e3-f9da31d8f62e","timestamp":"2025-04-10T21:29:33.116Z"}
{"level":"debug","message":"Post-save: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v2.jsx\"]","taskId":"dc7eef8d-69b7-47de-85e3-f9da31d8f62e","timestamp":"2025-04-10T21:29:33.118Z"}
{"level":"debug","message":"Post-refresh: task.stagedFiles = undefined, task.newContent = undefined","taskId":"dc7eef8d-69b7-47de-85e3-f9da31d8f62e","timestamp":"2025-04-10T21:29:33.120Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"dc7eef8d-69b7-47de-85e3-f9da31d8f62e","timestamp":"2025-04-10T21:29:33.120Z"}
{"level":"debug","message":"Staged Login.jsx for task dc7eef8d-69b7-47de-85e3-f9da31d8f62e, newContent = {\"Login\":\"File staging failed\"}","timestamp":"2025-04-10T21:29:33.120Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for dc7eef8d-69b7-47de-85e3-f9da31d8f62e","newContent":{"Login":"File staging failed"},"timestamp":"2025-04-10T21:29:47.990Z"}
{"level":"info","message":"Task started: 1e91aaaa-0678-4f6e-bd42-a9623d200500, Prompt: Build CRM system","timestamp":"2025-04-10T21:41:56.692Z"}
{"level":"info","message":"System analysis completed: files=636, logs=65, memory=20, security=30, uxIssues=630, flowIssues=24","timestamp":"2025-04-10T21:42:00.796Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"1e91aaaa-0678-4f6e-bd42-a9623d200500","timestamp":"2025-04-10T21:42:00.798Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v3.jsx\"]","taskId":"1e91aaaa-0678-4f6e-bd42-a9623d200500","timestamp":"2025-04-10T21:42:00.815Z"}
{"level":"debug","message":"Post-save: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v3.jsx\"]","taskId":"1e91aaaa-0678-4f6e-bd42-a9623d200500","timestamp":"2025-04-10T21:42:00.817Z"}
{"level":"debug","message":"Post-refresh: task.stagedFiles = [], task.newContent = {}","taskId":"1e91aaaa-0678-4f6e-bd42-a9623d200500","timestamp":"2025-04-10T21:42:00.819Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"1e91aaaa-0678-4f6e-bd42-a9623d200500","timestamp":"2025-04-10T21:42:00.819Z"}
{"level":"debug","message":"Staged Login.jsx for task 1e91aaaa-0678-4f6e-bd42-a9623d200500, newContent = {\"Login\":\"File staging failed\"}","timestamp":"2025-04-10T21:42:00.820Z"}
{"level":"info","message":"Task started: 3e3467b9-fce2-4e3c-84cb-d615b1b28140, Prompt: Build CRM system","timestamp":"2025-04-10T21:42:18.289Z"}
{"level":"info","message":"System analysis completed: files=637, logs=65, memory=20, security=30, uxIssues=631, flowIssues=24","timestamp":"2025-04-10T21:42:19.579Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"3e3467b9-fce2-4e3c-84cb-d615b1b28140","timestamp":"2025-04-10T21:42:19.580Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v4.jsx\"]","taskId":"3e3467b9-fce2-4e3c-84cb-d615b1b28140","timestamp":"2025-04-10T21:42:19.590Z"}
{"level":"debug","message":"Post-save: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v4.jsx\"]","taskId":"3e3467b9-fce2-4e3c-84cb-d615b1b28140","timestamp":"2025-04-10T21:42:19.593Z"}
{"level":"debug","message":"Post-refresh: task.stagedFiles = [], task.newContent = {}","taskId":"3e3467b9-fce2-4e3c-84cb-d615b1b28140","timestamp":"2025-04-10T21:42:19.595Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"3e3467b9-fce2-4e3c-84cb-d615b1b28140","timestamp":"2025-04-10T21:42:19.596Z"}
{"level":"debug","message":"Staged Login.jsx for task 3e3467b9-fce2-4e3c-84cb-d615b1b28140, newContent = {\"Login\":\"File staging failed\"}","timestamp":"2025-04-10T21:42:19.596Z"}
{"level":"info","message":"Task started: 12169af9-a451-47df-9cc6-413cae0a9231, Prompt: Build CRM system","timestamp":"2025-04-10T21:51:36.895Z"}
{"level":"info","message":"System analysis completed: files=638, logs=65, memory=20, security=30, uxIssues=632, flowIssues=24","timestamp":"2025-04-10T21:51:41.258Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.261Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.280Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\"], task.newContent = {}","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.285Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.289Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.295Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.301Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.305Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.310Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.327Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.332Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:41.337Z"}
{"level":"warn","message":"Cannot generate Playwright test: task not found","taskId":"Login","timestamp":"2025-04-10T21:51:42.233Z"}
{"level":"debug","message":"Pre-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:42.291Z"}
{"level":"warn","message":"No staged files for testing","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:42.294Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:42.295Z"}
{"journeyPassed":false,"level":"warn","message":"Self-validation failed for task 12169af9-a451-47df-9cc6-413cae0a9231","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T21:51:43.214Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\"], testPassed = false","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.218Z"}
{"level":"info","message":"Task 12169af9-a451-47df-9cc6-413cae0a9231 failed self-validation, attempt 1 of 5","timestamp":"2025-04-10T21:51:43.218Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.222Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.234Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.241Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.250Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.257Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.264Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.272Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.290Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.296Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:43.302Z"}
{"level":"debug","message":"Pre-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:44.173Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\"], testPassed = false","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.069Z"}
{"level":"info","message":"Task 12169af9-a451-47df-9cc6-413cae0a9231 failed self-validation, attempt 2 of 5","timestamp":"2025-04-10T21:51:45.069Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.073Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.087Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.093Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.103Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.111Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.118Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.124Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.146Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.152Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:45.159Z"}
{"level":"debug","message":"Pre-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.047Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\"], testPassed = false","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.929Z"}
{"level":"info","message":"Task 12169af9-a451-47df-9cc6-413cae0a9231 failed self-validation, attempt 3 of 5","timestamp":"2025-04-10T21:51:46.929Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.933Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.945Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.952Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.961Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.968Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.975Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:46.981Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:47.011Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:47.019Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:47.027Z"}
{"level":"debug","message":"Pre-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:47.946Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\"], testPassed = false","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.848Z"}
{"level":"info","message":"Task 12169af9-a451-47df-9cc6-413cae0a9231 failed self-validation, attempt 4 of 5","timestamp":"2025-04-10T21:51:48.849Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.853Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.865Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.872Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.884Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.890Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.899Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.906Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.926Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.931Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:48.939Z"}
{"level":"debug","message":"Pre-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v5.jsx\"]","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:49.840Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v26.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v1.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v27.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v2.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v28.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v3.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v29.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v4.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v5.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v30.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v5.jsx\"], testPassed = false","taskId":"12169af9-a451-47df-9cc6-413cae0a9231","timestamp":"2025-04-10T21:51:50.688Z"}
{"level":"info","message":"Task 12169af9-a451-47df-9cc6-413cae0a9231 failed self-validation, attempt 5 of 5","timestamp":"2025-04-10T21:51:50.689Z"}
{"level":"info","message":"Task started: 6842986b-c59b-4cbf-b8f3-38f9ef825464, Prompt: Build CRM system","timestamp":"2025-04-10T22:07:33.278Z"}
{"level":"info","message":"System analysis completed: files=663, logs=65, memory=20, security=30, uxIssues=657, flowIssues=24","timestamp":"2025-04-10T22:07:37.910Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-10T22:07:37.912Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-10T22:07:37.912Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.913Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.935Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\"], task.newContent = {}","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.940Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.944Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.956Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.962Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.969Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.975Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:37.994Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:38.001Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:38.008Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:39.004Z"}
{"level":"warn","message":"No staged files for testing","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:39.007Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:39.008Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v6.jsx\"]","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:40.031Z"}
{"journeyPassed":false,"level":"info","message":"Self-validation passed for task 6842986b-c59b-4cbf-b8f3-38f9ef825464","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T22:07:40.035Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v6.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v31.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v6.jsx\"], testPassed = true","taskId":"6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:07:40.035Z"}{"level":"info","message":"Task pending_approval: 6842986b-c59b-4cbf-b8f3-38f9ef825464, Staged Files: 5, Proposed Changes: 0","timestamp":"2025-04-10T22:07:40.148Z"}
{"level":"info","message":"Entering /api/grok/reject","timestamp":"2025-04-10T22:24:33.315Z"}
{"level":"info","message":"Rollback completed for task 6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:24:33.335Z"}
{"level":"info","message":"Deleting task: 6842986b-c59b-4cbf-b8f3-38f9ef825464","timestamp":"2025-04-10T22:24:35.272Z"}
{"level":"info","message":"Task 6842986b-c59b-4cbf-b8f3-38f9ef825464 fully deleted","timestamp":"2025-04-10T22:24:35.285Z"}
{"level":"info","message":"Task started: 6356b0b2-32b3-41d3-9f58-a488fdab31c6, Prompt: Build CRM system and self-enhance","timestamp":"2025-04-10T22:24:48.948Z"}
{"level":"info","message":"System analysis completed: files=668, logs=65, memory=20, security=30, uxIssues=662, flowIssues=24","timestamp":"2025-04-10T22:24:53.511Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.512Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.530Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\"], task.newContent = {}","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.536Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.539Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.547Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.553Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.561Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.566Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.585Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.591Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:53.597Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:54.533Z"}
{"level":"warn","message":"No staged files for testing","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:54.535Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:54.536Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v7.jsx\"]","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:55.437Z"}
{"journeyPassed":false,"level":"info","message":"Self-validation passed for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T22:24:55.442Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v7.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v32.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v7.jsx\"], testPassed = true","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:24:55.442Z"}{"level":"info","message":"Task pending_approval: 6356b0b2-32b3-41d3-9f58-a488fdab31c6, Staged Files: 5, Proposed Changes: 0","timestamp":"2025-04-10T22:24:55.555Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-10T22:25:07.912Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/file-content","timestamp":"2025-04-10T22:25:07.914Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 6356b0b2-32b3-41d3-9f58-a488fdab31c6","newContent":{"Dashboard":"/*\n * File: Dashboard-v7.jsx\n * Path: frontend/src/pages/Dashboard-v7.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\n * Notes:\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \"Build CRM system and self-enhance\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v32.jsx\n * Path: frontend/src/pages/EmployeeLog-v32.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\n * Notes:\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \"Build CRM system and self-enhance\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v11.jsx\n * Path: frontend/src/pages/Login-v11.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\n * Notes:\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \"Build CRM system and self-enhance\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"timestamp":"2025-04-10T22:25:07.919Z"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-10T22:25:15.677Z"}
{"level":"error","message":"Test error: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:404:29\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:25:15.681Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 6356b0b2-32b3-41d3-9f58-a488fdab31c6","newContent":{"Dashboard":"/*\n * File: Dashboard-v7.jsx\n * Path: frontend/src/pages/Dashboard-v7.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-10: Generated by Grok for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\n * Notes:\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \"Build CRM system and self-enhance\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v32.jsx\n * Path: frontend/src/pages/EmployeeLog-v32.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\n * Notes:\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \"Build CRM system and self-enhance\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v11.jsx\n * Path: frontend/src/pages/Login-v11.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-10: Updated for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6\n * Notes:\n *   - Generated for task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6 with prompt: \"Build CRM system and self-enhance\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"timestamp":"2025-04-10T22:25:33.220Z"}
{"level":"info","message":"Rollback completed for task 6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:25:54.802Z"}
{"level":"info","message":"Deleting task: 6356b0b2-32b3-41d3-9f58-a488fdab31c6","timestamp":"2025-04-10T22:25:57.505Z"}
{"level":"info","message":"Task 6356b0b2-32b3-41d3-9f58-a488fdab31c6 fully deleted","timestamp":"2025-04-10T22:25:57.511Z"}
{"level":"info","message":"Deleting task: Login","timestamp":"2025-04-10T22:25:58.227Z"}
{"level":"warn","message":"Task not found for deletion: Login","timestamp":"2025-04-10T22:25:58.229Z"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-10T22:34:09.408Z"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-10T22:34:09.410Z"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-10T22:34:09.413Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-10T22:56:06.650Z"}
{"level":"info","message":"Entering /api/grok/edit - Route Hit","timestamp":"2025-04-10T22:56:20.004Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system\n\n","timestamp":"2025-04-10T22:56:20.004Z"}
{"level":"info","message":"Task queued: 6a8fd934-82f7-4a45-a9fb-490f2c030955","prompt":"Build CRM system\n\n","timestamp":"2025-04-10T22:56:20.016Z"}
{"level":"info","message":"Task started: 6a8fd934-82f7-4a45-a9fb-490f2c030955, Prompt: Build CRM system\n\n","timestamp":"2025-04-10T22:56:20.023Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}","timestamp":"2025-04-10T22:56:23.886Z"}
{"level":"info","message":"System analysis completed: files=673, logs=65, memory=20, security=30, uxIssues=667, flowIssues=24","timestamp":"2025-04-10T22:56:24.500Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.503Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.534Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\"], task.newContent = {}","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.539Z"}
{"level":"debug","message":"Staged Login.jsx for task 6a8fd934-82f7-4a45-a9fb-490f2c030955, newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T22:56:24.539Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.542Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.550Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.556Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 6a8fd934-82f7-4a45-a9fb-490f2c030955, newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T22:56:24.557Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.560Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.566Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.569Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 6a8fd934-82f7-4a45-a9fb-490f2c030955, newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T22:56:24.570Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.572Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.587Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.589Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 6a8fd934-82f7-4a45-a9fb-490f2c030955, newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v33.jsx\\n * Path: frontend/src/pages/EmployeeLog-v33.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T22:56:24.590Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.592Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.600Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v8.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v33.jsx\\n * Path: frontend/src/pages/EmployeeLog-v33.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:24.601Z"}
{"level":"debug","message":"Staged Settings.jsx for task 6a8fd934-82f7-4a45-a9fb-490f2c030955, newContent = {\"Login\":\"/*\\n * File: Login-v12.jsx\\n * Path: frontend/src/pages/Login-v12.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v8.jsx\\n * Path: frontend/src/pages/Dashboard-v8.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v33.jsx\\n * Path: frontend/src/pages/EmployeeLog-v33.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\\n * Notes:\\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T22:56:24.602Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:25.564Z"}
{"level":"warn","message":"No staged files for testing","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:25.566Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:25.566Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v8.jsx\"]","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:26.499Z"}
{"journeyPassed":false,"level":"info","message":"Self-validation passed for task 6a8fd934-82f7-4a45-a9fb-490f2c030955","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T22:56:26.504Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v8.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v33.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v8.jsx\"], testPassed = true","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:56:26.505Z"}{"level":"info","message":"Task pending_approval: 6a8fd934-82f7-4a45-a9fb-490f2c030955, Staged Files: 5, Proposed Changes: 0","timestamp":"2025-04-10T22:56:26.615Z"}
{"level":"error","message":"Test error: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:411:29\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:57:02.320Z"}
{"level":"info","message":"Entering /api/grok/approve","timestamp":"2025-04-10T22:57:05.829Z"}
{"level":"error","message":"Task approval error: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T22:57:05.834Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 6a8fd934-82f7-4a45-a9fb-490f2c030955","newContent":{"Dashboard":"/*\n * File: Dashboard-v8.jsx\n * Path: frontend/src/pages/Dashboard-v8.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-10: Generated by Grok for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\n * Notes:\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \"Build CRM system\n\n\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v33.jsx\n * Path: frontend/src/pages/EmployeeLog-v33.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\n * Notes:\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \"Build CRM system\n\n\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v12.jsx\n * Path: frontend/src/pages/Login-v12.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-10: Updated for task 6a8fd934-82f7-4a45-a9fb-490f2c030955\n * Notes:\n *   - Generated for task: 6a8fd934-82f7-4a45-a9fb-490f2c030955 with prompt: \"Build CRM system\n\n\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"timestamp":"2025-04-10T22:57:08.254Z"}
{"level":"info","message":"Rollback completed for task 6a8fd934-82f7-4a45-a9fb-490f2c030955","timestamp":"2025-04-10T23:03:20.074Z"}
{"level":"info","message":"Task queued: badb6aea-778f-4380-b7b0-12217e84f5b6","prompt":"Build CRM system\n\n","timestamp":"2025-04-10T23:03:25.973Z"}
{"level":"info","message":"Task started: badb6aea-778f-4380-b7b0-12217e84f5b6, Prompt: Build CRM system\n\n","timestamp":"2025-04-10T23:03:25.979Z"}
{"level":"info","message":"System analysis completed: files=678, logs=65, memory=20, security=30, uxIssues=672, flowIssues=24","timestamp":"2025-04-10T23:03:27.703Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.706Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.734Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\"], task.newContent = {}","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.741Z"}
{"level":"debug","message":"Staged Login.jsx for task badb6aea-778f-4380-b7b0-12217e84f5b6, newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T23:03:27.742Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.745Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.757Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.760Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task badb6aea-778f-4380-b7b0-12217e84f5b6, newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T23:03:27.761Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.766Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.774Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.776Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task badb6aea-778f-4380-b7b0-12217e84f5b6, newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T23:03:27.777Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.780Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.806Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.807Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task badb6aea-778f-4380-b7b0-12217e84f5b6, newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v34.jsx\\n * Path: frontend/src/pages/EmployeeLog-v34.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T23:03:27.808Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.811Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.822Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v9.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v34.jsx\\n * Path: frontend/src/pages/EmployeeLog-v34.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:27.824Z"}
{"level":"debug","message":"Staged Settings.jsx for task badb6aea-778f-4380-b7b0-12217e84f5b6, newContent = {\"Login\":\"/*\\n * File: Login-v13.jsx\\n * Path: frontend/src/pages/Login-v13.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v9.jsx\\n * Path: frontend/src/pages/Dashboard-v9.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v34.jsx\\n * Path: frontend/src/pages/EmployeeLog-v34.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task badb6aea-778f-4380-b7b0-12217e84f5b6\\n * Notes:\\n *   - Generated for task: badb6aea-778f-4380-b7b0-12217e84f5b6 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T23:03:27.825Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:28.801Z"}
{"level":"warn","message":"No staged files for testing","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:28.803Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:28.804Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v9.jsx\"]","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:29.783Z"}
{"journeyPassed":false,"level":"info","message":"Self-validation passed for task badb6aea-778f-4380-b7b0-12217e84f5b6","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T23:03:29.787Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v9.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v34.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v9.jsx\"], testPassed = true","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:29.787Z"}{"level":"info","message":"Task pending_approval: badb6aea-778f-4380-b7b0-12217e84f5b6, Staged Files: 5, Proposed Changes: 0","timestamp":"2025-04-10T23:03:29.904Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:45.796Z"}
{"level":"error","message":"Test error: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:413:29\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:03:45.799Z"}
{"level":"info","message":"Rollback completed for task badb6aea-778f-4380-b7b0-12217e84f5b6","timestamp":"2025-04-10T23:11:01.369Z"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-10T23:11:05.861Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-10T23:11:10.355Z"}
{"level":"info","message":"Task queued: 83a706c4-b619-468d-bef1-1202161d71be","prompt":"Build CRM system","timestamp":"2025-04-10T23:11:10.366Z"}
{"level":"info","message":"Task started: 83a706c4-b619-468d-bef1-1202161d71be, Prompt: Build CRM system","timestamp":"2025-04-10T23:11:10.372Z"}
{"level":"info","message":"System analysis completed: files=683, logs=65, memory=20, security=30, uxIssues=677, flowIssues=24","timestamp":"2025-04-10T23:11:12.309Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.312Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.337Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\"], task.newContent = {}","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.344Z"}
{"level":"debug","message":"Staged Login.jsx for task 83a706c4-b619-468d-bef1-1202161d71be, newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T23:11:12.345Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.348Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.360Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.363Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 83a706c4-b619-468d-bef1-1202161d71be, newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T23:11:12.364Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.367Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.375Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.377Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 83a706c4-b619-468d-bef1-1202161d71be, newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T23:11:12.378Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.381Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.402Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.404Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 83a706c4-b619-468d-bef1-1202161d71be, newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v35.jsx\\n * Path: frontend/src/pages/EmployeeLog-v35.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T23:11:12.405Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.408Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.416Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v10.jsx\"], task.newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v35.jsx\\n * Path: frontend/src/pages/EmployeeLog-v35.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:12.418Z"}
{"level":"debug","message":"Staged Settings.jsx for task 83a706c4-b619-468d-bef1-1202161d71be, newContent = {\"Login\":\"/*\\n * File: Login-v14.jsx\\n * Path: frontend/src/pages/Login-v14.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v10.jsx\\n * Path: frontend/src/pages/Dashboard-v10.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v35.jsx\\n * Path: frontend/src/pages/EmployeeLog-v35.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\\n * Notes:\\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \\\"Build CRM system\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T23:11:12.419Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:13.801Z"}
{"level":"warn","message":"No staged files for testing","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:13.803Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:13.803Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v10.jsx\"]","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:14.959Z"}
{"journeyPassed":false,"level":"info","message":"Self-validation passed for task 83a706c4-b619-468d-bef1-1202161d71be","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T23:11:14.965Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v10.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v35.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v10.jsx\"], testPassed = true","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:14.965Z"}{"level":"info","message":"Task pending_approval: 83a706c4-b619-468d-bef1-1202161d71be, Staged Files: 5, Proposed Changes: 0","timestamp":"2025-04-10T23:11:15.070Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 83a706c4-b619-468d-bef1-1202161d71be","newContent":{"Dashboard":"/*\n * File: Dashboard-v10.jsx\n * Path: frontend/src/pages/Dashboard-v10.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-10: Generated by Grok for task 83a706c4-b619-468d-bef1-1202161d71be\n * Notes:\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v35.jsx\n * Path: frontend/src/pages/EmployeeLog-v35.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\n * Notes:\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v14.jsx\n * Path: frontend/src/pages/Login-v14.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-10: Updated for task 83a706c4-b619-468d-bef1-1202161d71be\n * Notes:\n *   - Generated for task: 83a706c4-b619-468d-bef1-1202161d71be with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"timestamp":"2025-04-10T23:11:26.706Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:33.153Z"}
{"level":"error","message":"Test error: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:413:29\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:11:33.156Z"}
{"level":"info","message":"Rollback completed for task 83a706c4-b619-468d-bef1-1202161d71be","timestamp":"2025-04-10T23:19:49.682Z"}
{"level":"info","message":"Task queued: 197359f0-0016-40a4-b7b4-f67bc9ec7126","prompt":"Build CRM system\n\n","timestamp":"2025-04-10T23:19:52.757Z"}
{"level":"info","message":"Task started: 197359f0-0016-40a4-b7b4-f67bc9ec7126, Prompt: Build CRM system\n\n","timestamp":"2025-04-10T23:19:52.765Z"}
{"level":"info","message":"System analysis completed: files=688, logs=65, memory=20, security=30, uxIssues=682, flowIssues=24","timestamp":"2025-04-10T23:19:57.186Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.188Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.207Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\"], task.generatedFiles = [], task.newContent = {}","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.212Z"}
{"level":"debug","message":"Staged Login.jsx for task 197359f0-0016-40a4-b7b4-f67bc9ec7126, newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","timestamp":"2025-04-10T23:19:57.213Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.215Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.226Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\"], task.generatedFiles = [], task.newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\"}","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.228Z"}
{"level":"debug","message":"Staged Dashboard.jsx for task 197359f0-0016-40a4-b7b4-f67bc9ec7126, newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","timestamp":"2025-04-10T23:19:57.230Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.232Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.241Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\"], task.generatedFiles = [], task.newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\"}","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.242Z"}
{"level":"debug","message":"Staged SponsorProfile.jsx for task 197359f0-0016-40a4-b7b4-f67bc9ec7126, newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","timestamp":"2025-04-10T23:19:57.243Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.245Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.266Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\"], task.generatedFiles = [], task.newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\"}","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.267Z"}
{"level":"debug","message":"Staged EmployeeLog.jsx for task 197359f0-0016-40a4-b7b4-f67bc9ec7126, newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v36.jsx\\n * Path: frontend/src/pages/EmployeeLog-v36.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","timestamp":"2025-04-10T23:19:57.268Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.271Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.279Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v11.jsx\"], task.generatedFiles = [], task.newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v36.jsx\\n * Path: frontend/src/pages/EmployeeLog-v36.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\"}","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:57.280Z"}
{"level":"debug","message":"Staged Settings.jsx for task 197359f0-0016-40a4-b7b4-f67bc9ec7126, newContent = {\"Login\":\"/*\\n * File: Login-v15.jsx\\n * Path: frontend/src/pages/Login-v15.jsx\\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\\n * Change Log:\\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Secure CRM access, improve UX\\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\\n *   - Future: Add MFA, OAuth\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\\nimport axios from 'axios';\\nimport * as tf from '@tensorflow/tfjs';\\nimport { useDispatch } from 'react-redux';\\nimport { useNavigate } from 'react-router-dom';\\nimport { login } from '@/redux/auth/actions';\\n\\nconst { Title, Text } = Typography;\\n\\nconst Login = () => {\\n  const [loading, setLoading] = useState(false);\\n  const [aiTip, setAiTip] = useState('');\\n  const dispatch = useDispatch();\\n  const navigate = useNavigate();\\n\\n  useEffect(() => {\\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\\n    if (loginAttempts.length > 2) {\\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\\n      const model = tf.sequential();\\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\\n      });\\n    }\\n  }, []);\\n\\n  const onFinish = async (values) => {\\n    setLoading(true);\\n    try {\\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\\n      const loginData = { email: values.email, password: values.password };\\n      await dispatch(login({ loginData })).unwrap();\\n      message.success('Login successful!');\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\\n      navigate('/dashboard');\\n    } catch (err) {\\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\\n    } finally {\\n      setLoading(false);\\n    }\\n  };\\n\\n  return (\\n    <App>\\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\\n          <Form layout=\\\"vertical\\\" onFinish={onFinish}>\\n            <Form.Item name=\\\"email\\\" rules={[{ required: true, message: 'Please enter your email' }]}>\\n              <Input prefix={<UserOutlined />} placeholder=\\\"Email\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            <Form.Item name=\\\"password\\\" rules={[{ required: true, message: 'Please enter your password' }]}>\\n              <Input.Password prefix={<LockOutlined />} placeholder=\\\"Password\\\" size=\\\"large\\\" />\\n            </Form.Item>\\n            {aiTip && <Text type=\\\"secondary\\\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\\n            <Form.Item>\\n              <Button type=\\\"primary\\\" htmlType=\\\"submit\\\" loading={loading} size=\\\"large\\\" block style={{ borderRadius: 4 }}>\\n                Log In\\n              </Button>\\n            </Form.Item>\\n          </Form>\\n        </Card>\\n      </div>\\n    </App>\\n  );\\n};\\n\\nexport default Login;\\n\",\"Dashboard\":\"/*\\n * File: Dashboard-v11.jsx\\n * Path: frontend/src/pages/Dashboard-v11.jsx\\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\\n * Dependencies: react, antd, react-router-dom\\n * Change Log:\\n *   - 2025-04-10: Generated by Grok for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Provide CRM overview, navigation\\n *   - Enhancements: Modern layout, enhanced UI, AI insights\\n *   - Future: Add analytics, real-time updates\\n */\\nimport React from 'react';\\nimport { Card, Row, Col, Button } from 'antd';\\nimport { useNavigate } from 'react-router-dom';\\n\\nconst Dashboard = () => {\\n  const navigate = useNavigate();\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <Row gutter={[16, 16]}>\\n        <Col span={24}>\\n          <Card title=\\\"CRM Dashboard\\\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\\n            <p>Welcome to your CRM dashboard!</p>\\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\\n          </Card>\\n        </Col>\\n      </Row>\\n    </div>\\n  );\\n};\\n\\nexport default Dashboard;\\n\",\"SponsorProfile\":\"\",\"EmployeeLog\":\"/*\\n * File: EmployeeLog-v36.jsx\\n * Path: frontend/src/pages/EmployeeLog-v36.jsx\\n * Purpose: Employee log in/out system with accounting and AI predictions.\\n * Dependencies: react, antd, moment, @tensorflow/tfjs\\n * Change Log:\\n *   - 04/07/2025: Generated by Grok with AI\\n *   - 2025-04-10: Updated for task 197359f0-0016-40a4-b7b4-f67bc9ec7126\\n * Notes:\\n *   - Generated for task: 197359f0-0016-40a4-b7b4-f67bc9ec7126 with prompt: \\\"Build CRM system\\n\\n\\\".\\n *   - Prior Purpose: N/A\\n *   - Goals: Track employee time, integrate with CRM\\n *   - Enhancements: Hours tracking, AI predictions, modern UI\\n *   - Future: Sync with EmployeeDash.jsx, add API storage\\n */\\nimport React, { useState, useEffect } from 'react';\\nimport { Button, Table, message } from 'antd';\\nimport moment from 'moment';\\nimport * as tf from '@tensorflow/tfjs';\\n\\nconst EmployeeLog = () => {\\n  const [logs, setLogs] = useState([]);\\n  const [predictedHours, setPredictedHours] = useState(0);\\n\\n  const logEvent = (type) => {\\n    const lastLog = logs[logs.length - 1];\\n    const log = {\\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\\n      type,\\n      \\n      \\n    };\\n    setLogs([...logs, log]);\\n    message.success(`${type} recorded`);\\n  };\\n\\n  useEffect(() => {\\n    if (logs.length > 2) {\\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\\n      if (hours.length > 1) {\\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\\n        const model = tf.sequential();\\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\\n          setPredictedHours(next.dataSync()[0]);\\n        });\\n      }\\n    }\\n  }, [logs]);\\n\\n  const columns = [\\n    { title: 'Time', dataIndex: 'time', key: 'time' },\\n    { title: 'Type', dataIndex: 'type', key: 'type' },\\n    \\n    \\n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\\n  ];\\n\\n  return (\\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\\n      <h1>Employee Log</h1>\\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\\n      <Table dataSource={logs} columns={columns} rowKey=\\\"time\\\" style={{ marginTop: 16 }} />\\n    </div>\\n  );\\n};\\n\\nexport default EmployeeLog;\\n\",\"Settings\":\"\"}","timestamp":"2025-04-10T23:19:57.282Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:58.133Z"}
{"level":"warn","message":"No staged files for testing","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:58.134Z"}
{"level":"warn","message":"Skipping auto-test due to no valid Playwright test generated","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:58.135Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true},\"/dashboard\":{\"status\":200,\"working\":true},\"/sponsor/1\":{\"status\":200,\"working\":true},\"/employee-log\":{\"status\":200,\"working\":true},\"/settings\":{\"status\":200,\"working\":true}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v11.jsx\"]","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:58.986Z"}
{"journeyPassed":false,"level":"info","message":"Self-validation passed for task 197359f0-0016-40a4-b7b4-f67bc9ec7126","results":{"/":{"status":200,"working":true},"/dashboard":{"status":200,"working":true},"/employee-log":{"status":200,"working":true},"/settings":{"status":200,"working":true},"/sponsor/1":{"status":200,"working":true}},"timestamp":"2025-04-10T23:19:58.990Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v11.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v36.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v11.jsx\"], testPassed = true","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:19:58.990Z"}{"level":"info","message":"Task pending_approval: 197359f0-0016-40a4-b7b4-f67bc9ec7126, Staged Files: 5, Generated Files: 0, Proposed Changes: 0","timestamp":"2025-04-10T23:19:59.086Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:20:01.887Z"}
{"generatedFiles":[],"level":"warn","message":"No files to test for task 197359f0-0016-40a4-b7b4-f67bc9ec7126","stagedFiles":[],"timestamp":"2025-04-10T23:20:01.890Z"}
{"level":"info","message":"Rollback completed for task 197359f0-0016-40a4-b7b4-f67bc9ec7126","timestamp":"2025-04-10T23:27:51.072Z"}
{"level":"info","message":"Task queued: 0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641","prompt":"Build CRM system\n\n","timestamp":"2025-04-10T23:28:02.496Z"}
{"level":"info","message":"Task started: 0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641, Prompt: Build CRM system\n\n","timestamp":"2025-04-10T23:28:02.503Z"}
{"level":"info","message":"System analysis completed: files=693, logs=65, memory=20, security=30, uxIssues=687, flowIssues=24","timestamp":"2025-04-10T23:28:04.327Z"}
{"level":"debug","message":"Pre-generateFiles: task.stagedFiles = []","taskId":"0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641","timestamp":"2025-04-10T23:28:04.330Z"}
{"level":"debug","message":"Post-generateFiles: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v16.jsx\"]","taskId":"0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641","timestamp":"2025-04-10T23:28:04.349Z"}
{"level":"debug","message":"Post-updateOne: task.stagedFiles = undefined, task.generatedFiles = [], task.newContent = {}","taskId":"0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641","timestamp":"2025-04-10T23:28:04.358Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:559:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641","timestamp":"2025-04-10T23:28:04.359Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 0ac8c5f7-ac37-4c9b-9a78-decfc1dd3641","newContent":{},"timestamp":"2025-04-10T23:28:07.595Z"}
{"level":"info","message":"Task queued: b2001ba0-60a5-40c7-90cd-53c5b1bf3834","prompt":"Build CRM system","timestamp":"2025-04-11T17:56:04.401Z"}
{"level":"info","message":"Task started: b2001ba0-60a5-40c7-90cd-53c5b1bf3834, Prompt: Build CRM system","timestamp":"2025-04-11T17:56:04.408Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-11T17:56:08.787Z"}
{"level":"info","message":"System analysis completed: files=694, logs=65, memory=20, security=30, uxIssues=688, flowIssues=24","timestamp":"2025-04-11T17:56:09.459Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"b2001ba0-60a5-40c7-90cd-53c5b1bf3834","timestamp":"2025-04-11T17:56:09.481Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:573:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"b2001ba0-60a5-40c7-90cd-53c5b1bf3834","timestamp":"2025-04-11T17:56:09.481Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system\n","timestamp":"2025-04-11T18:05:08.001Z"}
{"level":"info","message":"Task queued: 360e51e5-b887-41d4-985c-60dd0c40a390","prompt":"Build CRM system\n","timestamp":"2025-04-11T18:05:08.012Z"}
{"level":"info","message":"Task started: 360e51e5-b887-41d4-985c-60dd0c40a390, Prompt: Build CRM system\n","timestamp":"2025-04-11T18:05:08.018Z"}
{"level":"info","message":"System analysis completed: files=695, logs=65, memory=20, security=30, uxIssues=689, flowIssues=24","timestamp":"2025-04-11T18:05:09.696Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"360e51e5-b887-41d4-985c-60dd0c40a390","timestamp":"2025-04-11T18:05:09.713Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:562:37)","taskId":"360e51e5-b887-41d4-985c-60dd0c40a390","timestamp":"2025-04-11T18:05:09.715Z"}
{"level":"debug","message":"Request body:","prompt":"uild CRM system","timestamp":"2025-04-11T18:13:00.657Z"}
{"level":"info","message":"Task queued: 2fc7e2fb-7ff7-4eb9-9e75-f0888f7122c4","prompt":"uild CRM system","timestamp":"2025-04-11T18:13:00.674Z"}
{"level":"info","message":"Task started: 2fc7e2fb-7ff7-4eb9-9e75-f0888f7122c4, Prompt: uild CRM system","timestamp":"2025-04-11T18:13:00.682Z"}
{"level":"info","message":"System analysis completed: files=696, logs=65, memory=20, security=30, uxIssues=690, flowIssues=24","timestamp":"2025-04-11T18:13:04.945Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"2fc7e2fb-7ff7-4eb9-9e75-f0888f7122c4","timestamp":"2025-04-11T18:13:04.970Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:562:37)","taskId":"2fc7e2fb-7ff7-4eb9-9e75-f0888f7122c4","timestamp":"2025-04-11T18:13:04.972Z"}
{"level":"debug","message":"Request body:","prompt":"uild CRM system\n","timestamp":"2025-04-11T18:13:36.717Z"}
{"level":"info","message":"Task queued: 24299a89-d90a-4d30-a960-98ea670d0de9","prompt":"uild CRM system\n","timestamp":"2025-04-11T18:13:36.726Z"}
{"level":"info","message":"Task started: 24299a89-d90a-4d30-a960-98ea670d0de9, Prompt: uild CRM system\n","timestamp":"2025-04-11T18:13:36.732Z"}
{"level":"info","message":"System analysis completed: files=697, logs=65, memory=20, security=30, uxIssues=691, flowIssues=24","timestamp":"2025-04-11T18:13:38.145Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"24299a89-d90a-4d30-a960-98ea670d0de9","timestamp":"2025-04-11T18:13:38.165Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:562:37)","taskId":"24299a89-d90a-4d30-a960-98ea670d0de9","timestamp":"2025-04-11T18:13:38.167Z"}
{"level":"debug","message":"Request body:","prompt":"build CRM system\n","timestamp":"2025-04-11T18:13:42.186Z"}
{"level":"info","message":"Task queued: ce05b061-68ae-4b5a-be2f-ece9373c4ecb","prompt":"build CRM system\n","timestamp":"2025-04-11T18:13:42.194Z"}
{"level":"info","message":"Task started: ce05b061-68ae-4b5a-be2f-ece9373c4ecb, Prompt: build CRM system\n","timestamp":"2025-04-11T18:13:42.199Z"}
{"level":"info","message":"System analysis completed: files=698, logs=65, memory=20, security=30, uxIssues=692, flowIssues=24","timestamp":"2025-04-11T18:13:44.071Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"ce05b061-68ae-4b5a-be2f-ece9373c4ecb","timestamp":"2025-04-11T18:13:44.094Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:562:37)","taskId":"ce05b061-68ae-4b5a-be2f-ece9373c4ecb","timestamp":"2025-04-11T18:13:44.096Z"}
{"level":"debug","message":"Request body:","prompt":"build CRM system","timestamp":"2025-04-11T18:32:20.096Z"}
{"level":"info","message":"Task queued: ac5faa55-4476-4550-8825-d3b70e22f1f9","prompt":"build CRM system","timestamp":"2025-04-11T18:32:20.105Z"}
{"level":"info","message":"Task started: ac5faa55-4476-4550-8825-d3b70e22f1f9, Prompt: build CRM system","timestamp":"2025-04-11T18:32:20.110Z"}
{"level":"info","message":"System analysis completed: files=698, logs=65, memory=20, security=40, uxIssues=693, flowIssues=24","timestamp":"2025-04-11T18:32:24.490Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"ac5faa55-4476-4550-8825-d3b70e22f1f9","timestamp":"2025-04-11T18:32:24.514Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:562:37)","taskId":"ac5faa55-4476-4550-8825-d3b70e22f1f9","timestamp":"2025-04-11T18:32:24.516Z"}
{"level":"info","message":"Task queued: 8b29118d-335c-4ea4-b2de-43b0418a3521","prompt":"build CRM system","timestamp":"2025-04-11T18:40:12.402Z"}
{"level":"info","message":"Task started: 8b29118d-335c-4ea4-b2de-43b0418a3521, Prompt: build CRM system","timestamp":"2025-04-11T18:40:12.408Z"}
{"level":"info","message":"System analysis completed: files=699, logs=65, memory=20, security=40, uxIssues=694, flowIssues=24","timestamp":"2025-04-11T18:40:14.612Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"8b29118d-335c-4ea4-b2de-43b0418a3521","timestamp":"2025-04-11T18:40:14.636Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:576:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"8b29118d-335c-4ea4-b2de-43b0418a3521","timestamp":"2025-04-11T18:40:14.637Z"}
{"level":"info","message":"Task queued: b1f046fd-7e36-449c-99f8-39648aa5efcd","prompt":"Build CRM system","timestamp":"2025-04-11T18:48:11.806Z"}
{"level":"info","message":"Task started: b1f046fd-7e36-449c-99f8-39648aa5efcd, Prompt: Build CRM system","timestamp":"2025-04-11T18:48:11.810Z"}
{"level":"info","message":"System analysis completed: files=700, logs=65, memory=20, security=40, uxIssues=695, flowIssues=24","timestamp":"2025-04-11T18:48:13.179Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"b1f046fd-7e36-449c-99f8-39648aa5efcd","timestamp":"2025-04-11T18:48:13.198Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:576:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"b1f046fd-7e36-449c-99f8-39648aa5efcd","timestamp":"2025-04-11T18:48:13.199Z"}
{"level":"info","message":"Task queued: f22de93d-5072-40e4-bfdd-fa041041911b","prompt":"Build CRM system","timestamp":"2025-04-11T18:53:47.064Z"}
{"level":"info","message":"Task started: f22de93d-5072-40e4-bfdd-fa041041911b, Prompt: Build CRM system","timestamp":"2025-04-11T18:53:47.068Z"}
{"level":"info","message":"System analysis completed: files=701, logs=65, memory=20, security=40, uxIssues=696, flowIssues=24","timestamp":"2025-04-11T18:53:48.609Z"}
{"level":"warn","message":"No staged file to read for Login","taskId":"f22de93d-5072-40e4-bfdd-fa041041911b","timestamp":"2025-04-11T18:53:48.626Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:576:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"f22de93d-5072-40e4-bfdd-fa041041911b","timestamp":"2025-04-11T18:53:48.626Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for f22de93d-5072-40e4-bfdd-fa041041911b","newContent":{"error":"Cannot set properties of undefined (setting 'Login')"},"timestamp":"2025-04-11T18:54:18.907Z"}
{"level":"info","message":"Task queued: e76aba6f-82cd-4a51-ab96-cf7cbca29762","prompt":"Build CRM system","timestamp":"2025-04-11T20:06:51.725Z"}
{"level":"info","message":"Task started: e76aba6f-82cd-4a51-ab96-cf7cbca29762, Prompt: Build CRM system","timestamp":"2025-04-11T20:06:51.731Z"}
{"level":"info","message":"System analysis completed: files=702, logs=65, memory=20, security=40, uxIssues=697, flowIssues=24","timestamp":"2025-04-11T20:06:56.206Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"e76aba6f-82cd-4a51-ab96-cf7cbca29762","timestamp":"2025-04-11T20:06:56.234Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e76aba6f-82cd-4a51-ab96-cf7cbca29762","timestamp":"2025-04-11T20:06:56.234Z"}
{"level":"info","message":"Deleting task: e76aba6f-82cd-4a51-ab96-cf7cbca29762","timestamp":"2025-04-12T17:59:56.866Z"}
{"level":"info","message":"Task e76aba6f-82cd-4a51-ab96-cf7cbca29762 fully deleted","timestamp":"2025-04-12T17:59:56.873Z"}
{"level":"info","message":"Task queued: b8d4937a-b91d-4d66-b212-e6941f82fbd8","prompt":"Build CRM system","timestamp":"2025-04-12T18:03:30.698Z"}
{"level":"info","message":"Task started: b8d4937a-b91d-4d66-b212-e6941f82fbd8, Prompt: Build CRM system","timestamp":"2025-04-12T18:03:30.703Z"}
{"level":"info","message":"System analysis completed: files=703, logs=65, memory=20, security=40, uxIssues=698, flowIssues=24","timestamp":"2025-04-12T18:03:35.453Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"b8d4937a-b91d-4d66-b212-e6941f82fbd8","timestamp":"2025-04-12T18:03:35.485Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"b8d4937a-b91d-4d66-b212-e6941f82fbd8","timestamp":"2025-04-12T18:03:35.485Z"}
{"level":"info","message":"Task queued: 1ed4bd50-b0cb-40cb-84e1-6a1a9006ab42","prompt":"Build CRM system","timestamp":"2025-04-12T18:11:33.245Z"}
{"level":"info","message":"Task started: 1ed4bd50-b0cb-40cb-84e1-6a1a9006ab42, Prompt: Build CRM system","timestamp":"2025-04-12T18:11:33.253Z"}
{"level":"info","message":"System analysis completed: files=704, logs=65, memory=20, security=40, uxIssues=699, flowIssues=24","timestamp":"2025-04-12T18:11:37.557Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"1ed4bd50-b0cb-40cb-84e1-6a1a9006ab42","timestamp":"2025-04-12T18:11:37.596Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"1ed4bd50-b0cb-40cb-84e1-6a1a9006ab42","timestamp":"2025-04-12T18:11:37.596Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 1ed4bd50-b0cb-40cb-84e1-6a1a9006ab42","newContent":{"error":"Cannot set properties of undefined (setting 'Login')"},"timestamp":"2025-04-12T18:11:40.123Z"}
{"level":"info","message":"Task queued: f9c28031-1b02-4280-a83a-db0d8e0916f4","prompt":"Build CRM system","timestamp":"2025-04-12T18:22:57.290Z"}
{"level":"info","message":"Task started: f9c28031-1b02-4280-a83a-db0d8e0916f4, Prompt: Build CRM system","timestamp":"2025-04-12T18:22:57.297Z"}
{"level":"info","message":"System analysis completed: files=647, logs=65, memory=20, security=40, uxIssues=642, flowIssues=24","timestamp":"2025-04-12T18:23:01.363Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"f9c28031-1b02-4280-a83a-db0d8e0916f4","timestamp":"2025-04-12T18:23:01.394Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"f9c28031-1b02-4280-a83a-db0d8e0916f4","timestamp":"2025-04-12T18:23:01.394Z"}
{"level":"info","message":"Task queued: ddc0a3a1-3852-4da4-88c5-d15a5564aa24","prompt":"Build CRM system\n\n","timestamp":"2025-04-12T18:35:58.130Z"}
{"level":"info","message":"Task started: ddc0a3a1-3852-4da4-88c5-d15a5564aa24, Prompt: Build CRM system\n\n","timestamp":"2025-04-12T18:35:58.133Z"}
{"level":"info","message":"System analysis completed: files=648, logs=65, memory=20, security=40, uxIssues=643, flowIssues=24","timestamp":"2025-04-12T18:36:02.140Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"ddc0a3a1-3852-4da4-88c5-d15a5564aa24","timestamp":"2025-04-12T18:36:02.158Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"ddc0a3a1-3852-4da4-88c5-d15a5564aa24","timestamp":"2025-04-12T18:36:02.159Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system ","timestamp":"2025-04-12T21:37:39.762Z"}
{"level":"info","message":"Task queued: 6d0c773d-2c04-4ac9-afd0-31ea5b4c397e","prompt":"Build CRM system ","timestamp":"2025-04-12T21:37:39.771Z"}
{"level":"info","message":"Task started: 6d0c773d-2c04-4ac9-afd0-31ea5b4c397e, Prompt: Build CRM system ","timestamp":"2025-04-12T21:37:39.779Z"}
{"level":"info","message":"System analysis completed: files=649, logs=65, memory=20, security=40, uxIssues=644, flowIssues=24","timestamp":"2025-04-12T21:37:44.482Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"6d0c773d-2c04-4ac9-afd0-31ea5b4c397e","timestamp":"2025-04-12T21:37:44.506Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"6d0c773d-2c04-4ac9-afd0-31ea5b4c397e","timestamp":"2025-04-12T21:37:44.507Z"}
{"level":"info","message":"Task queued: f1bf5f48-1e3a-44a2-83a4-9a26c4a6f566","prompt":"Build CRM system","timestamp":"2025-04-12T21:44:47.905Z"}
{"level":"info","message":"Task started: f1bf5f48-1e3a-44a2-83a4-9a26c4a6f566, Prompt: Build CRM system","timestamp":"2025-04-12T21:44:47.913Z"}
{"level":"info","message":"System analysis completed: files=650, logs=65, memory=20, security=40, uxIssues=645, flowIssues=24","timestamp":"2025-04-12T21:44:52.253Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"f1bf5f48-1e3a-44a2-83a4-9a26c4a6f566","timestamp":"2025-04-12T21:44:52.279Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"f1bf5f48-1e3a-44a2-83a4-9a26c4a6f566","timestamp":"2025-04-12T21:44:52.280Z"}
{"level":"info","message":"Task queued: 0b807e89-0444-4716-9bff-a1d2ad007cd4","prompt":"Build CRM system","timestamp":"2025-04-12T21:47:30.377Z"}
{"level":"info","message":"Task started: 0b807e89-0444-4716-9bff-a1d2ad007cd4, Prompt: Build CRM system","timestamp":"2025-04-12T21:47:30.384Z"}
{"level":"info","message":"System analysis completed: files=651, logs=65, memory=20, security=40, uxIssues=646, flowIssues=24","timestamp":"2025-04-12T21:47:32.487Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"0b807e89-0444-4716-9bff-a1d2ad007cd4","timestamp":"2025-04-12T21:47:32.519Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"0b807e89-0444-4716-9bff-a1d2ad007cd4","timestamp":"2025-04-12T21:47:32.520Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 0b807e89-0444-4716-9bff-a1d2ad007cd4","newContent":{"error":"Cannot set properties of undefined (setting 'Login')"},"timestamp":"2025-04-12T21:47:36.054Z"}
{"level":"info","message":"Task queued: d35c4344-5116-43fd-bce2-34746f95e33c","prompt":"Build CRM system","timestamp":"2025-04-12T22:00:02.585Z"}
{"level":"info","message":"Task started: d35c4344-5116-43fd-bce2-34746f95e33c, Prompt: Build CRM system","timestamp":"2025-04-12T22:00:02.595Z"}
{"level":"info","message":"System analysis completed: files=652, logs=65, memory=20, security=40, uxIssues=647, flowIssues=24","timestamp":"2025-04-12T22:00:07.535Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"d35c4344-5116-43fd-bce2-34746f95e33c","timestamp":"2025-04-12T22:00:07.562Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"d35c4344-5116-43fd-bce2-34746f95e33c","timestamp":"2025-04-12T22:00:07.562Z"}
{"level":"info","message":"Task queued: 1714b05f-3eb4-4036-920f-5a2b870dfc0c","prompt":"Build CRM system","timestamp":"2025-04-12T22:25:23.413Z"}
{"level":"info","message":"Task started: 1714b05f-3eb4-4036-920f-5a2b870dfc0c, Prompt: Build CRM system","timestamp":"2025-04-12T22:25:23.418Z"}
{"level":"info","message":"System analysis completed: files=653, logs=65, memory=20, security=40, uxIssues=648, flowIssues=24","timestamp":"2025-04-12T22:25:28.019Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"1714b05f-3eb4-4036-920f-5a2b870dfc0c","timestamp":"2025-04-12T22:25:28.043Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:569:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"1714b05f-3eb4-4036-920f-5a2b870dfc0c","timestamp":"2025-04-12T22:25:28.043Z"}
{"level":"info","message":"Task queued: e1c34ab4-ab42-4395-af06-6e384111bb47","prompt":"Build CRM system","timestamp":"2025-04-12T23:35:12.288Z"}
{"level":"info","message":"Task started: e1c34ab4-ab42-4395-af06-6e384111bb47, Prompt: Build CRM system","timestamp":"2025-04-12T23:35:12.298Z"}
{"level":"info","message":"System analysis completed: files=712, logs=65, memory=20, security=40, uxIssues=707, flowIssues=24","timestamp":"2025-04-12T23:35:16.765Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"e1c34ab4-ab42-4395-af06-6e384111bb47","timestamp":"2025-04-12T23:35:16.807Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:681:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e1c34ab4-ab42-4395-af06-6e384111bb47","timestamp":"2025-04-12T23:35:16.808Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for e1c34ab4-ab42-4395-af06-6e384111bb47","newContent":{"error":"Cannot set properties of undefined (setting 'Login')"},"timestamp":"2025-04-12T23:35:55.986Z"}
{"level":"info","message":"Task queued: 512b28b6-1cf7-48c9-b989-13d1fc78e333","prompt":"Build CRM system","timestamp":"2025-04-12T23:53:43.840Z"}
{"level":"info","message":"Task started: 512b28b6-1cf7-48c9-b989-13d1fc78e333, Prompt: Build CRM system","timestamp":"2025-04-12T23:53:43.848Z"}
{"level":"info","message":"System analysis completed: files=713, logs=65, memory=20, security=40, uxIssues=708, flowIssues=24","timestamp":"2025-04-12T23:53:48.410Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"512b28b6-1cf7-48c9-b989-13d1fc78e333","timestamp":"2025-04-12T23:53:48.448Z"}
{"level":"error","message":"Task processing failed: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:696:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"512b28b6-1cf7-48c9-b989-13d1fc78e333","timestamp":"2025-04-12T23:53:48.448Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 512b28b6-1cf7-48c9-b989-13d1fc78e333","newContent":{"error":"Cannot set properties of undefined (setting 'Login')"},"timestamp":"2025-04-12T23:55:12.616Z"}
{"level":"info","message":"Task queued: 33e1ea55-6042-4496-a649-2e2b5c919545","prompt":"Build CRM system","timestamp":"2025-04-13T00:13:18.223Z"}
{"level":"info","message":"Task started: 33e1ea55-6042-4496-a649-2e2b5c919545, Prompt: Build CRM system","timestamp":"2025-04-13T00:13:18.232Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T00:13:22.223Z"}
{"level":"info","message":"System analysis completed: files=714, logs=65, memory=20, security=40, uxIssues=709, flowIssues=24","timestamp":"2025-04-13T00:13:23.003Z"}
{"level":"info","message":"Saved newContent for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v38.jsx","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:23.041Z"}
{"level":"info","message":"Saved newContent for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v12.jsx","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:23.066Z"}
{"level":"info","message":"Saved newContent for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v12.jsx","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:23.088Z"}
{"level":"info","message":"Saved newContent for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v37.jsx","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:23.125Z"}
{"level":"info","message":"Saved newContent for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v12.jsx","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:23.143Z"}
{"level":"warn","message":"Cannot generate Playwright test: Task not found","taskId":"Login","timestamp":"2025-04-13T00:13:24.278Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v38.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v37.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v12.jsx\"]","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:24.363Z"}
{"level":"warn","message":"No staged files for testing","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:24.365Z"}
{"level":"warn","message":"Skipping auto-test: No valid Playwright test generated","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:24.365Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v38.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v37.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v12.jsx\"]","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:25.543Z"}
{"journeyPassed":true,"level":"info","message":"Self-validation passed for task 33e1ea55-6042-4496-a649-2e2b5c919545","results":{"/":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/dashboard":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/employee-log":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/grok":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/sponsor/1":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true}},"timestamp":"2025-04-13T00:13:25.544Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v38.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v12.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v37.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v12.jsx\"], testPassed = true","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:13:25.544Z"}{"level":"info","message":"Task pending_approval: 33e1ea55-6042-4496-a649-2e2b5c919545, Staged Files: 5, Generated Files: 0, Proposed Changes: 0","timestamp":"2025-04-13T00:13:25.668Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 33e1ea55-6042-4496-a649-2e2b5c919545","newContent":{"Dashboard":"/*\n * File: Dashboard-v12.jsx\n * Path: frontend/src/pages/Dashboard-v12.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-13: Generated by Grok for task 33e1ea55-6042-4496-a649-2e2b5c919545\n * Notes:\n *   - Generated for task: 33e1ea55-6042-4496-a649-2e2b5c919545 with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v37.jsx\n * Path: frontend/src/pages/EmployeeLog-v37.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-13: Updated for task 33e1ea55-6042-4496-a649-2e2b5c919545\n * Notes:\n *   - Generated for task: 33e1ea55-6042-4496-a649-2e2b5c919545 with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v38.jsx\n * Path: frontend/src/pages/Login-v38.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-13: Updated for task 33e1ea55-6042-4496-a649-2e2b5c919545\n * Notes:\n *   - Generated for task: 33e1ea55-6042-4496-a649-2e2b5c919545 with prompt: \"Build CRM system\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"originalContent":{"Dashboard":"/*\r\n * File: Dashboard.jsx\r\n * Path: frontend/src/pages/Dashboard.jsx\r\n * Purpose: Main dashboard UI for sponsor management in IDURAR ERP CRM.\r\n * Functionality:\r\n *   - Displays sponsor summary, SponsorHub table, Calendar, and Grok analysis.\r\n *   - Manages modals for adding sponsors and events.\r\n * Structure:\r\n *   - React component with Ant Design UI, Redux state via useSponsorDashboard.\r\n * Dependencies:\r\n *   - react, antd: UI components.\r\n *   - useSponsorDashboard: Data hook for sponsors/summary.\r\n *   - SponsorHub, Calendar, EventModal, SponsorModal, PendingNotifications: Child components.\r\n *   - handlers: handleAddSponsor, handleEventAdd.\r\n *   - request/request: API utility (api).\r\n * Connections:\r\n *   - Depends on: useSponsorDashboard.js (state), handlers.js (actions).\r\n *   - Used by: AppRouter.jsx (rendered at /dashboard).\r\n * Updates:\r\n *   - 04/07/2025: Updated with latest props from useSponsorDashboard.\r\n *   - 04/07/2025 (Grok 3): No changesâ€”verified prop consistency, logs alignment.\r\n *     - Why: Delete works, but edit/add event/add sponsor failedâ€”backend fixed separately.\r\n *     - How: Confirmed handleEventAddWrapper, handleAddSponsorSubmit call api correctly.\r\n *     - Impact: Relies on backend routes added (POST/PUT).\r\n * Future Enhancements:\r\n *   - Add Grok UI integration button for inline analysis.\r\n *   - Responsive layout tweaks for mobile.\r\n * Known Issues:\r\n *   - None post-backend fixes; previously blocked by missing POST/PUT routes.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Row, Col, Typography, message, Input, Button, Card, Spin } from 'antd';\r\nimport useSponsorDashboard from './useSponsorDashboard';\r\nimport SponsorHub from './SponsorHub';\r\nimport Calendar from './Calendar';\r\nimport EventModal from './EventModal';\r\nimport SponsorModal from './SponsorModal';\r\nimport PendingNotifications from './PendingNotifications';\r\nimport { handleAddSponsor, handleEventAdd } from './handlers';\r\nimport api from '@/request/request';\r\n\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst Dashboard = () => {\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const {\r\n    filteredSponsors,\r\n    summary,\r\n    loading,\r\n    total,\r\n    addModalVisible,\r\n    setAddModalVisible,\r\n    sponsorData,\r\n    setSponsorData,\r\n    tierOptions,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    tierFilter,\r\n    setTierFilter,\r\n    currentPage,\r\n    setCurrentPage,\r\n    itemsPerPage,\r\n    refreshSponsors,\r\n  } = useSponsorDashboard();\r\n\r\n  const [eventModalVisible, setEventModalVisible] = useState(false);\r\n  const [eventData, setEventData] = useState({ sponsorId: '', title: '', date: '', description: '' });\r\n  const [grokInput, setGrokInput] = useState('');\r\n  const [grokResponse, setGrokResponse] = useState('');\r\n\r\n  const handleDateClick = (info) => {\r\n    setEventData({ ...eventData, date: info.dateStr });\r\n    setEventModalVisible(true);\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const [sponsorId, eventId] = info.event.id.split('-');\r\n    setEventData({\r\n      sponsorId,\r\n      title: info.event.title.split(' - ')[1],\r\n      date: info.event.startStr,\r\n      description: info.event.extendedProps.description,\r\n    });\r\n    setEventModalVisible(true);\r\n  };\r\n\r\n  const handleAddSponsorSubmit = async (data, form) => {\r\n    await handleAddSponsor(data, setAddModalVisible, messageApi, form);\r\n    refreshSponsors();\r\n  };\r\n\r\n  const handleEventAddWrapper = async (data) => {\r\n    await handleEventAdd(data, setEventModalVisible, messageApi);\r\n    refreshSponsors();\r\n  };\r\n\r\n  const handleGrokAnalyze = async () => {\r\n    try {\r\n      const response = await api.post('/grok/analyze', { data: grokInput });\r\n      setGrokResponse(response.data.result);\r\n      messageApi.success('Grok analysis completed!');\r\n    } catch (error) {\r\n      messageApi.error('Grok analysis failed: ' + error.message);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Spin size=\"large\" style={{ display: 'block', margin: 'auto', paddingTop: '20%' }} />;\r\n\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <div style={{ padding: '20px', width: '100%', boxSizing: 'border-box', overflowX: 'hidden' }}>\r\n        <Title level={2}>Dashboard</Title>\r\n        <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r\n          <Col span={24}>\r\n            <Card title=\"Sponsor Summary\" loading={!summary.totalSponsors && loading}>\r\n              {summary.totalSponsors ? (\r\n                <>\r\n                  <p>Total Sponsors: {summary.totalSponsors}</p>\r\n                  <p>Average Fit Score: {(summary.avgFitScore || 0).toFixed(2)}</p>\r\n                  <p>Total Estimated Cost: ${summary.totalEstCost || 0}</p>\r\n                  <p>Tier Breakdown:</p>\r\n                  <ul>\r\n                    {summary.tiers?.map((tier) => (\r\n                      <li key={tier._id}>{tier._id}: {tier.count}</li>\r\n                    ))}\r\n                  </ul>\r\n                  <p>Top Prospects:</p>\r\n                  <ul>\r\n                    {summary.topProspects?.map((prospect) => (\r\n                      <li key={prospect._id}>{prospect.name} (Fit Score: {prospect.fit_score})</li>\r\n                    ))}\r\n                  </ul>\r\n                </>\r\n              ) : (\r\n                <p>Loading summary...</p>\r\n              )}\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={12} style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n            <SponsorHub\r\n              sponsors={filteredSponsors}\r\n              loading={loading}\r\n              total={total}\r\n              searchTerm={searchTerm}\r\n              setSearchTerm={setSearchTerm}\r\n              tierFilter={tierFilter}\r\n              setTierFilter={setTierFilter}\r\n              tierOptions={tierOptions}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              itemsPerPage={itemsPerPage}\r\n              refreshSponsors={refreshSponsors}\r\n              setAddModalVisible={setAddModalVisible}\r\n              messageApi={messageApi}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <Calendar\r\n              sponsors={filteredSponsors}\r\n              loading={loading}\r\n              handleDateClick={handleDateClick}\r\n              handleEventClick={handleEventClick}\r\n            />\r\n            <div style={{ marginTop: 16 }}>\r\n              <PendingNotifications />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\r\n          <Col span={24}>\r\n            <Title level={4}>Grok Analysis</Title>\r\n            <TextArea\r\n              placeholder=\"Enter data to analyze with Grok\"\r\n              value={grokInput}\r\n              onChange={(e) => setGrokInput(e.target.value)}\r\n              rows={4}\r\n              style={{ marginBottom: 8 }}\r\n            />\r\n            <Button onClick={handleGrokAnalyze}>Analyze</Button>\r\n            {grokResponse && (\r\n              <div style={{ marginTop: 16 }}>\r\n                <strong>Grok Response:</strong>\r\n                <p>{grokResponse}</p>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <SponsorModal\r\n          mode=\"add\"\r\n          visible={addModalVisible}\r\n          setVisible={setAddModalVisible}\r\n          sponsorData={sponsorData}\r\n          setSponsorData={setSponsorData}\r\n          tierOptions={tierOptions}\r\n          handleSubmit={handleAddSponsorSubmit}\r\n          messageApi={messageApi}\r\n        />\r\n        <EventModal\r\n          eventModalVisible={eventModalVisible}\r\n          setEventModalVisible={setEventModalVisible}\r\n          eventData={eventData}\r\n          setEventData={setEventData}\r\n          filteredSponsors={filteredSponsors}\r\n          handleEventAdd={handleEventAddWrapper}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","EmployeeLog":"/*\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog.jsx\n * Purpose: Employee log page with clock-in/out and payroll management for Allur Space Console.\n * Dependencies: react, antd, react-router-dom\n * Notes:\n *   - Provides advanced clock-in/out functionality with system-wide navigation integration.\n * Change Log:\n *   - 04/09/2025: Enhanced with clock-in/out and nav button (Chat Line 8500-ish).\n */\nimport React, { useState } from 'react';\nimport { Table, Button, Input, Form, Space, Layout } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Header, Content } = Layout;\n\nconst EmployeeLog = () => {\n  const [employees, setEmployees] = useState([]);\n  const [form] = Form.useForm();\n\n  const handleAddEmployee = (values) => {\n    const newEmployee = { ...values, id: Date.now(), clockIn: null, clockOut: null };\n    setEmployees([...employees, newEmployee]);\n    form.resetFields();\n  };\n\n  const handleClockIn = (id) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? { ...emp, clockIn: new Date().toLocaleString() } : emp));\n  };\n\n  const handleClockOut = (id) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? { ...emp, clockOut: new Date().toLocaleString() } : emp));\n  };\n\n  return (\n    <Layout>\n      <Header>\n        <nav>\n          <Link to=\"/\">Home</Link> | \n          <Link to=\"/dashboard\">Dashboard</Link> | \n          <Link to=\"/sponsor/1\">Sponsor</Link> | \n          <Link to=\"/employee-log\">Employee Log</Link> | \n          <Link to=\"/settings\">Settings</Link>\n        </nav>\n      </Header>\n      <Content style={{ padding: '20px' }}>\n        <h1>Employee Log</h1>\n        <Form form={form} onFinish={handleAddEmployee}>\n          <Form.Item name=\"name\" label=\"Name\"><Input /></Form.Item>\n          <Form.Item name=\"payroll\" label=\"Payroll\"><Input type=\"number\" /></Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">Add Employee</Button>\n        </Form>\n        <Table dataSource={employees} columns={[\n          { title: 'Name', dataIndex: 'name', key: 'name' },\n          { title: 'Payroll', dataIndex: 'payroll', key: 'payroll' },\n          { title: 'Clock In', dataIndex: 'clockIn', key: 'clockIn' },\n          { title: 'Clock Out', dataIndex: 'clockOut', key: 'clockOut' },\n          {\n            title: 'Actions',\n            key: 'actions',\n            render: (_, record) => (\n              <Space>\n                <Button onClick={() => handleClockIn(record.id)} disabled={record.clockIn}>Clock In</Button>\n                <Button onClick={() => handleClockOut(record.id)} disabled={!record.clockIn || record.clockOut}>Clock Out</Button>\n              </Space>\n            )\n          }\n        ]} />\n      </Content>\n    </Layout>\n  );\n};\n\nexport default EmployeeLog;\n    ","Login":"// File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login.jsx\n/*\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration for IDURAR ERP CRM.\n * Dependencies: react, antd, serverApiConfig (axios), @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades.\n *   - 04/08/2025: Added versioning and Redux navigation (Chat Line 1800).\n *   - 04/08/2025: Fixed Ant Design message warning with App wrapper (Chat Line 1800).\n *   - 04/08/2025: Fixed redirection to /dashboard (Chat Line 1538).\n *   - 04/08/2025: Fixed API call to use apiClient (Chat Line 5600).\n *     - Why: 404 error due to wrong port (User logs, 17:46 UTC).\n *     - How: Replaced axios with apiClient, ensuring 8888 port.\n *     - Impact: Correctly targets http://localhost:8888/api/auth/login.\n *     - Test: Login with admin@idurarapp.com/admin123, expect 200.\n * Notes:\n *   - Grok Programming Machine: Monitor login attempts; log success/failure (e.g., \"Login X succeeded on Y\").\n *   - Nate & Grok: Future updates:\n *     - Add MFA support for enhanced security.\n *     - Integrate OAuth for external logins.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport apiClient from '../config/serverApiConfig'; // Use configured axios instance\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Double-check your credentials!' : 'AI Tip: Try resetting your password.');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      console.log('Login attempt:', values);\n      const res = await apiClient.post('/auth/login', { // Use apiClient\n        email: values.email,\n        password: values.password,\n      });\n      console.log('Login response:', res.data);\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n      localStorage.setItem('loginAttempts', JSON.stringify([...attempts, { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Login failed:', err);\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n      localStorage.setItem('loginAttempts', JSON.stringify([...attempts, { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"/*\n * File: Settings.jsx\n * Path: frontend/src/pages/Settings.jsx\n * Purpose: CRM settings management with Redux integration and Allur payment setup.\n * Dependencies: react, antd, react-redux, axios\n * Change Log:\n *   - 04/08/2025: Added by Grok for CRM settings and payment integration\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Card, message, Typography } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { settingsAction } from '@/redux/settings/actions';\nimport { selectSettings } from '@/redux/settings/selectors';\nimport axios from 'axios';\n\nconst { Title } = Typography;\n\nconst Settings = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { settings, isLoading } = useSelector(selectSettings);\n  const [allurStatus, setAllurStatus] = useState('Not Connected');\n\n  useEffect(() => {\n    dispatch(settingsAction.list({ entity: 'settings' }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (settings.length) {\n      form.setFieldsValue({\n        appName: settings.find(s => s.settingKey === 'appName')?.settingValue || 'Festival CRM',\n        currency: settings.find(s => s.settingKey === 'currency')?.settingValue || 'USD',\n      });\n    }\n  }, [settings, form]);\n\n  const onFinish = async (values) => {\n    try {\n      await dispatch(settingsAction.updateManySetting({\n        entity: 'settings',\n        jsonData: [\n          { settingKey: 'appName', settingValue: values.appName },\n          { settingKey: 'currency', settingValue: values.currency },\n        ]\n      })).unwrap();\n      message.success('Settings updated!');\n    } catch (err) {\n      message.error('Failed to update settings');\n    }\n  };\n\n  const connectAllur = async () => {\n    try {\n      const res = await axios.post('/api/allur/pay', { action: 'connect' });\n      setAllurStatus('Connected');\n      message.success('Allur wallet connected!');\n    } catch (err) {\n      setAllurStatus('Connection Failed');\n      message.error('Failed to connect Allur wallet');\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Title level={2}>Settings</Title>\n      <Card style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n        <Form form={form} layout=\"vertical\" onFinish={onFinish}>\n          <Form.Item name=\"appName\" label=\"App Name\" rules={[{ required: true }]}>\n            <Input placeholder=\"Festival CRM\" />\n          </Form.Item>\n          <Form.Item name=\"currency\" label=\"Currency\" rules={[{ required: true }]}>\n            <Input placeholder=\"USD\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading} style={{ borderRadius: 4 }}>\n              Save Settings\n            </Button>\n          </Form.Item>\n        </Form>\n        <div style={{ marginTop: 16 }}>\n          <h3>Allur Payment Integration</h3>\n          <p>Status: {allurStatus}</p>\n          <Button onClick={connectAllur} style={{ borderRadius: 4 }}>Connect Allur Wallet</Button>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default Settings;\n","SponsorProfile":"/*\n * File: SponsorProfile.jsx\n * Path: frontend/src/pages/SponsorProfile.jsx\n * Purpose: Displays a single sponsor's profile with details and comments\n * Dependencies: antd, request/request\n * Change Log:\n *  - 04/06/2025: Created by Grok (v18)\n *  - 04/10/2025: Fixed generation errors (Grok 3)\n */\nimport React, { useState, useEffect } from 'react';\nimport { Card, Descriptions, Button, Input, List, Typography } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport api from '@/request/request';\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\nconst SponsorProfile = () => {\n  const [sponsor, setSponsor] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSponsor = async () => {\n      try {\n        const res = await api.get('/api/sponsors/1');\n        setSponsor(res.data || { name: 'Default Sponsor', fit_score: 50, assignedTo: { name: 'Unassigned' } });\n        setComments(res.data?.comments || []);\n      } catch (err) {\n        console.error('Fetch error:', err);\n        setSponsor({ name: 'Default Sponsor', fit_score: 50, assignedTo: { name: 'Unassigned' } });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSponsor();\n  }, []);\n\n  const handleComment = async () => {\n    if (!newComment.trim()) return;\n    const updatedComments = [...comments, { text: newComment, date: new Date(), author: 'User' }];\n    try {\n      await api.put('/api/sponsors/1', { comments: updatedComments });\n      setComments(updatedComments);\n    } catch (err) {\n      console.error('Comment error:', err);\n      setComments(updatedComments.map(c => c.author === 'User' ? { ...c, author: 'User (Offline)' } : c));\n    }\n    setNewComment('');\n  };\n\n  if (loading) return <div>Loading sponsor profile...</div>;\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <Title level={2}>{sponsor.name}</Title>\n      <Card>\n        <Descriptions bordered>\n          <Descriptions.Item label=\"Tier\">{sponsor.tier_level || 'N/A'}</Descriptions.Item>\n          <Descriptions.Item label=\"Fit Score\">{sponsor.fit_score}%</Descriptions.Item>\n          <Descriptions.Item label=\"Assigned To\">{sponsor.assignedTo.name}</Descriptions.Item>\n        </Descriptions>\n      </Card>\n      <Card title=\"Comments\" style={{ marginTop: 24 }}>\n        <List\n          dataSource={comments}\n          renderItem={item => (\n            <List.Item>\n              <Text>{item.text} - <i>{item.author}, {new Date(item.date).toLocaleString()}</i></Text>\n            </List.Item>\n          )}\n        />\n        <TextArea\n          value={newComment}\n          onChange={e => setNewComment(e.target.value)}\n          placeholder=\"Add a comment...\"\n          rows={4}\n          style={{ marginTop: 16 }}\n        />\n        <Button\n          type=\"primary\"\n          icon={<SendOutlined />}\n          onClick={handleComment}\n          style={{ marginTop: 8 }}\n        >\n          Post Comment\n        </Button>\n      </Card>\n    </div>\n  );\n};\n\nexport default SponsorProfile;"},"timestamp":"2025-04-13T00:13:36.367Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:18:12.918Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:18:12.922Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task 33e1ea55-6042-4496-a649-2e2b5c919545","stagedFiles":[],"timestamp":"2025-04-13T00:18:12.923Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:05.826Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:05.881Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:05.942Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:05.993Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:10.466Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:10.525Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:10.635Z"}
{"dir":"C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages","level":"error","message":"File listing error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:10.676Z"}
{"level":"error","message":"Clear tasks error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:17.671Z"}
{"level":"error","message":"Clear tasks error: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.","stack":"ValidationError: Memory validation failed: outcome: Path `outcome` is required., prompt: Path `prompt` is required., taskId: Path `taskId` is required.\n    at Document.invalidate (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3329:32)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\document.js:3090:17\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongoose\\lib\\schemaType.js:1407:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)","timestamp":"2025-04-13T00:47:22.157Z"}
{"level":"warn","message":"Task not found: 33e1ea55-6042-4496-a649-2e2b5c919545","timestamp":"2025-04-13T00:47:25.760Z"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-13T15:18:46.265Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM System","timestamp":"2025-04-13T15:18:46.266Z"}
{"level":"info","message":"Task queued: a068835a-71fe-4c8e-8ca1-30f99c031718","prompt":"Build CRM System","timestamp":"2025-04-13T15:18:46.276Z"}
{"level":"info","message":"Task started: a068835a-71fe-4c8e-8ca1-30f99c031718, Prompt: Build CRM System","timestamp":"2025-04-13T15:18:46.285Z"}
{"level":"info","message":"System analysis completed: files=719, logs=65, memory=20, security=40, uxIssues=714, flowIssues=24","timestamp":"2025-04-13T15:18:51.711Z"}
{"level":"info","message":"Saved newContent for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v39.jsx","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:51.748Z"}
{"level":"info","message":"Saved newContent for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v13.jsx","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:51.772Z"}
{"level":"info","message":"Saved newContent for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v13.jsx","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:51.796Z"}
{"level":"info","message":"Saved newContent for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v38.jsx","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:51.836Z"}
{"level":"info","message":"Saved newContent for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v13.jsx","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:51.855Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v39.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v38.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v13.jsx\"]","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:52.996Z"}
{"level":"warn","message":"No staged files for testing","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:52.998Z"}
{"level":"warn","message":"Skipping auto-test: No valid Playwright test generated","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:52.999Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v39.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v38.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v13.jsx\"]","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:54.143Z"}
{"journeyPassed":true,"level":"info","message":"Self-validation passed for task a068835a-71fe-4c8e-8ca1-30f99c031718","results":{"/":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/dashboard":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/employee-log":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/grok":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/sponsor/1":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true}},"timestamp":"2025-04-13T15:18:54.143Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v39.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v13.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v38.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v13.jsx\"], testPassed = true","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:18:54.144Z"}{"level":"info","message":"Task pending_approval: a068835a-71fe-4c8e-8ca1-30f99c031718, Staged Files: 5, Generated Files: 0, Proposed Changes: 0","timestamp":"2025-04-13T15:18:54.255Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for a068835a-71fe-4c8e-8ca1-30f99c031718","newContent":{"Dashboard":"/*\n * File: Dashboard-v13.jsx\n * Path: frontend/src/pages/Dashboard-v13.jsx\n * Purpose: Modern CRM dashboard with overview and navigation (uses site-structure.json for log awareness).\n * Dependencies: react, antd, react-router-dom\n * Change Log:\n *   - 2025-04-13: Generated by Grok for task a068835a-71fe-4c8e-8ca1-30f99c031718\n * Notes:\n *   - Generated for task: a068835a-71fe-4c8e-8ca1-30f99c031718 with prompt: \"Build CRM System\".\n *   - Prior Purpose: N/A\n *   - Goals: Provide CRM overview, navigation\n *   - Enhancements: Modern layout, enhanced UI, AI insights\n *   - Future: Add analytics, real-time updates\n */\nimport React from 'react';\nimport { Card, Row, Col, Button } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Card title=\"CRM Dashboard\" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n            <p>Welcome to your CRM dashboard!</p>\n            <Button onClick={() => navigate('/employee-log')}>Employee Log</Button>\n            <Button onClick={() => navigate('/sponsor/1')} style={{ marginLeft: 8 }}>Sponsor Profile</Button>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","EmployeeLog":"/*\n * File: EmployeeLog-v38.jsx\n * Path: frontend/src/pages/EmployeeLog-v38.jsx\n * Purpose: Employee log in/out system with accounting and AI predictions.\n * Dependencies: react, antd, moment, @tensorflow/tfjs\n * Change Log:\n *   - 04/07/2025: Generated by Grok with AI\n *   - 2025-04-13: Updated for task a068835a-71fe-4c8e-8ca1-30f99c031718\n * Notes:\n *   - Generated for task: a068835a-71fe-4c8e-8ca1-30f99c031718 with prompt: \"Build CRM System\".\n *   - Prior Purpose: N/A\n *   - Goals: Track employee time, integrate with CRM\n *   - Enhancements: Hours tracking, AI predictions, modern UI\n *   - Future: Sync with EmployeeDash.jsx, add API storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { Button, Table, message } from 'antd';\nimport moment from 'moment';\nimport * as tf from '@tensorflow/tfjs';\n\nconst EmployeeLog = () => {\n  const [logs, setLogs] = useState([]);\n  const [predictedHours, setPredictedHours] = useState(0);\n\n  const logEvent = (type) => {\n    const lastLog = logs[logs.length - 1];\n    const log = {\n      time: moment().format('YYYY-MM-DD HH:mm:ss'),\n      type,\n      \n      \n    };\n    setLogs([...logs, log]);\n    message.success(`${type} recorded`);\n  };\n\n  useEffect(() => {\n    if (logs.length > 2) {\n      const hours = logs.filter(l => l.hours > 0).map(l => l.hours);\n      if (hours.length > 1) {\n        const xs = tf.tensor2d(hours.map((_, i) => [i]), [hours.length, 1]);\n        const ys = tf.tensor2d(hours.map(h => [h]), [hours.length, 1]);\n        const model = tf.sequential();\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n        model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n        model.fit(xs, ys, { epochs: 10 }).then(() => {\n          const next = model.predict(tf.tensor2d([[hours.length]], [1, 1]));\n          setPredictedHours(next.dataSync()[0]);\n        });\n      }\n    }\n  }, [logs]);\n\n  const columns = [\n    { title: 'Time', dataIndex: 'time', key: 'time' },\n    { title: 'Type', dataIndex: 'type', key: 'type' },\n    \n    \n    { title: 'Predicted Next Hours', render: () => predictedHours.toFixed(2) }\n  ];\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <h1>Employee Log</h1>\n      <Button onClick={() => logEvent('login')} style={{ marginRight: 8 }}>Log In</Button>\n      <Button onClick={() => logEvent('logout')}>Log Out</Button>\n      <Table dataSource={logs} columns={columns} rowKey=\"time\" style={{ marginTop: 16 }} />\n    </div>\n  );\n};\n\nexport default EmployeeLog;\n","Login":"/*\n * File: Login-v39.jsx\n * Path: frontend/src/pages/Login-v39.jsx\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration.\n * Dependencies: react, antd, axios, @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades\n *   - 2025-04-13: Updated for task a068835a-71fe-4c8e-8ca1-30f99c031718\n * Notes:\n *   - Generated for task: a068835a-71fe-4c8e-8ca1-30f99c031718 with prompt: \"Build CRM System\".\n *   - Prior Purpose: N/A\n *   - Goals: Secure CRM access, improve UX\n *   - Enhancements: AI login analysis, Redux navigation, modern UI, enhanced AI\n *   - Future: Add MFA, OAuth\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Check credentials!' : 'AI Tip: Reset password?');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      const res = await axios.post('/api/auth/login', { email: values.email, password: values.password });\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      localStorage.setItem('loginAttempts', JSON.stringify([...JSON.parse(localStorage.getItem('loginAttempts') || '[]'), { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"","SponsorProfile":""},"originalContent":{"Dashboard":"/*\r\n * File: Dashboard.jsx\r\n * Path: frontend/src/pages/Dashboard.jsx\r\n * Purpose: Main dashboard UI for sponsor management in IDURAR ERP CRM.\r\n * Functionality:\r\n *   - Displays sponsor summary, SponsorHub table, Calendar, and Grok analysis.\r\n *   - Manages modals for adding sponsors and events.\r\n * Structure:\r\n *   - React component with Ant Design UI, Redux state via useSponsorDashboard.\r\n * Dependencies:\r\n *   - react, antd: UI components.\r\n *   - useSponsorDashboard: Data hook for sponsors/summary.\r\n *   - SponsorHub, Calendar, EventModal, SponsorModal, PendingNotifications: Child components.\r\n *   - handlers: handleAddSponsor, handleEventAdd.\r\n *   - request/request: API utility (api).\r\n * Connections:\r\n *   - Depends on: useSponsorDashboard.js (state), handlers.js (actions).\r\n *   - Used by: AppRouter.jsx (rendered at /dashboard).\r\n * Updates:\r\n *   - 04/07/2025: Updated with latest props from useSponsorDashboard.\r\n *   - 04/07/2025 (Grok 3): No changesâ€”verified prop consistency, logs alignment.\r\n *     - Why: Delete works, but edit/add event/add sponsor failedâ€”backend fixed separately.\r\n *     - How: Confirmed handleEventAddWrapper, handleAddSponsorSubmit call api correctly.\r\n *     - Impact: Relies on backend routes added (POST/PUT).\r\n * Future Enhancements:\r\n *   - Add Grok UI integration button for inline analysis.\r\n *   - Responsive layout tweaks for mobile.\r\n * Known Issues:\r\n *   - None post-backend fixes; previously blocked by missing POST/PUT routes.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Row, Col, Typography, message, Input, Button, Card, Spin } from 'antd';\r\nimport useSponsorDashboard from './useSponsorDashboard';\r\nimport SponsorHub from './SponsorHub';\r\nimport Calendar from './Calendar';\r\nimport EventModal from './EventModal';\r\nimport SponsorModal from './SponsorModal';\r\nimport PendingNotifications from './PendingNotifications';\r\nimport { handleAddSponsor, handleEventAdd } from './handlers';\r\nimport api from '@/request/request';\r\n\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst Dashboard = () => {\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const {\r\n    filteredSponsors,\r\n    summary,\r\n    loading,\r\n    total,\r\n    addModalVisible,\r\n    setAddModalVisible,\r\n    sponsorData,\r\n    setSponsorData,\r\n    tierOptions,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    tierFilter,\r\n    setTierFilter,\r\n    currentPage,\r\n    setCurrentPage,\r\n    itemsPerPage,\r\n    refreshSponsors,\r\n  } = useSponsorDashboard();\r\n\r\n  const [eventModalVisible, setEventModalVisible] = useState(false);\r\n  const [eventData, setEventData] = useState({ sponsorId: '', title: '', date: '', description: '' });\r\n  const [grokInput, setGrokInput] = useState('');\r\n  const [grokResponse, setGrokResponse] = useState('');\r\n\r\n  const handleDateClick = (info) => {\r\n    setEventData({ ...eventData, date: info.dateStr });\r\n    setEventModalVisible(true);\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const [sponsorId, eventId] = info.event.id.split('-');\r\n    setEventData({\r\n      sponsorId,\r\n      title: info.event.title.split(' - ')[1],\r\n      date: info.event.startStr,\r\n      description: info.event.extendedProps.description,\r\n    });\r\n    setEventModalVisible(true);\r\n  };\r\n\r\n  const handleAddSponsorSubmit = async (data, form) => {\r\n    await handleAddSponsor(data, setAddModalVisible, messageApi, form);\r\n    refreshSponsors();\r\n  };\r\n\r\n  const handleEventAddWrapper = async (data) => {\r\n    await handleEventAdd(data, setEventModalVisible, messageApi);\r\n    refreshSponsors();\r\n  };\r\n\r\n  const handleGrokAnalyze = async () => {\r\n    try {\r\n      const response = await api.post('/grok/analyze', { data: grokInput });\r\n      setGrokResponse(response.data.result);\r\n      messageApi.success('Grok analysis completed!');\r\n    } catch (error) {\r\n      messageApi.error('Grok analysis failed: ' + error.message);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Spin size=\"large\" style={{ display: 'block', margin: 'auto', paddingTop: '20%' }} />;\r\n\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <div style={{ padding: '20px', width: '100%', boxSizing: 'border-box', overflowX: 'hidden' }}>\r\n        <Title level={2}>Dashboard</Title>\r\n        <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r\n          <Col span={24}>\r\n            <Card title=\"Sponsor Summary\" loading={!summary.totalSponsors && loading}>\r\n              {summary.totalSponsors ? (\r\n                <>\r\n                  <p>Total Sponsors: {summary.totalSponsors}</p>\r\n                  <p>Average Fit Score: {(summary.avgFitScore || 0).toFixed(2)}</p>\r\n                  <p>Total Estimated Cost: ${summary.totalEstCost || 0}</p>\r\n                  <p>Tier Breakdown:</p>\r\n                  <ul>\r\n                    {summary.tiers?.map((tier) => (\r\n                      <li key={tier._id}>{tier._id}: {tier.count}</li>\r\n                    ))}\r\n                  </ul>\r\n                  <p>Top Prospects:</p>\r\n                  <ul>\r\n                    {summary.topProspects?.map((prospect) => (\r\n                      <li key={prospect._id}>{prospect.name} (Fit Score: {prospect.fit_score})</li>\r\n                    ))}\r\n                  </ul>\r\n                </>\r\n              ) : (\r\n                <p>Loading summary...</p>\r\n              )}\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={12} style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n            <SponsorHub\r\n              sponsors={filteredSponsors}\r\n              loading={loading}\r\n              total={total}\r\n              searchTerm={searchTerm}\r\n              setSearchTerm={setSearchTerm}\r\n              tierFilter={tierFilter}\r\n              setTierFilter={setTierFilter}\r\n              tierOptions={tierOptions}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              itemsPerPage={itemsPerPage}\r\n              refreshSponsors={refreshSponsors}\r\n              setAddModalVisible={setAddModalVisible}\r\n              messageApi={messageApi}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <Calendar\r\n              sponsors={filteredSponsors}\r\n              loading={loading}\r\n              handleDateClick={handleDateClick}\r\n              handleEventClick={handleEventClick}\r\n            />\r\n            <div style={{ marginTop: 16 }}>\r\n              <PendingNotifications />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\r\n          <Col span={24}>\r\n            <Title level={4}>Grok Analysis</Title>\r\n            <TextArea\r\n              placeholder=\"Enter data to analyze with Grok\"\r\n              value={grokInput}\r\n              onChange={(e) => setGrokInput(e.target.value)}\r\n              rows={4}\r\n              style={{ marginBottom: 8 }}\r\n            />\r\n            <Button onClick={handleGrokAnalyze}>Analyze</Button>\r\n            {grokResponse && (\r\n              <div style={{ marginTop: 16 }}>\r\n                <strong>Grok Response:</strong>\r\n                <p>{grokResponse}</p>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <SponsorModal\r\n          mode=\"add\"\r\n          visible={addModalVisible}\r\n          setVisible={setAddModalVisible}\r\n          sponsorData={sponsorData}\r\n          setSponsorData={setSponsorData}\r\n          tierOptions={tierOptions}\r\n          handleSubmit={handleAddSponsorSubmit}\r\n          messageApi={messageApi}\r\n        />\r\n        <EventModal\r\n          eventModalVisible={eventModalVisible}\r\n          setEventModalVisible={setEventModalVisible}\r\n          eventData={eventData}\r\n          setEventData={setEventData}\r\n          filteredSponsors={filteredSponsors}\r\n          handleEventAdd={handleEventAddWrapper}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","EmployeeLog":"/*\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog.jsx\n * Purpose: Employee log page with clock-in/out and payroll management for Allur Space Console.\n * Dependencies: react, antd, react-router-dom\n * Notes:\n *   - Provides advanced clock-in/out functionality with system-wide navigation integration.\n * Change Log:\n *   - 04/09/2025: Enhanced with clock-in/out and nav button (Chat Line 8500-ish).\n */\nimport React, { useState } from 'react';\nimport { Table, Button, Input, Form, Space, Layout } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Header, Content } = Layout;\n\nconst EmployeeLog = () => {\n  const [employees, setEmployees] = useState([]);\n  const [form] = Form.useForm();\n\n  const handleAddEmployee = (values) => {\n    const newEmployee = { ...values, id: Date.now(), clockIn: null, clockOut: null };\n    setEmployees([...employees, newEmployee]);\n    form.resetFields();\n  };\n\n  const handleClockIn = (id) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? { ...emp, clockIn: new Date().toLocaleString() } : emp));\n  };\n\n  const handleClockOut = (id) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? { ...emp, clockOut: new Date().toLocaleString() } : emp));\n  };\n\n  return (\n    <Layout>\n      <Header>\n        <nav>\n          <Link to=\"/\">Home</Link> | \n          <Link to=\"/dashboard\">Dashboard</Link> | \n          <Link to=\"/sponsor/1\">Sponsor</Link> | \n          <Link to=\"/employee-log\">Employee Log</Link> | \n          <Link to=\"/settings\">Settings</Link>\n        </nav>\n      </Header>\n      <Content style={{ padding: '20px' }}>\n        <h1>Employee Log</h1>\n        <Form form={form} onFinish={handleAddEmployee}>\n          <Form.Item name=\"name\" label=\"Name\"><Input /></Form.Item>\n          <Form.Item name=\"payroll\" label=\"Payroll\"><Input type=\"number\" /></Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">Add Employee</Button>\n        </Form>\n        <Table dataSource={employees} columns={[\n          { title: 'Name', dataIndex: 'name', key: 'name' },\n          { title: 'Payroll', dataIndex: 'payroll', key: 'payroll' },\n          { title: 'Clock In', dataIndex: 'clockIn', key: 'clockIn' },\n          { title: 'Clock Out', dataIndex: 'clockOut', key: 'clockOut' },\n          {\n            title: 'Actions',\n            key: 'actions',\n            render: (_, record) => (\n              <Space>\n                <Button onClick={() => handleClockIn(record.id)} disabled={record.clockIn}>Clock In</Button>\n                <Button onClick={() => handleClockOut(record.id)} disabled={!record.clockIn || record.clockOut}>Clock Out</Button>\n              </Space>\n            )\n          }\n        ]} />\n      </Content>\n    </Layout>\n  );\n};\n\nexport default EmployeeLog;\n    ","Login":"// File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login.jsx\n/*\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration for IDURAR ERP CRM.\n * Dependencies: react, antd, serverApiConfig (axios), @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades.\n *   - 04/08/2025: Added versioning and Redux navigation (Chat Line 1800).\n *   - 04/08/2025: Fixed Ant Design message warning with App wrapper (Chat Line 1800).\n *   - 04/08/2025: Fixed redirection to /dashboard (Chat Line 1538).\n *   - 04/08/2025: Fixed API call to use apiClient (Chat Line 5600).\n *     - Why: 404 error due to wrong port (User logs, 17:46 UTC).\n *     - How: Replaced axios with apiClient, ensuring 8888 port.\n *     - Impact: Correctly targets http://localhost:8888/api/auth/login.\n *     - Test: Login with admin@idurarapp.com/admin123, expect 200.\n * Notes:\n *   - Grok Programming Machine: Monitor login attempts; log success/failure (e.g., \"Login X succeeded on Y\").\n *   - Nate & Grok: Future updates:\n *     - Add MFA support for enhanced security.\n *     - Integrate OAuth for external logins.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport apiClient from '../config/serverApiConfig'; // Use configured axios instance\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Double-check your credentials!' : 'AI Tip: Try resetting your password.');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      console.log('Login attempt:', values);\n      const res = await apiClient.post('/auth/login', { // Use apiClient\n        email: values.email,\n        password: values.password,\n      });\n      console.log('Login response:', res.data);\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n      localStorage.setItem('loginAttempts', JSON.stringify([...attempts, { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Login failed:', err);\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n      localStorage.setItem('loginAttempts', JSON.stringify([...attempts, { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"/*\n * File: Settings.jsx\n * Path: frontend/src/pages/Settings.jsx\n * Purpose: CRM settings management with Redux integration and Allur payment setup.\n * Dependencies: react, antd, react-redux, axios\n * Change Log:\n *   - 04/08/2025: Added by Grok for CRM settings and payment integration\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Card, message, Typography } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { settingsAction } from '@/redux/settings/actions';\nimport { selectSettings } from '@/redux/settings/selectors';\nimport axios from 'axios';\n\nconst { Title } = Typography;\n\nconst Settings = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { settings, isLoading } = useSelector(selectSettings);\n  const [allurStatus, setAllurStatus] = useState('Not Connected');\n\n  useEffect(() => {\n    dispatch(settingsAction.list({ entity: 'settings' }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (settings.length) {\n      form.setFieldsValue({\n        appName: settings.find(s => s.settingKey === 'appName')?.settingValue || 'Festival CRM',\n        currency: settings.find(s => s.settingKey === 'currency')?.settingValue || 'USD',\n      });\n    }\n  }, [settings, form]);\n\n  const onFinish = async (values) => {\n    try {\n      await dispatch(settingsAction.updateManySetting({\n        entity: 'settings',\n        jsonData: [\n          { settingKey: 'appName', settingValue: values.appName },\n          { settingKey: 'currency', settingValue: values.currency },\n        ]\n      })).unwrap();\n      message.success('Settings updated!');\n    } catch (err) {\n      message.error('Failed to update settings');\n    }\n  };\n\n  const connectAllur = async () => {\n    try {\n      const res = await axios.post('/api/allur/pay', { action: 'connect' });\n      setAllurStatus('Connected');\n      message.success('Allur wallet connected!');\n    } catch (err) {\n      setAllurStatus('Connection Failed');\n      message.error('Failed to connect Allur wallet');\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Title level={2}>Settings</Title>\n      <Card style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n        <Form form={form} layout=\"vertical\" onFinish={onFinish}>\n          <Form.Item name=\"appName\" label=\"App Name\" rules={[{ required: true }]}>\n            <Input placeholder=\"Festival CRM\" />\n          </Form.Item>\n          <Form.Item name=\"currency\" label=\"Currency\" rules={[{ required: true }]}>\n            <Input placeholder=\"USD\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading} style={{ borderRadius: 4 }}>\n              Save Settings\n            </Button>\n          </Form.Item>\n        </Form>\n        <div style={{ marginTop: 16 }}>\n          <h3>Allur Payment Integration</h3>\n          <p>Status: {allurStatus}</p>\n          <Button onClick={connectAllur} style={{ borderRadius: 4 }}>Connect Allur Wallet</Button>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default Settings;\n","SponsorProfile":"/*\n * File: SponsorProfile.jsx\n * Path: frontend/src/pages/SponsorProfile.jsx\n * Purpose: Displays a single sponsor's profile with details and comments\n * Dependencies: antd, request/request\n * Change Log:\n *  - 04/06/2025: Created by Grok (v18)\n *  - 04/10/2025: Fixed generation errors (Grok 3)\n */\nimport React, { useState, useEffect } from 'react';\nimport { Card, Descriptions, Button, Input, List, Typography } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport api from '@/request/request';\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\nconst SponsorProfile = () => {\n  const [sponsor, setSponsor] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSponsor = async () => {\n      try {\n        const res = await api.get('/api/sponsors/1');\n        setSponsor(res.data || { name: 'Default Sponsor', fit_score: 50, assignedTo: { name: 'Unassigned' } });\n        setComments(res.data?.comments || []);\n      } catch (err) {\n        console.error('Fetch error:', err);\n        setSponsor({ name: 'Default Sponsor', fit_score: 50, assignedTo: { name: 'Unassigned' } });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSponsor();\n  }, []);\n\n  const handleComment = async () => {\n    if (!newComment.trim()) return;\n    const updatedComments = [...comments, { text: newComment, date: new Date(), author: 'User' }];\n    try {\n      await api.put('/api/sponsors/1', { comments: updatedComments });\n      setComments(updatedComments);\n    } catch (err) {\n      console.error('Comment error:', err);\n      setComments(updatedComments.map(c => c.author === 'User' ? { ...c, author: 'User (Offline)' } : c));\n    }\n    setNewComment('');\n  };\n\n  if (loading) return <div>Loading sponsor profile...</div>;\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <Title level={2}>{sponsor.name}</Title>\n      <Card>\n        <Descriptions bordered>\n          <Descriptions.Item label=\"Tier\">{sponsor.tier_level || 'N/A'}</Descriptions.Item>\n          <Descriptions.Item label=\"Fit Score\">{sponsor.fit_score}%</Descriptions.Item>\n          <Descriptions.Item label=\"Assigned To\">{sponsor.assignedTo.name}</Descriptions.Item>\n        </Descriptions>\n      </Card>\n      <Card title=\"Comments\" style={{ marginTop: 24 }}>\n        <List\n          dataSource={comments}\n          renderItem={item => (\n            <List.Item>\n              <Text>{item.text} - <i>{item.author}, {new Date(item.date).toLocaleString()}</i></Text>\n            </List.Item>\n          )}\n        />\n        <TextArea\n          value={newComment}\n          onChange={e => setNewComment(e.target.value)}\n          placeholder=\"Add a comment...\"\n          rows={4}\n          style={{ marginTop: 16 }}\n        />\n        <Button\n          type=\"primary\"\n          icon={<SendOutlined />}\n          onClick={handleComment}\n          style={{ marginTop: 8 }}\n        >\n          Post Comment\n        </Button>\n      </Card>\n    </div>\n  );\n};\n\nexport default SponsorProfile;"},"timestamp":"2025-04-13T15:18:59.740Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:19:03.440Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:19:03.443Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task a068835a-71fe-4c8e-8ca1-30f99c031718","stagedFiles":[],"timestamp":"2025-04-13T15:19:03.443Z"}
{"level":"info","message":"Rollback completed for task a068835a-71fe-4c8e-8ca1-30f99c031718","timestamp":"2025-04-13T15:54:45.753Z"}
{"level":"info","message":"Task queued: 5aaeacdd-de87-4754-a16d-65ad1c3f96a1","prompt":"Build CRM system","timestamp":"2025-04-13T15:55:22.564Z"}
{"level":"info","message":"Task started: 5aaeacdd-de87-4754-a16d-65ad1c3f96a1, Prompt: Build CRM system","timestamp":"2025-04-13T15:55:22.573Z"}
{"level":"info","message":"System analysis completed: files=724, logs=65, memory=20, security=40, uxIssues=719, flowIssues=24","timestamp":"2025-04-13T15:55:27.014Z"}
{"level":"info","message":"Saved newContent for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v40.jsx","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:27.044Z"}
{"level":"info","message":"Saved newContent for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v14.jsx","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:27.066Z"}
{"level":"info","message":"Saved newContent for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v14.jsx","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:27.083Z"}
{"level":"info","message":"Saved newContent for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v39.jsx","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:27.117Z"}
{"level":"info","message":"Saved newContent for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v14.jsx","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:27.134Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v40.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v39.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v14.jsx\"]","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:28.197Z"}
{"level":"warn","message":"No staged files for testing","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:28.200Z"}
{"level":"warn","message":"Skipping auto-test: No valid Playwright test generated","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:28.201Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v40.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v39.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v14.jsx\"]","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:29.213Z"}
{"journeyPassed":true,"level":"info","message":"Self-validation passed for task 5aaeacdd-de87-4754-a16d-65ad1c3f96a1","results":{"/":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/dashboard":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/employee-log":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/grok":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/sponsor/1":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true}},"timestamp":"2025-04-13T15:55:29.214Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v40.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v14.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v39.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v14.jsx\"], testPassed = true","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:29.214Z"}{"level":"info","message":"Task pending_approval: 5aaeacdd-de87-4754-a16d-65ad1c3f96a1, Staged Files: 5, Generated Files: 0, Proposed Changes: 0","timestamp":"2025-04-13T15:55:29.339Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:36.471Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"5aaeacdd-de87-4754-a16d-65ad1c3f96a1","timestamp":"2025-04-13T15:55:36.475Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task 5aaeacdd-de87-4754-a16d-65ad1c3f96a1","stagedFiles":[],"timestamp":"2025-04-13T15:55:36.475Z"}
{"level":"info","message":"Task queued: e1fe58e1-fb34-461d-9c0b-7b92c17216a3","prompt":"Build CRM system","timestamp":"2025-04-13T16:05:15.189Z"}
{"level":"info","message":"Task started: e1fe58e1-fb34-461d-9c0b-7b92c17216a3, Prompt: Build CRM system","timestamp":"2025-04-13T16:05:15.196Z"}
{"level":"info","message":"System analysis completed: files=729, logs=65, memory=20, security=40, uxIssues=724, flowIssues=24","timestamp":"2025-04-13T16:05:19.657Z"}
{"level":"info","message":"Saved newContent for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v41.jsx","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:19.686Z"}
{"level":"info","message":"Saved newContent for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v15.jsx","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:19.712Z"}
{"level":"info","message":"Saved newContent for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v15.jsx","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:19.728Z"}
{"level":"info","message":"Saved newContent for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v40.jsx","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:19.767Z"}
{"level":"info","message":"Saved newContent for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v15.jsx","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:19.784Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v41.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v40.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v15.jsx\"]","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:20.859Z"}
{"level":"warn","message":"No staged files for testing","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:20.862Z"}
{"level":"warn","message":"Skipping auto-test: No valid Playwright test generated","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:20.863Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v41.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v40.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v15.jsx\"]","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:21.920Z"}
{"journeyPassed":true,"level":"info","message":"Self-validation passed for task e1fe58e1-fb34-461d-9c0b-7b92c17216a3","results":{"/":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/dashboard":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/employee-log":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/grok":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/settings":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true},"/sponsor/1":{"status":200,"title":"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote","working":true}},"timestamp":"2025-04-13T16:05:21.920Z"}
{"level":"debug","message":"Post-validation: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v41.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v15.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v40.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v15.jsx\"], testPassed = true","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:21.921Z"}{"level":"info","message":"Task pending_approval: e1fe58e1-fb34-461d-9c0b-7b92c17216a3, Staged Files: 5, Generated Files: 0, Proposed Changes: 0","timestamp":"2025-04-13T16:05:22.042Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:24.848Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-13T16:05:24.849Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:24.849Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"e1fe58e1-fb34-461d-9c0b-7b92c17216a3","timestamp":"2025-04-13T16:05:24.853Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task e1fe58e1-fb34-461d-9c0b-7b92c17216a3","stagedFiles":[],"timestamp":"2025-04-13T16:05:24.853Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-13T16:05:35.698Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-13T16:05:35.699Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.444Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:05:40.444Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.446Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:05:40.447Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.449Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:05:40.450Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:05:40.465Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.503Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:05:40.503Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:05:40.517Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.538Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:05:40.538Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.554Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:05:40.555Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.628Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:05:40.629Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.633Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:05:40.633Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.637Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:05:40.637Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:05:40.669Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.676Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:05:40.677Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.685Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:05:40.685Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:05:40.688Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:40.709Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:05:40.710Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:48.229Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-13T16:05:48.229Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:05:59.354Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-13T16:05:59.355Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-13T16:05:59.355Z"}
{"level":"info","message":"Task queued: eb960f56-8263-45d1-8a96-97040d8ea3a1","prompt":"Build CRM system","timestamp":"2025-04-13T16:05:59.370Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T16:05:59.376Z"}
{"level":"info","message":"Task started: eb960f56-8263-45d1-8a96-97040d8ea3a1, Prompt: Build CRM system","timestamp":"2025-04-13T16:05:59.382Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:06:00.560Z"}
{"level":"info","message":"System analysis completed: files=734, logs=65, memory=20, security=40, uxIssues=729, flowIssues=24","timestamp":"2025-04-13T16:06:01.322Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-13T16:06:01.323Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T16:06:01.324Z"}
{"level":"info","message":"Saved newContent for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v42.jsx","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:01.377Z"}
{"level":"info","message":"Saved newContent for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v16.jsx","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:01.401Z"}
{"level":"info","message":"Saved newContent for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v16.jsx","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:01.426Z"}
{"level":"info","message":"Saved newContent for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v41.jsx","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:01.467Z"}
{"level":"info","message":"Saved newContent for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v16.jsx","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:01.487Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","taskId":"Login","timestamp":"2025-04-13T16:06:02.492Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:06:02.566Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v42.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v16.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v16.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v41.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v16.jsx\"]","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:02.569Z"}
{"level":"warn","message":"No staged files available for testing after refresh","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:02.572Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:06:03.658Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = undefined","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:03.658Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at selfValidateTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:580:63)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1079:26)","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:03.659Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:06:09.052Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-13T16:06:09.053Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:09.053Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"eb960f56-8263-45d1-8a96-97040d8ea3a1","timestamp":"2025-04-13T16:06:09.056Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task eb960f56-8263-45d1-8a96-97040d8ea3a1","stagedFiles":[],"timestamp":"2025-04-13T16:06:09.056Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:06:10.570Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/file-content","timestamp":"2025-04-13T16:06:10.571Z"}
{"level":"warn","message":"Task not found: Login","timestamp":"2025-04-13T16:06:10.573Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:06:45.852Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-13T16:06:45.852Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:06:58.214Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-13T16:06:58.215Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM System","timestamp":"2025-04-13T16:06:58.215Z"}
{"level":"info","message":"Task queued: 5076ed0c-a86f-4c40-b728-db873358100f","prompt":"Build CRM System","timestamp":"2025-04-13T16:06:58.223Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T16:06:58.226Z"}
{"level":"info","message":"Task started: 5076ed0c-a86f-4c40-b728-db873358100f, Prompt: Build CRM System","timestamp":"2025-04-13T16:06:58.228Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:06:59.397Z"}
{"level":"info","message":"System analysis completed: files=739, logs=65, memory=20, security=40, uxIssues=734, flowIssues=24","timestamp":"2025-04-13T16:06:59.930Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-13T16:06:59.931Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T16:06:59.931Z"}
{"level":"info","message":"Saved newContent for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v43.jsx","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:06:59.969Z"}
{"level":"info","message":"Saved newContent for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v17.jsx","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:06:59.987Z"}
{"level":"info","message":"Saved newContent for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v17.jsx","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:00.005Z"}
{"level":"info","message":"Saved newContent for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v42.jsx","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:00.043Z"}
{"level":"info","message":"Saved newContent for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v17.jsx","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:00.063Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","taskId":"Login","timestamp":"2025-04-13T16:07:01.170Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:07:01.257Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v43.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v17.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v17.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v42.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v17.jsx\"]","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:01.260Z"}
{"level":"warn","message":"No staged files available for testing after refresh","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:01.264Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:07:02.425Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = undefined","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:02.425Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at selfValidateTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:580:63)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1079:26)","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:02.426Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:07:12.630Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-13T16:07:12.630Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:12.630Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:07:12.633Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task 5076ed0c-a86f-4c40-b728-db873358100f","stagedFiles":[],"timestamp":"2025-04-13T16:07:12.633Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-13T16:15:53.498Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-13T16:15:53.499Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:02.987Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:16:02.988Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:02.989Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:16:02.990Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:02.991Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:16:02.991Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:16:03.004Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.010Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:16:03.011Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:16:03.046Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.073Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:16:03.073Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.088Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:16:03.089Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.112Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:16:03.112Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.114Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:16:03.114Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:16:03.127Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.132Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:16:03.132Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.135Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:16:03.135Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.136Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:16:03.137Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:16:03.137Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:03.177Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:16:03.177Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:12.612Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/reject","timestamp":"2025-04-13T16:16:12.613Z"}
{"level":"info","message":"Rollback completed for task 5076ed0c-a86f-4c40-b728-db873358100f","timestamp":"2025-04-13T16:16:12.624Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:16:17.343Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-13T16:16:17.343Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:17:10.904Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-13T16:17:10.905Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-13T16:17:10.905Z"}
{"level":"info","message":"Task queued: 89be9652-2174-4d77-b3af-6269a5e6747b","prompt":"Build CRM system","timestamp":"2025-04-13T16:17:10.914Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 1/3","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"89be9652-2174-4d77-b3af-6269a5e6747b","timestamp":"2025-04-13T16:17:10.920Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 2/3","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"89be9652-2174-4d77-b3af-6269a5e6747b","timestamp":"2025-04-13T16:17:11.928Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 3/3","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"89be9652-2174-4d77-b3af-6269a5e6747b","timestamp":"2025-04-13T16:17:13.932Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:17:21.875Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/file-content","timestamp":"2025-04-13T16:17:21.876Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 89be9652-2174-4d77-b3af-6269a5e6747b","timestamp":"2025-04-13T16:17:21.879Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-13T16:37:00.081Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-13T16:37:00.082Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-13T16:48:18.018Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-13T16:48:18.018Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-13T16:48:18.035Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.698Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:48:32.699Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.701Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:48:32.702Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.704Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:48:32.705Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:48:32.717Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.748Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:48:32.748Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:48:32.757Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.767Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:48:32.767Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.784Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:48:32.784Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.820Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:48:32.821Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.824Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:48:32.824Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:48:32.826Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.842Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T16:48:32.842Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T16:48:32.854Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.859Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:48:32.860Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.862Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T16:48:32.862Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:32.903Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T16:48:32.903Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:39.657Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-13T16:48:39.657Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:48:55.367Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-13T16:48:55.368Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-13T16:48:55.368Z"}
{"level":"info","message":"Task queued: 62007f37-a9c8-4304-b5c8-43583c1dfacb","prompt":"Build CRM system","timestamp":"2025-04-13T16:48:55.377Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T16:48:55.381Z"}
{"level":"info","message":"Task started: 62007f37-a9c8-4304-b5c8-43583c1dfacb, Prompt: Build CRM system","timestamp":"2025-04-13T16:48:55.386Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:48:59.162Z"}
{"level":"info","message":"System analysis completed: files=744, logs=65, memory=20, security=40, uxIssues=739, flowIssues=24","timestamp":"2025-04-13T16:48:59.740Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-13T16:48:59.741Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T16:48:59.741Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:48:59.782Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:48:59.804Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:48:59.826Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:48:59.856Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:48:59.875Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:106:85)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:244:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1081:25)","taskId":"Login","timestamp":"2025-04-13T16:49:00.892Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:49:00.955Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v44.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v18.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v18.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v43.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v18.jsx\"]","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:49:00.959Z"}
{"level":"warn","message":"No staged files available for testing after refresh","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:49:00.961Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T16:49:01.969Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = undefined","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:49:01.970Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at selfValidateTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:601:63)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1152:26)","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:49:01.970Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T16:49:07.049Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-13T16:49:07.050Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:49:07.050Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"62007f37-a9c8-4304-b5c8-43583c1dfacb","timestamp":"2025-04-13T16:49:07.053Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task 62007f37-a9c8-4304-b5c8-43583c1dfacb","stagedFiles":[],"timestamp":"2025-04-13T16:49:07.053Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-13T16:59:57.355Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-13T16:59:57.370Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-13T16:59:57.355Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.730Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:02.731Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.733Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:02.733Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.735Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:02.736Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:02.748Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.777Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:02.777Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:02.787Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.802Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:02.803Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.817Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:02.817Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.839Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:02.839Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.840Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:02.840Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:02.843Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.848Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:02.848Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.852Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:02.853Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:02.864Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.885Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:02.885Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:02.903Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:02.903Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.778Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:17.778Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.780Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:17.780Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.782Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:17.782Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:17.788Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.819Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:17.819Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:17.828Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.832Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:17.832Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.837Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:17.838Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.871Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:17.871Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.872Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:17.873Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:17.887Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.893Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-13T17:00:17.893Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.900Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:17.901Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.905Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-13T17:00:17.906Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-13T17:00:17.910Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:17.947Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-13T17:00:17.948Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:26.380Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-13T17:00:26.380Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:34.873Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-13T17:00:34.873Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-13T17:00:34.873Z"}
{"level":"info","message":"Task queued: 2c82b927-b8ed-4097-a288-a563700305b3","prompt":"Build CRM system","timestamp":"2025-04-13T17:00:34.881Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T17:00:34.885Z"}
{"level":"info","message":"Task started: 2c82b927-b8ed-4097-a288-a563700305b3, Prompt: Build CRM system","timestamp":"2025-04-13T17:00:34.889Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T17:00:38.583Z"}
{"level":"info","message":"System analysis completed: files=749, logs=65, memory=20, security=40, uxIssues=744, flowIssues=24","timestamp":"2025-04-13T17:00:39.174Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-13T17:00:39.175Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-13T17:00:39.175Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:39.205Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:39.230Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:39.252Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:39.282Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:39.302Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:107:85)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:245:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1100:25)","taskId":"Login","timestamp":"2025-04-13T17:00:40.168Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T17:00:40.222Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v45.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v19.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v19.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v44.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v19.jsx\"]","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:40.224Z"}
{"level":"warn","message":"No staged files available for testing after refresh","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:40.226Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-13T17:00:41.087Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = undefined","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:41.087Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at selfValidateTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:602:63)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1185:26)","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:41.088Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-13T17:00:43.982Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-13T17:00:43.983Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:43.983Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-13T17:00:43.986Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task 2c82b927-b8ed-4097-a288-a563700305b3","stagedFiles":[],"timestamp":"2025-04-13T17:00:43.986Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-14T02:03:44.931Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T02:34:32.023Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T02:34:32.023Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T02:34:32.025Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T02:34:32.025Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T02:34:32.026Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T02:34:32.026Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T02:34:32.034Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T02:34:32.046Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T02:34:32.046Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T02:34:32.084Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T02:34:32.094Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T02:34:32.094Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T02:34:32.109Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T02:34:32.109Z"}
{"level":"error","message":"JWT verification failed: jwt expired","timestamp":"2025-04-14T03:36:20.220Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","timestamp":"2025-04-14T03:36:20.223Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","timestamp":"2025-04-14T03:36:20.225Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","timestamp":"2025-04-14T03:36:20.229Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","timestamp":"2025-04-14T03:36:20.233Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","timestamp":"2025-04-14T03:36:20.237Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-14T04:12:45.996Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-14T04:12:45.997Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-14T04:12:46.013Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:04.119Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:13:04.120Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:04.122Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:13:04.123Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:04.127Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:13:04.127Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:13:04.130Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:04.168Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:13:04.168Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:13:04.177Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:04.192Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:13:04.192Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:04.207Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:13:04.207Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:10.831Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/reject","timestamp":"2025-04-14T04:13:10.831Z"}
{"level":"info","message":"Rollback completed for task 2c82b927-b8ed-4097-a288-a563700305b3","timestamp":"2025-04-14T04:13:10.837Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:17.153Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-14T04:13:17.154Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:13:52.776Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-14T04:13:52.777Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-14T04:13:52.777Z"}
{"level":"info","message":"Task queued: cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","prompt":"Build CRM system","timestamp":"2025-04-14T04:13:52.785Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-14T04:13:52.788Z"}
{"level":"info","message":"Task started: cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574, Prompt: Build CRM system","timestamp":"2025-04-14T04:13:52.790Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-14T04:13:57.119Z"}
{"level":"info","message":"System analysis completed: files=754, logs=65, memory=20, security=40, uxIssues=749, flowIssues=24","timestamp":"2025-04-14T04:13:57.868Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-14T04:13:57.869Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-14T04:13:57.869Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:57.903Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:57.921Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:57.938Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:57.967Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:57.983Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:96:82)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:107:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:246:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1133:25)","taskId":"Login","timestamp":"2025-04-14T04:13:59.077Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:108:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:246:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1133:25)","taskId":"Login","timestamp":"2025-04-14T04:13:59.078Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-14T04:13:59.134Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v46.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v20.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v20.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v45.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v20.jsx\"]","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:59.137Z"}
{"level":"warn","message":"No staged files available for testing after refresh","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:13:59.139Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-14T04:14:00.296Z"}
{"level":"debug","message":"selfValidateTask: testResults = {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}, stagedFiles = undefined","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:14:00.297Z"}
{"level":"error","message":"Task processing failed: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at selfValidateTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:603:63)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1239:26)","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:14:00.297Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:14:15.677Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/test","timestamp":"2025-04-14T04:14:15.678Z"}
{"level":"debug","manual":true,"message":"Test request body:","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:14:15.678Z"}
{"generatedFiles":[],"level":"debug","message":"Task data before test:","status":"pending_approval","taskId":"cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:14:15.681Z"}
{"generatedFiles":[],"level":"warn","message":"No files available to test for task cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","stagedFiles":[],"timestamp":"2025-04-14T04:14:15.682Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-14T04:27:43.093Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-14T04:27:43.093Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-14T04:27:43.113Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.818Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:27:50.818Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.820Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:27:50.821Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.822Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:27:50.823Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:27:50.837Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.881Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:27:50.882Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:27:50.893Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.912Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:27:50.913Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.915Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:27:50.915Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.970Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:27:50.971Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.976Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:27:50.977Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:27:50.981Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:50.997Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:27:50.997Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:51.000Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:27:51.000Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:27:51.002Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:51.004Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:27:51.005Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:27:51.064Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:27:51.065Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:28:00.211Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/reject","timestamp":"2025-04-14T04:28:00.212Z"}
{"level":"info","message":"Rollback completed for task cbdfd0ec-4ae3-4d43-87a1-85bcfb0d0574","timestamp":"2025-04-14T04:28:00.227Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:28:04.118Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-14T04:28:04.119Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:28:23.655Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-14T04:28:23.656Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-14T04:28:23.656Z"}
{"level":"info","message":"Task queued: 1f5d85d6-80c1-4469-8a33-fe692b25890c","prompt":"Build CRM system","timestamp":"2025-04-14T04:28:23.665Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-14T04:28:23.669Z"}
{"level":"debug","message":"Task saved: 1f5d85d6-80c1-4469-8a33-fe692b25890c, stagedFiles: []","timestamp":"2025-04-14T04:28:23.672Z"}
{"level":"info","message":"Task started: 1f5d85d6-80c1-4469-8a33-fe692b25890c, Prompt: Build CRM system","timestamp":"2025-04-14T04:28:23.673Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-14T04:28:27.961Z"}
{"level":"info","message":"System analysis completed: files=759, logs=65, memory=20, security=40, uxIssues=754, flowIssues=24","timestamp":"2025-04-14T04:28:28.480Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-14T04:28:28.481Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-14T04:28:28.481Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v47.jsx\"]","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.511Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.513Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v47.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v21.jsx\"]","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.533Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.536Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v47.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v21.jsx\"]","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.555Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.558Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v47.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v46.jsx\"]","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.596Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.598Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v47.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v46.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v21.jsx\"]","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.619Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:28.622Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:100:82)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:118:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:250:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1111:25)","taskId":"Login","timestamp":"2025-04-14T04:28:29.794Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:119:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:250:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1111:25)","taskId":"Login","timestamp":"2025-04-14T04:28:29.795Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-14T04:28:29.862Z"}
{"level":"debug","message":"Post-tests: task.stagedFiles = [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v47.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v21.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v46.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v21.jsx\"]","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:29.865Z"}
{"level":"warn","message":"No staged files available for testing after final refresh","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:28:29.867Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:28:34.139Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/file-content","timestamp":"2025-04-14T04:28:34.139Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:73:82)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:995:21\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:109:7","taskId":"Login","timestamp":"2025-04-14T04:28:34.139Z"}
{"level":"warn","message":"Invalid taskId in /file-content request","query":{"taskId":"Login"},"stack":"Error\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:996:89\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:109:7\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:261:12","timestamp":"2025-04-14T04:28:34.140Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:28:36.135Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/file-content","timestamp":"2025-04-14T04:28:36.135Z"}
{"generatedFiles":[],"level":"debug","message":"Fetched task content for 1f5d85d6-80c1-4469-8a33-fe692b25890c","newContent":{"Dashboard":"No staged file generated","EmployeeLog":"No staged file generated","Login":"No staged file generated","Settings":"No staged file generated","SponsorProfile":"No staged file generated"},"originalContent":{"Dashboard":"/*\r\n * File: Dashboard.jsx\r\n * Path: frontend/src/pages/Dashboard.jsx\r\n * Purpose: Main dashboard UI for sponsor management in IDURAR ERP CRM.\r\n * Functionality:\r\n *   - Displays sponsor summary, SponsorHub table, Calendar, and Grok analysis.\r\n *   - Manages modals for adding sponsors and events.\r\n * Structure:\r\n *   - React component with Ant Design UI, Redux state via useSponsorDashboard.\r\n * Dependencies:\r\n *   - react, antd: UI components.\r\n *   - useSponsorDashboard: Data hook for sponsors/summary.\r\n *   - SponsorHub, Calendar, EventModal, SponsorModal, PendingNotifications: Child components.\r\n *   - handlers: handleAddSponsor, handleEventAdd.\r\n *   - request/request: API utility (api).\r\n * Connections:\r\n *   - Depends on: useSponsorDashboard.js (state), handlers.js (actions).\r\n *   - Used by: AppRouter.jsx (rendered at /dashboard).\r\n * Updates:\r\n *   - 04/07/2025: Updated with latest props from useSponsorDashboard.\r\n *   - 04/07/2025 (Grok 3): No changesâ€”verified prop consistency, logs alignment.\r\n *     - Why: Delete works, but edit/add event/add sponsor failedâ€”backend fixed separately.\r\n *     - How: Confirmed handleEventAddWrapper, handleAddSponsorSubmit call api correctly.\r\n *     - Impact: Relies on backend routes added (POST/PUT).\r\n * Future Enhancements:\r\n *   - Add Grok UI integration button for inline analysis.\r\n *   - Responsive layout tweaks for mobile.\r\n * Known Issues:\r\n *   - None post-backend fixes; previously blocked by missing POST/PUT routes.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Row, Col, Typography, message, Input, Button, Card, Spin } from 'antd';\r\nimport useSponsorDashboard from './useSponsorDashboard';\r\nimport SponsorHub from './SponsorHub';\r\nimport Calendar from './Calendar';\r\nimport EventModal from './EventModal';\r\nimport SponsorModal from './SponsorModal';\r\nimport PendingNotifications from './PendingNotifications';\r\nimport { handleAddSponsor, handleEventAdd } from './handlers';\r\nimport api from '@/request/request';\r\n\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst Dashboard = () => {\r\n  const [messageApi, contextHolder] = message.useMessage();\r\n  const {\r\n    filteredSponsors,\r\n    summary,\r\n    loading,\r\n    total,\r\n    addModalVisible,\r\n    setAddModalVisible,\r\n    sponsorData,\r\n    setSponsorData,\r\n    tierOptions,\r\n    searchTerm,\r\n    setSearchTerm,\r\n    tierFilter,\r\n    setTierFilter,\r\n    currentPage,\r\n    setCurrentPage,\r\n    itemsPerPage,\r\n    refreshSponsors,\r\n  } = useSponsorDashboard();\r\n\r\n  const [eventModalVisible, setEventModalVisible] = useState(false);\r\n  const [eventData, setEventData] = useState({ sponsorId: '', title: '', date: '', description: '' });\r\n  const [grokInput, setGrokInput] = useState('');\r\n  const [grokResponse, setGrokResponse] = useState('');\r\n\r\n  const handleDateClick = (info) => {\r\n    setEventData({ ...eventData, date: info.dateStr });\r\n    setEventModalVisible(true);\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const [sponsorId, eventId] = info.event.id.split('-');\r\n    setEventData({\r\n      sponsorId,\r\n      title: info.event.title.split(' - ')[1],\r\n      date: info.event.startStr,\r\n      description: info.event.extendedProps.description,\r\n    });\r\n    setEventModalVisible(true);\r\n  };\r\n\r\n  const handleAddSponsorSubmit = async (data, form) => {\r\n    await handleAddSponsor(data, setAddModalVisible, messageApi, form);\r\n    refreshSponsors();\r\n  };\r\n\r\n  const handleEventAddWrapper = async (data) => {\r\n    await handleEventAdd(data, setEventModalVisible, messageApi);\r\n    refreshSponsors();\r\n  };\r\n\r\n  const handleGrokAnalyze = async () => {\r\n    try {\r\n      const response = await api.post('/grok/analyze', { data: grokInput });\r\n      setGrokResponse(response.data.result);\r\n      messageApi.success('Grok analysis completed!');\r\n    } catch (error) {\r\n      messageApi.error('Grok analysis failed: ' + error.message);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Spin size=\"large\" style={{ display: 'block', margin: 'auto', paddingTop: '20%' }} />;\r\n\r\n  return (\r\n    <>\r\n      {contextHolder}\r\n      <div style={{ padding: '20px', width: '100%', boxSizing: 'border-box', overflowX: 'hidden' }}>\r\n        <Title level={2}>Dashboard</Title>\r\n        <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r\n          <Col span={24}>\r\n            <Card title=\"Sponsor Summary\" loading={!summary.totalSponsors && loading}>\r\n              {summary.totalSponsors ? (\r\n                <>\r\n                  <p>Total Sponsors: {summary.totalSponsors}</p>\r\n                  <p>Average Fit Score: {(summary.avgFitScore || 0).toFixed(2)}</p>\r\n                  <p>Total Estimated Cost: ${summary.totalEstCost || 0}</p>\r\n                  <p>Tier Breakdown:</p>\r\n                  <ul>\r\n                    {summary.tiers?.map((tier) => (\r\n                      <li key={tier._id}>{tier._id}: {tier.count}</li>\r\n                    ))}\r\n                  </ul>\r\n                  <p>Top Prospects:</p>\r\n                  <ul>\r\n                    {summary.topProspects?.map((prospect) => (\r\n                      <li key={prospect._id}>{prospect.name} (Fit Score: {prospect.fit_score})</li>\r\n                    ))}\r\n                  </ul>\r\n                </>\r\n              ) : (\r\n                <p>Loading summary...</p>\r\n              )}\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={12} style={{ maxHeight: '400px', overflowY: 'auto' }}>\r\n            <SponsorHub\r\n              sponsors={filteredSponsors}\r\n              loading={loading}\r\n              total={total}\r\n              searchTerm={searchTerm}\r\n              setSearchTerm={setSearchTerm}\r\n              tierFilter={tierFilter}\r\n              setTierFilter={setTierFilter}\r\n              tierOptions={tierOptions}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              itemsPerPage={itemsPerPage}\r\n              refreshSponsors={refreshSponsors}\r\n              setAddModalVisible={setAddModalVisible}\r\n              messageApi={messageApi}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <Calendar\r\n              sponsors={filteredSponsors}\r\n              loading={loading}\r\n              handleDateClick={handleDateClick}\r\n              handleEventClick={handleEventClick}\r\n            />\r\n            <div style={{ marginTop: 16 }}>\r\n              <PendingNotifications />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\r\n          <Col span={24}>\r\n            <Title level={4}>Grok Analysis</Title>\r\n            <TextArea\r\n              placeholder=\"Enter data to analyze with Grok\"\r\n              value={grokInput}\r\n              onChange={(e) => setGrokInput(e.target.value)}\r\n              rows={4}\r\n              style={{ marginBottom: 8 }}\r\n            />\r\n            <Button onClick={handleGrokAnalyze}>Analyze</Button>\r\n            {grokResponse && (\r\n              <div style={{ marginTop: 16 }}>\r\n                <strong>Grok Response:</strong>\r\n                <p>{grokResponse}</p>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <SponsorModal\r\n          mode=\"add\"\r\n          visible={addModalVisible}\r\n          setVisible={setAddModalVisible}\r\n          sponsorData={sponsorData}\r\n          setSponsorData={setSponsorData}\r\n          tierOptions={tierOptions}\r\n          handleSubmit={handleAddSponsorSubmit}\r\n          messageApi={messageApi}\r\n        />\r\n        <EventModal\r\n          eventModalVisible={eventModalVisible}\r\n          setEventModalVisible={setEventModalVisible}\r\n          eventData={eventData}\r\n          setEventData={setEventData}\r\n          filteredSponsors={filteredSponsors}\r\n          handleEventAdd={handleEventAddWrapper}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","EmployeeLog":"/*\n * File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog.jsx\n * Purpose: Employee log page with clock-in/out and payroll management for Allur Space Console.\n * Dependencies: react, antd, react-router-dom\n * Notes:\n *   - Provides advanced clock-in/out functionality with system-wide navigation integration.\n * Change Log:\n *   - 04/09/2025: Enhanced with clock-in/out and nav button (Chat Line 8500-ish).\n */\nimport React, { useState } from 'react';\nimport { Table, Button, Input, Form, Space, Layout } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Header, Content } = Layout;\n\nconst EmployeeLog = () => {\n  const [employees, setEmployees] = useState([]);\n  const [form] = Form.useForm();\n\n  const handleAddEmployee = (values) => {\n    const newEmployee = { ...values, id: Date.now(), clockIn: null, clockOut: null };\n    setEmployees([...employees, newEmployee]);\n    form.resetFields();\n  };\n\n  const handleClockIn = (id) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? { ...emp, clockIn: new Date().toLocaleString() } : emp));\n  };\n\n  const handleClockOut = (id) => {\n    setEmployees(prev => prev.map(emp => emp.id === id ? { ...emp, clockOut: new Date().toLocaleString() } : emp));\n  };\n\n  return (\n    <Layout>\n      <Header>\n        <nav>\n          <Link to=\"/\">Home</Link> | \n          <Link to=\"/dashboard\">Dashboard</Link> | \n          <Link to=\"/sponsor/1\">Sponsor</Link> | \n          <Link to=\"/employee-log\">Employee Log</Link> | \n          <Link to=\"/settings\">Settings</Link>\n        </nav>\n      </Header>\n      <Content style={{ padding: '20px' }}>\n        <h1>Employee Log</h1>\n        <Form form={form} onFinish={handleAddEmployee}>\n          <Form.Item name=\"name\" label=\"Name\"><Input /></Form.Item>\n          <Form.Item name=\"payroll\" label=\"Payroll\"><Input type=\"number\" /></Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">Add Employee</Button>\n        </Form>\n        <Table dataSource={employees} columns={[\n          { title: 'Name', dataIndex: 'name', key: 'name' },\n          { title: 'Payroll', dataIndex: 'payroll', key: 'payroll' },\n          { title: 'Clock In', dataIndex: 'clockIn', key: 'clockIn' },\n          { title: 'Clock Out', dataIndex: 'clockOut', key: 'clockOut' },\n          {\n            title: 'Actions',\n            key: 'actions',\n            render: (_, record) => (\n              <Space>\n                <Button onClick={() => handleClockIn(record.id)} disabled={record.clockIn}>Clock In</Button>\n                <Button onClick={() => handleClockOut(record.id)} disabled={!record.clockIn || record.clockOut}>Clock Out</Button>\n              </Space>\n            )\n          }\n        ]} />\n      </Content>\n    </Layout>\n  );\n};\n\nexport default EmployeeLog;\n    ","Login":"// File Path: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login.jsx\n/*\n * Purpose: Enhanced login page with modern UI, AI suggestions, and Redux integration for IDURAR ERP CRM.\n * Dependencies: react, antd, serverApiConfig (axios), @tensorflow/tfjs, react-redux, react-router-dom\n * Change Log:\n *   - 04/07/2025: Enhanced by Grok with AI and UI upgrades.\n *   - 04/08/2025: Added versioning and Redux navigation (Chat Line 1800).\n *   - 04/08/2025: Fixed Ant Design message warning with App wrapper (Chat Line 1800).\n *   - 04/08/2025: Fixed redirection to /dashboard (Chat Line 1538).\n *   - 04/08/2025: Fixed API call to use apiClient (Chat Line 5600).\n *     - Why: 404 error due to wrong port (User logs, 17:46 UTC).\n *     - How: Replaced axios with apiClient, ensuring 8888 port.\n *     - Impact: Correctly targets http://localhost:8888/api/auth/login.\n *     - Test: Login with admin@idurarapp.com/admin123, expect 200.\n * Notes:\n *   - Grok Programming Machine: Monitor login attempts; log success/failure (e.g., \"Login X succeeded on Y\").\n *   - Nate & Grok: Future updates:\n *     - Add MFA support for enhanced security.\n *     - Integrate OAuth for external logins.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Card, Typography, App } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport apiClient from '../config/serverApiConfig'; // Use configured axios instance\nimport * as tf from '@tensorflow/tfjs';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { login } from '@/redux/auth/actions';\n\nconst { Title, Text } = Typography;\n\nconst Login = () => {\n  const [loading, setLoading] = useState(false);\n  const [aiTip, setAiTip] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const loginAttempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n    if (loginAttempts.length > 2) {\n      const xs = tf.tensor2d(loginAttempts.map((_, i) => [i]), [loginAttempts.length, 1]);\n      const ys = tf.tensor2d(loginAttempts.map(t => [t.success ? 1 : 0]), [loginAttempts.length, 1]);\n      const model = tf.sequential();\n      model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n      model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });\n      model.fit(xs, ys, { epochs: 5 }).then(() => {\n        const next = model.predict(tf.tensor2d([[loginAttempts.length]], [1, 1]));\n        setAiTip(next.dataSync()[0] > 0.5 ? 'AI Tip: Double-check your credentials!' : 'AI Tip: Try resetting your password.');\n      });\n    }\n  }, []);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    try {\n      console.log('Login attempt:', values);\n      const res = await apiClient.post('/auth/login', { // Use apiClient\n        email: values.email,\n        password: values.password,\n      });\n      console.log('Login response:', res.data);\n      const loginData = { email: values.email, password: values.password };\n      await dispatch(login({ loginData })).unwrap();\n      message.success('Login successful!');\n      const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n      localStorage.setItem('loginAttempts', JSON.stringify([...attempts, { success: true, time: new Date() }]));\n      navigate('/dashboard');\n    } catch (err) {\n      console.error('Login failed:', err);\n      message.error('Login failed: ' + (err.response?.data?.message || 'Unknown error'));\n      const attempts = JSON.parse(localStorage.getItem('loginAttempts') || '[]');\n      localStorage.setItem('loginAttempts', JSON.stringify([...attempts, { success: false, time: new Date() }]));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <App>\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', background: '#f0f2f5' }}>\n        <Card style={{ width: 400, borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n          <Title level={2} style={{ textAlign: 'center' }}>Welcome Back</Title>\n          <Form layout=\"vertical\" onFinish={onFinish}>\n            <Form.Item name=\"email\" rules={[{ required: true, message: 'Please enter your email' }]}>\n              <Input prefix={<UserOutlined />} placeholder=\"Email\" size=\"large\" />\n            </Form.Item>\n            <Form.Item name=\"password\" rules={[{ required: true, message: 'Please enter your password' }]}>\n              <Input.Password prefix={<LockOutlined />} placeholder=\"Password\" size=\"large\" />\n            </Form.Item>\n            {aiTip && <Text type=\"secondary\" style={{ display: 'block', marginBottom: 16 }}>{aiTip}</Text>}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" loading={loading} size=\"large\" block style={{ borderRadius: 4 }}>\n                Log In\n              </Button>\n            </Form.Item>\n          </Form>\n        </Card>\n      </div>\n    </App>\n  );\n};\n\nexport default Login;\n","Settings":"/*\n * File: Settings.jsx\n * Path: frontend/src/pages/Settings.jsx\n * Purpose: CRM settings management with Redux integration and Allur payment setup.\n * Dependencies: react, antd, react-redux, axios\n * Change Log:\n *   - 04/08/2025: Added by Grok for CRM settings and payment integration\n */\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Card, message, Typography } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { settingsAction } from '@/redux/settings/actions';\nimport { selectSettings } from '@/redux/settings/selectors';\nimport axios from 'axios';\n\nconst { Title } = Typography;\n\nconst Settings = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { settings, isLoading } = useSelector(selectSettings);\n  const [allurStatus, setAllurStatus] = useState('Not Connected');\n\n  useEffect(() => {\n    dispatch(settingsAction.list({ entity: 'settings' }));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (settings.length) {\n      form.setFieldsValue({\n        appName: settings.find(s => s.settingKey === 'appName')?.settingValue || 'Festival CRM',\n        currency: settings.find(s => s.settingKey === 'currency')?.settingValue || 'USD',\n      });\n    }\n  }, [settings, form]);\n\n  const onFinish = async (values) => {\n    try {\n      await dispatch(settingsAction.updateManySetting({\n        entity: 'settings',\n        jsonData: [\n          { settingKey: 'appName', settingValue: values.appName },\n          { settingKey: 'currency', settingValue: values.currency },\n        ]\n      })).unwrap();\n      message.success('Settings updated!');\n    } catch (err) {\n      message.error('Failed to update settings');\n    }\n  };\n\n  const connectAllur = async () => {\n    try {\n      const res = await axios.post('/api/allur/pay', { action: 'connect' });\n      setAllurStatus('Connected');\n      message.success('Allur wallet connected!');\n    } catch (err) {\n      setAllurStatus('Connection Failed');\n      message.error('Failed to connect Allur wallet');\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', background: '#f0f2f5' }}>\n      <Title level={2}>Settings</Title>\n      <Card style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.1)' }}>\n        <Form form={form} layout=\"vertical\" onFinish={onFinish}>\n          <Form.Item name=\"appName\" label=\"App Name\" rules={[{ required: true }]}>\n            <Input placeholder=\"Festival CRM\" />\n          </Form.Item>\n          <Form.Item name=\"currency\" label=\"Currency\" rules={[{ required: true }]}>\n            <Input placeholder=\"USD\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isLoading} style={{ borderRadius: 4 }}>\n              Save Settings\n            </Button>\n          </Form.Item>\n        </Form>\n        <div style={{ marginTop: 16 }}>\n          <h3>Allur Payment Integration</h3>\n          <p>Status: {allurStatus}</p>\n          <Button onClick={connectAllur} style={{ borderRadius: 4 }}>Connect Allur Wallet</Button>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default Settings;\n","SponsorProfile":"/*\n * File: SponsorProfile.jsx\n * Path: frontend/src/pages/SponsorProfile.jsx\n * Purpose: Displays a single sponsor's profile with details and comments\n * Dependencies: antd, request/request\n * Change Log:\n *  - 04/06/2025: Created by Grok (v18)\n *  - 04/10/2025: Fixed generation errors (Grok 3)\n */\nimport React, { useState, useEffect } from 'react';\nimport { Card, Descriptions, Button, Input, List, Typography } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport api from '@/request/request';\n\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\nconst SponsorProfile = () => {\n  const [sponsor, setSponsor] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSponsor = async () => {\n      try {\n        const res = await api.get('/api/sponsors/1');\n        setSponsor(res.data || { name: 'Default Sponsor', fit_score: 50, assignedTo: { name: 'Unassigned' } });\n        setComments(res.data?.comments || []);\n      } catch (err) {\n        console.error('Fetch error:', err);\n        setSponsor({ name: 'Default Sponsor', fit_score: 50, assignedTo: { name: 'Unassigned' } });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSponsor();\n  }, []);\n\n  const handleComment = async () => {\n    if (!newComment.trim()) return;\n    const updatedComments = [...comments, { text: newComment, date: new Date(), author: 'User' }];\n    try {\n      await api.put('/api/sponsors/1', { comments: updatedComments });\n      setComments(updatedComments);\n    } catch (err) {\n      console.error('Comment error:', err);\n      setComments(updatedComments.map(c => c.author === 'User' ? { ...c, author: 'User (Offline)' } : c));\n    }\n    setNewComment('');\n  };\n\n  if (loading) return <div>Loading sponsor profile...</div>;\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <Title level={2}>{sponsor.name}</Title>\n      <Card>\n        <Descriptions bordered>\n          <Descriptions.Item label=\"Tier\">{sponsor.tier_level || 'N/A'}</Descriptions.Item>\n          <Descriptions.Item label=\"Fit Score\">{sponsor.fit_score}%</Descriptions.Item>\n          <Descriptions.Item label=\"Assigned To\">{sponsor.assignedTo.name}</Descriptions.Item>\n        </Descriptions>\n      </Card>\n      <Card title=\"Comments\" style={{ marginTop: 24 }}>\n        <List\n          dataSource={comments}\n          renderItem={item => (\n            <List.Item>\n              <Text>{item.text} - <i>{item.author}, {new Date(item.date).toLocaleString()}</i></Text>\n            </List.Item>\n          )}\n        />\n        <TextArea\n          value={newComment}\n          onChange={e => setNewComment(e.target.value)}\n          placeholder=\"Add a comment...\"\n          rows={4}\n          style={{ marginTop: 16 }}\n        />\n        <Button\n          type=\"primary\"\n          icon={<SendOutlined />}\n          onClick={handleComment}\n          style={{ marginTop: 8 }}\n        >\n          Post Comment\n        </Button>\n      </Card>\n    </div>\n  );\n};\n\nexport default SponsorProfile;"},"timestamp":"2025-04-14T04:28:36.138Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-14T04:59:20.319Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-14T04:59:20.319Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-14T04:59:20.336Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.474Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:59:28.475Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.477Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:59:28.477Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.479Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:59:28.479Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:59:28.491Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.522Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:59:28.523Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:59:28.534Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.548Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:59:28.548Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.565Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:59:28.565Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.594Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:59:28.594Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.596Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:59:28.596Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:59:28.598Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.613Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-14T04:59:28.613Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-14T04:59:28.618Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.620Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:59:28.620Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.621Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-14T04:59:28.621Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:28.669Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-14T04:59:28.670Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:39.056Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Deleting task: 1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:59:39.057Z"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-14T04:59:39.057Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"1f5d85d6-80c1-4469-8a33-fe692b25890c","timestamp":"2025-04-14T04:59:39.061Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:42.240Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-14T04:59:42.240Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-14T04:59:49.700Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-14T04:59:49.701Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-14T04:59:49.701Z"}
{"level":"info","message":"Task queued: 4e454b64-bbf0-42b2-a083-5542713c724f","prompt":"Build CRM system","timestamp":"2025-04-14T04:59:49.712Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 1/5","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-14T04:59:49.714Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 2/5","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-14T04:59:51.228Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 3/5","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-14T04:59:54.235Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 4/5","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-14T04:59:58.749Z"}
{"level":"error","message":"DB error fetching task: Transaction numbers are only allowed on a replica set member or mongos, attempt 5/5","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-14T05:00:04.755Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-18T05:32:16.890Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-18T05:32:16.891Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-18T05:32:16.906Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:41:50.420Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-18T05:41:50.421Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:41:50.423Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-18T05:41:50.423Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:41:50.425Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-18T05:41:50.426Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-18T05:41:50.444Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:41:50.471Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-18T05:41:50.472Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-18T05:41:50.475Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:41:50.485Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-18T05:41:50.486Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:41:50.508Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-18T05:41:50.508Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:42:10.333Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Deleting task: 4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-18T05:42:10.334Z"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-18T05:42:10.333Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"4e454b64-bbf0-42b2-a083-5542713c724f","timestamp":"2025-04-18T05:42:10.336Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T05:42:24.615Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-18T05:42:24.615Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM System","timestamp":"2025-04-18T05:42:24.615Z"}
{"level":"info","message":"Task queued: fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","prompt":"Build CRM System","timestamp":"2025-04-18T05:42:24.657Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-18T05:42:24.660Z"}
{"level":"debug","message":"Task initialized: fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c, stagedFiles: []","timestamp":"2025-04-18T05:42:24.664Z"}
{"level":"info","message":"Task started: fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c, Prompt: Build CRM System","timestamp":"2025-04-18T05:42:24.664Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-18T05:42:34.811Z"}
{"level":"info","message":"System analysis completed: files=764, logs=65, memory=20, security=40, uxIssues=759, flowIssues=24","timestamp":"2025-04-18T05:42:35.341Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-18T05:42:35.341Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-18T05:42:35.342Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v48.jsx\"]","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.367Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.368Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v48.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v22.jsx\"]","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.384Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.385Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v48.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v22.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v22.jsx\"]","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.400Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.402Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v48.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v22.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v22.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v47.jsx\"]","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.427Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.429Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v48.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v22.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v22.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v47.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v22.jsx\"]","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.447Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:35.449Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: Login\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:123:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:264:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1351:25)","taskId":"Login","timestamp":"2025-04-18T05:42:39.863Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:124:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:264:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1351:25)","taskId":"Login","timestamp":"2025-04-18T05:42:39.863Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-18T05:42:39.912Z"}
{"level":"error","message":"No staged files available for testing after final refresh","taskId":"fa47c9ab-32c5-4e30-bbc1-94b9e8eb979c","timestamp":"2025-04-18T05:42:39.916Z"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:95:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-18T20:27:06.918Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:95:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-18T20:27:06.921Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:95:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-18T20:27:06.924Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:95:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-18T20:27:06.927Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:95:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-18T20:27:06.930Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:95:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-18T20:27:06.932Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDQyNTAzMTQsImV4cCI6MTc0NDMzNjcxNH0.qkcfgoCGjZ2rWXeo_IOjJ4XjhQjQV_fk_lIALMmkPPc"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-18T20:27:25.748Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-18T20:27:25.764Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-18T20:27:25.749Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:03.025Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-18T20:28:03.026Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:03.028Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-18T20:28:03.028Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:03.032Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-18T20:28:03.032Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-18T20:28:03.035Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:03.050Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-18T20:28:03.050Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-18T20:28:03.071Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:03.084Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-18T20:28:03.084Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:03.102Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-18T20:28:03.102Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:17.573Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-18T20:28:17.574Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-18T20:28:21.298Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-18T20:28:21.298Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM System","timestamp":"2025-04-18T20:28:21.299Z"}
{"level":"info","message":"Task queued: 470b92f4-146f-48f5-8bb1-70afefcc04c5","prompt":"Build CRM System","timestamp":"2025-04-18T20:28:21.307Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-18T20:28:21.310Z"}
{"level":"debug","message":"Task initialized: 470b92f4-146f-48f5-8bb1-70afefcc04c5, stagedFiles: []","timestamp":"2025-04-18T20:28:21.313Z"}
{"level":"info","message":"Task started: 470b92f4-146f-48f5-8bb1-70afefcc04c5, Prompt: Build CRM System","timestamp":"2025-04-18T20:28:21.314Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-18T20:28:32.010Z"}
{"level":"info","message":"System analysis completed: files=769, logs=65, memory=20, security=40, uxIssues=764, flowIssues=24","timestamp":"2025-04-18T20:28:32.635Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-18T20:28:32.636Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-18T20:28:32.636Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v49.jsx\"]","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.668Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.670Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v49.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v23.jsx\"]","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.691Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.692Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v49.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v23.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v23.jsx\"]","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.709Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.710Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v49.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v23.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v23.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v48.jsx\"]","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.741Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.743Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v49.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v23.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v23.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v48.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v23.jsx\"]","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.760Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:32.762Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: Login\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:123:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:264:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1351:25)","taskId":"Login","timestamp":"2025-04-18T20:28:34.305Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:124:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:264:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1351:25)","taskId":"Login","timestamp":"2025-04-18T20:28:34.306Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-18T20:28:34.360Z"}
{"level":"error","message":"No staged files available for testing after final refresh","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-18T20:28:34.363Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-18T23:26:10.256Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-19T15:45:01.187Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-19T15:45:01.188Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T15:45:01.207Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-19T15:54:46.269Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-19T15:54:46.270Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T15:54:46.298Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:46.895Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:46.896Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:46.898Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:46.899Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:46.903Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:46.903Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:46.921Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:46.958Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:46.959Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:46.976Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.006Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:47.006Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.008Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:47.008Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.054Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:47.054Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.058Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:47.058Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:47.060Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.065Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:47.066Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.070Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:47.070Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:47.085Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.119Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:47.119Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:47.157Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:47.157Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:50.954Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:50.958Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:50.961Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:50.961Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:50.963Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:50.963Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:50.971Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:50.977Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:50.977Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:51.028Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.035Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:51.035Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.051Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:51.051Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.081Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:51.082Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.084Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:51.085Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:51.089Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.104Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T15:54:51.104Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.109Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:51.109Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T15:54:51.110Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.112Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T15:54:51.112Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:51.165Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T15:54:51.165Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:54:59.724Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Deleting task: 470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T15:54:59.725Z"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-19T15:54:59.724Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T15:54:59.730Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T15:55:21.870Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-19T15:55:21.871Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM System","timestamp":"2025-04-19T15:55:21.871Z"}
{"level":"info","message":"Task queued: 70c8f42a-7771-4ff4-b138-4bd9cf9fc841","prompt":"Build CRM System","timestamp":"2025-04-19T15:55:21.885Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T15:55:21.890Z"}
{"level":"debug","message":"Task initialized: 70c8f42a-7771-4ff4-b138-4bd9cf9fc841, stagedFiles: []","timestamp":"2025-04-19T15:55:21.896Z"}
{"level":"info","message":"Task started: 70c8f42a-7771-4ff4-b138-4bd9cf9fc841, Prompt: Build CRM System","timestamp":"2025-04-19T15:55:21.896Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T15:55:26.057Z"}
{"level":"info","message":"System analysis completed: files=774, logs=65, memory=20, security=40, uxIssues=769, flowIssues=24","timestamp":"2025-04-19T15:55:27.004Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-19T15:55:27.004Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T15:55:27.005Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v50.jsx\"]","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.050Z"}
{"level":"warn","message":"No staged files after generation for Login","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.053Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v50.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v24.jsx\"]","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.081Z"}
{"level":"warn","message":"No staged files after generation for Dashboard","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.084Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v50.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v24.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v24.jsx\"]","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.108Z"}
{"level":"warn","message":"No staged files after generation for SponsorProfile","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.110Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v50.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v24.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v24.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v49.jsx\"]","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.153Z"}
{"level":"warn","message":"No staged files after generation for EmployeeLog","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.155Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v50.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v24.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v24.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v49.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v24.jsx\"]","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.182Z"}
{"level":"warn","message":"No staged files after generation for Settings","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:27.184Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: Login\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:123:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:264:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1351:25)","taskId":"Login","timestamp":"2025-04-19T15:55:28.330Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:124:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:264:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1351:25)","taskId":"Login","timestamp":"2025-04-19T15:55:28.330Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T15:55:28.411Z"}
{"level":"error","message":"No staged files available for testing after final refresh","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T15:55:28.416Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T17:25:13.523Z"}
{"level":"info","message":"Deleting task: 470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T17:26:06.257Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T17:26:06.261Z"}
{"level":"info","message":"Deleting task: 70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T17:26:07.247Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T17:26:07.249Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T17:30:50.615Z"}
{"level":"debug","message":"Task initialized: 30201b99-4176-4205-8446-ce1aac2dc898, stagedFiles: []","timestamp":"2025-04-19T17:30:50.624Z"}
{"level":"info","message":"Task started: 30201b99-4176-4205-8446-ce1aac2dc898, Prompt: Build a CRM System","timestamp":"2025-04-19T17:30:50.624Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T17:30:54.571Z"}
{"level":"info","message":"System analysis completed: files=780, logs=65, memory=20, security=40, uxIssues=775, flowIssues=25","timestamp":"2025-04-19T17:30:55.454Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-19T17:30:55.454Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T17:30:55.455Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v51.jsx\"]","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.499Z"}
{"level":"warn","message":"No staged files after reload for Login","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.501Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v25.jsx\"]","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.524Z"}
{"level":"warn","message":"No staged files after reload for Dashboard","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.526Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v25.jsx\"]","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.551Z"}
{"level":"warn","message":"No staged files after reload for SponsorProfile","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.553Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v50.jsx\"]","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.587Z"}
{"level":"warn","message":"No staged files after reload for EmployeeLog","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.589Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v25.jsx\"]","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.612Z"}
{"level":"warn","message":"No staged files after reload for Settings","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:55.614Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T17:30:56.695Z"}
{"attempt":1,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:56.699Z"}
{"attempt":2,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:56.713Z"}
{"attempt":3,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:30:58.223Z"}
{"attempt":4,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:01.239Z"}
{"attempt":5,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:05.756Z"}
{"attempt":6,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:11.762Z"}
{"attempt":7,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:19.272Z"}
{"attempt":8,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:28.283Z"}
{"attempt":9,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:38.800Z"}
{"attempt":10,"level":"warn","message":"No staged files for testing, retrying","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:31:50.814Z"}
{"level":"error","message":"No staged files available for testing after retries","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:32:04.319Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T17:47:56.891Z"}
{"level":"info","message":"Deleting task: 470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T17:48:23.951Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T17:48:23.956Z"}
{"level":"info","message":"Deleting task: 70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T17:48:24.567Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T17:48:24.569Z"}
{"level":"info","message":"Deleting task: 30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:48:25.053Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:48:25.055Z"}
{"level":"info","message":"Deleting task: 470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T17:48:36.601Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"470b92f4-146f-48f5-8bb1-70afefcc04c5","timestamp":"2025-04-19T17:48:36.603Z"}
{"level":"info","message":"Deleting task: 70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T17:48:37.021Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"70c8f42a-7771-4ff4-b138-4bd9cf9fc841","timestamp":"2025-04-19T17:48:37.023Z"}
{"level":"info","message":"Deleting task: 30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:48:37.414Z"}
{"level":"error","message":"DB error deleting task/proposals: Transaction numbers are only allowed on a replica set member or mongos","stack":"MongoServerError: Transaction numbers are only allowed on a replica set member or mongos\n    at Connection.sendCommand (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:299:27)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Connection.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cmap\\connection.js:327:26)\n    at async Server.command (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\sdam\\server.js:168:29)\n    at async FindOperation.execute (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\find.js:36:16)\n    at async tryOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:207:20)\n    at async executeOperation (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\operations\\execute_operation.js:75:16)\n    at async FindCursor._initialize (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\find_cursor.js:61:26)\n    at async FindCursor.cursorInit (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:633:27)\n    at async FindCursor.fetchBatch (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\mongodb\\lib\\cursor\\abstract_cursor.js:667:13)","taskId":"30201b99-4176-4205-8446-ce1aac2dc898","timestamp":"2025-04-19T17:48:37.416Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T17:49:59.782Z"}
{"level":"debug","message":"Task initialized: 8249b9a5-e7c8-4df2-bbee-197a6706ae33, stagedFiles: []","timestamp":"2025-04-19T17:49:59.787Z"}
{"level":"info","message":"Task started: 8249b9a5-e7c8-4df2-bbee-197a6706ae33, Prompt: Build CRM System","timestamp":"2025-04-19T17:49:59.788Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T17:50:03.688Z"}
{"level":"info","message":"System analysis completed: files=785, logs=65, memory=20, security=40, uxIssues=780, flowIssues=25","timestamp":"2025-04-19T17:50:04.459Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-19T17:50:04.460Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T17:50:04.460Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 1/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:04.505Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 2/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:06.014Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 3/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:09.020Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 4/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:13.538Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 5/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:19.550Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 6/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:27.069Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 7/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:36.081Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 8/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:46.597Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 9/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:50:58.607Z"}
{"level":"warn","message":"DB save failed for Login: Cannot read properties of undefined (reading 'includes'), attempt 10/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:12.118Z"}
{"level":"warn","message":"File generation failed for Login: Failed to save stagedFiles for Login: Cannot read properties of undefined (reading 'includes')","stack":"Error: Failed to save stagedFiles for Login: Cannot read properties of undefined (reading 'includes')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1035:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:12.118Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 1/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:12.147Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 2/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:13.659Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 3/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:16.670Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 4/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:21.179Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 5/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:27.192Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 6/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:34.710Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 7/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:43.728Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 8/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:51:54.242Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 9/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:06.247Z"}
{"level":"warn","message":"DB save failed for Dashboard: Cannot read properties of undefined (reading 'includes'), attempt 10/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:19.757Z"}
{"level":"warn","message":"File generation failed for Dashboard: Failed to save stagedFiles for Dashboard: Cannot read properties of undefined (reading 'includes')","stack":"Error: Failed to save stagedFiles for Dashboard: Cannot read properties of undefined (reading 'includes')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1035:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:19.758Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 1/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:19.782Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 2/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:21.304Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 3/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:24.319Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 4/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:28.835Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 5/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:34.851Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 6/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:42.365Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 7/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:52:51.369Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 8/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:01.889Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 9/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:13.900Z"}
{"level":"warn","message":"DB save failed for SponsorProfile: Cannot read properties of undefined (reading 'includes'), attempt 10/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:27.410Z"}
{"level":"warn","message":"File generation failed for SponsorProfile: Failed to save stagedFiles for SponsorProfile: Cannot read properties of undefined (reading 'includes')","stack":"Error: Failed to save stagedFiles for SponsorProfile: Cannot read properties of undefined (reading 'includes')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1035:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:27.410Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 1/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:27.451Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 2/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:28.958Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 3/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:31.971Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 4/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:36.479Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 5/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:42.497Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 6/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:50.013Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 7/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:53:59.021Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 8/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:09.531Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 9/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:21.545Z"}
{"level":"warn","message":"DB save failed for EmployeeLog: Cannot read properties of undefined (reading 'includes'), attempt 10/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:35.065Z"}
{"level":"warn","message":"File generation failed for EmployeeLog: Failed to save stagedFiles for EmployeeLog: Cannot read properties of undefined (reading 'includes')","stack":"Error: Failed to save stagedFiles for EmployeeLog: Cannot read properties of undefined (reading 'includes')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1035:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:35.065Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 1/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:35.090Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 2/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:36.602Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 3/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:39.610Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 4/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:44.117Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 5/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:50.122Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 6/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:54:57.637Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 7/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:06.641Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 8/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:17.156Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 9/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:29.167Z"}
{"level":"warn","message":"DB save failed for Settings: Cannot read properties of undefined (reading 'includes'), attempt 10/10","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:42.676Z"}
{"level":"warn","message":"File generation failed for Settings: Failed to save stagedFiles for Settings: Cannot read properties of undefined (reading 'includes')","stack":"Error: Failed to save stagedFiles for Settings: Cannot read properties of undefined (reading 'includes')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1035:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:42.676Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: Login\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:141:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:288:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1447:25)","taskId":"Login","timestamp":"2025-04-19T17:55:43.747Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:142:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:288:30)\n    at runNextTicks (node:internal/process/task_queues:60:5)\n    at process.processImmediate (node:internal/timers:449:9)\n    at process.callbackTrampoline (node:internal/async_hooks:130:17)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1447:25)","taskId":"Login","timestamp":"2025-04-19T17:55:43.747Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T17:55:43.822Z"}
{"attempt":1,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:43.833Z"}
{"attempt":2,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:43.984Z"}
{"attempt":3,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:45.642Z"}
{"attempt":4,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:48.797Z"}
{"attempt":5,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:53.448Z"}
{"attempt":6,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:55:59.593Z"}
{"attempt":7,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:56:07.240Z"}
{"attempt":8,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:56:16.376Z"}
{"attempt":9,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:56:27.016Z"}
{"attempt":10,"level":"warn","message":"No staged files for testing, retrying","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:56:39.178Z"}
{"level":"error","message":"No staged files available for testing after retries","taskId":"8249b9a5-e7c8-4df2-bbee-197a6706ae33","timestamp":"2025-04-19T17:56:52.820Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-19T18:13:45.347Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T18:13:45.372Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-19T18:13:45.348Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.750Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:24.751Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.754Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:24.754Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.757Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:24.758Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:24.774Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.825Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:24.826Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:24.848Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.872Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:24.872Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.902Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:24.902Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.911Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:24.911Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.915Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:24.915Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:24.917Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.948Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:24.949Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:24.969Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.982Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:24.983Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:24.987Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:24.987Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:25.041Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:25.041Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:29.135Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-19T18:14:29.136Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.809Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:32.809Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.811Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:32.812Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.814Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:32.814Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:32.824Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.831Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:32.831Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:32.890Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.902Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:32.902Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.920Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:32.920Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.958Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:32.958Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.962Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:32.963Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:32.967Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.990Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:14:32.991Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:32.995Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:32.995Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:14:33.003Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:33.008Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:14:33.008Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:33.063Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:14:33.063Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:14:48.013Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-19T18:14:48.014Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-19T18:14:48.014Z"}
{"level":"info","message":"Task queued: 713126b8-0466-441d-8dd9-9c1672e051e7","prompt":"Build CRM system","timestamp":"2025-04-19T18:14:48.032Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T18:14:48.037Z"}
{"level":"debug","message":"Task initialized: 713126b8-0466-441d-8dd9-9c1672e051e7, stagedFiles: []","timestamp":"2025-04-19T18:14:48.042Z"}
{"level":"info","message":"Task started: 713126b8-0466-441d-8dd9-9c1672e051e7, Prompt: Build CRM system","timestamp":"2025-04-19T18:14:48.042Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T18:14:51.999Z"}
{"level":"info","message":"System analysis completed: files=840, logs=65, memory=20, security=40, uxIssues=835, flowIssues=25","timestamp":"2025-04-19T18:14:52.946Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-19T18:14:52.947Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T18:14:52.947Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v63.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:52.988Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v63.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.002Z"}
{"level":"debug","message":"Post-reload stagedFiles for Login: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.518Z"}
{"level":"warn","message":"No staged files after reload for Login, attempting re-generation","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.518Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.556Z"}
{"level":"warn","message":"File generation failed for Login: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1149:72)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.558Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v37.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.595Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v37.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:53.598Z"}
{"level":"debug","message":"Post-reload stagedFiles for Dashboard: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.112Z"}
{"level":"warn","message":"No staged files after reload for Dashboard, attempting re-generation","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.112Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.154Z"}
{"level":"warn","message":"File generation failed for Dashboard: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1149:72)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.156Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v37.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.186Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v37.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.189Z"}
{"level":"debug","message":"Post-reload stagedFiles for SponsorProfile: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.694Z"}
{"level":"warn","message":"No staged files after reload for SponsorProfile, attempting re-generation","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.694Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.728Z"}
{"level":"warn","message":"File generation failed for SponsorProfile: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1149:72)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.729Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v62.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.784Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v62.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:54.787Z"}
{"level":"debug","message":"Post-reload stagedFiles for EmployeeLog: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.290Z"}
{"level":"warn","message":"No staged files after reload for EmployeeLog, attempting re-generation","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.290Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.327Z"}
{"level":"warn","message":"File generation failed for EmployeeLog: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1149:72)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.329Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v37.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.358Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v37.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.360Z"}
{"level":"debug","message":"Post-reload stagedFiles for Settings: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.864Z"}
{"level":"warn","message":"No staged files after reload for Settings, attempting re-generation","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.864Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.885Z"}
{"level":"warn","message":"File generation failed for Settings: Cannot read properties of undefined (reading 'length')","stack":"TypeError: Cannot read properties of undefined (reading 'length')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1149:72)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:55.887Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T18:14:57.008Z"}
{"attempt":1,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.013Z"}
{"attempt":1,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.013Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v65.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.053Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v39.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.086Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v39.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.110Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v64.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.167Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v39.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.193Z"}
{"attempt":2,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.195Z"}
{"attempt":2,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.195Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v66.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.241Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v40.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.269Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v40.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.289Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v65.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.327Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v40.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:57.352Z"}
{"attempt":3,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:58.866Z"}
{"attempt":3,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:58.866Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v67.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:58.902Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v41.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:58.931Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v41.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:58.959Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v66.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:59.008Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v41.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:14:59.042Z"}
{"attempt":4,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.057Z"}
{"attempt":4,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.058Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v68.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.093Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v42.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.118Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v42.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.140Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v67.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.172Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v42.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:02.195Z"}
{"attempt":5,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.710Z"}
{"attempt":5,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.710Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v69.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.742Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v43.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.768Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v43.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.789Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v68.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.829Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v43.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:06.860Z"}
{"attempt":6,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:12.871Z"}
{"attempt":6,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:12.871Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v70.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:12.901Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v44.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:12.927Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v44.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:12.951Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v69.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:12.984Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v44.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:13.004Z"}
{"attempt":7,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.515Z"}
{"attempt":7,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.515Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v71.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.587Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v45.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.627Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v45.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.657Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v70.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.703Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v45.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:20.731Z"}
{"attempt":8,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.745Z"}
{"attempt":8,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.745Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v72.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.783Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v46.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.814Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v46.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.842Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v71.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.878Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v46.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:29.903Z"}
{"attempt":9,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.411Z"}
{"attempt":9,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.411Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v73.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.467Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v47.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.505Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v47.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.531Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v72.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.580Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v47.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:40.607Z"}
{"attempt":10,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.624Z"}
{"attempt":10,"level":"warn","message":"No staged files for testing, retrying","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.625Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v74.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.670Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v48.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.701Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v48.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.732Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v73.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.775Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v48.jsx\"]","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:15:52.798Z"}
{"level":"error","message":"No staged files available for testing after retries","taskId":"713126b8-0466-441d-8dd9-9c1672e051e7","timestamp":"2025-04-19T18:16:06.313Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-19T18:27:35.979Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T18:27:35.999Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-19T18:27:35.980Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.012Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:27:42.013Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.015Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:27:42.015Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.017Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:27:42.017Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:27:42.034Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.082Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:27:42.083Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:27:42.094Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.111Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:27:42.111Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.137Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:27:42.138Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.185Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:27:42.185Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.187Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:27:42.187Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:27:42.192Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.208Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:27:42.208Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:27:42.215Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.219Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:27:42.220Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.222Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:27:42.222Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:42.291Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:27:42.292Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:44.853Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-19T18:27:44.854Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:27:44.882Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:27:44.882Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:28:10.357Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-19T18:28:10.357Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-19T18:28:10.357Z"}
{"level":"info","message":"Task queued: d91ac645-1bf8-42e7-a318-7b36c7597f70","prompt":"Build CRM system","timestamp":"2025-04-19T18:28:10.372Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T18:28:10.375Z"}
{"level":"debug","message":"Task initialized: d91ac645-1bf8-42e7-a318-7b36c7597f70, stagedFiles: []","timestamp":"2025-04-19T18:28:10.380Z"}
{"level":"info","message":"Task started: d91ac645-1bf8-42e7-a318-7b36c7597f70, Prompt: Build CRM system","timestamp":"2025-04-19T18:28:10.381Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T18:28:14.182Z"}
{"level":"info","message":"System analysis completed: files=900, logs=65, memory=20, security=40, uxIssues=895, flowIssues=25","timestamp":"2025-04-19T18:28:14.882Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-19T18:28:14.882Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T18:28:14.883Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:14.887Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v75.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:14.946Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v75.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:14.952Z"}
{"level":"debug","message":"Post-reload stagedFiles for Login: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.469Z"}
{"level":"warn","message":"No staged files after reload for Login, attempting re-generation","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.470Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.508Z"}
{"level":"warn","message":"No valid staged file for Login","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.508Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: []","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.512Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v49.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.549Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v49.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:15.553Z"}
{"level":"debug","message":"Post-reload stagedFiles for Dashboard: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.070Z"}
{"level":"warn","message":"No staged files after reload for Dashboard, attempting re-generation","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.070Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.107Z"}
{"level":"warn","message":"No valid staged file for Dashboard","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.108Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: []","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.111Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v49.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.144Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v49.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.146Z"}
{"level":"debug","message":"Post-reload stagedFiles for SponsorProfile: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.661Z"}
{"level":"warn","message":"No staged files after reload for SponsorProfile, attempting re-generation","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.661Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.690Z"}
{"level":"warn","message":"No valid staged file for SponsorProfile","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.690Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: []","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.694Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v74.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.747Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v74.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:16.749Z"}
{"level":"debug","message":"Post-reload stagedFiles for EmployeeLog: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.258Z"}
{"level":"warn","message":"No staged files after reload for EmployeeLog, attempting re-generation","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.259Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.307Z"}
{"level":"warn","message":"No valid staged file for EmployeeLog","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.307Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: []","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.311Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v49.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.343Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v49.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.345Z"}
{"level":"debug","message":"Post-reload stagedFiles for Settings: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.855Z"}
{"level":"warn","message":"No staged files after reload for Settings, attempting re-generation","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.855Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.896Z"}
{"level":"warn","message":"No valid staged file for Settings","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:17.896Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T18:28:18.905Z"}
{"attempt":1,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:18.909Z"}
{"attempt":1,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:18.909Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v77.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:18.955Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v51.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:18.996Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v51.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.022Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v76.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.073Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v51.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.104Z"}
{"attempt":2,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.113Z"}
{"attempt":2,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.113Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v78.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.158Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v52.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.188Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v52.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.225Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v77.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.286Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v52.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:19.329Z"}
{"attempt":3,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.842Z"}
{"attempt":3,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.842Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v79.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.877Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v53.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.906Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v53.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.930Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v78.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.967Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v53.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:20.990Z"}
{"attempt":4,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.009Z"}
{"attempt":4,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.009Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v80.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.044Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v54.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.072Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v54.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.097Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v79.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.132Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v54.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:24.156Z"}
{"attempt":5,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.667Z"}
{"attempt":5,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.667Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v81.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.711Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v55.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.741Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v55.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.768Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v80.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.802Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v55.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:28.833Z"}
{"attempt":6,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:34.842Z"}
{"attempt":6,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:34.844Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v82.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:34.876Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v56.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:34.911Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v56.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:34.937Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v81.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:34.978Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v56.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:35.001Z"}
{"attempt":7,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.520Z"}
{"attempt":7,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.520Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v83.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.561Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v57.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.590Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v57.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.619Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v82.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.655Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v57.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:42.677Z"}
{"attempt":8,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.685Z"}
{"attempt":8,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.685Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v84.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.736Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v58.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.767Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v58.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.794Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v83.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.831Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v58.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:28:51.861Z"}
{"attempt":9,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.365Z"}
{"attempt":9,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.366Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v85.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.423Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v59.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.463Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v59.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.495Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v84.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.537Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v59.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:02.569Z"}
{"attempt":10,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.575Z"}
{"attempt":10,"level":"warn","message":"No staged files for testing, retrying","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.575Z"}
{"level":"debug","message":"Re-generated stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v86.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.645Z"}
{"level":"debug","message":"Re-generated stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v60.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.687Z"}
{"level":"debug","message":"Re-generated stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v60.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.730Z"}
{"level":"debug","message":"Re-generated stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v85.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.793Z"}
{"level":"debug","message":"Re-generated stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v60.jsx\"]","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:14.836Z"}
{"level":"error","message":"No staged files available for testing after retries","taskId":"d91ac645-1bf8-42e7-a318-7b36c7597f70","timestamp":"2025-04-19T18:29:28.337Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-19T18:45:23.300Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-19T18:45:23.319Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-19T18:45:23.301Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.348Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:09.349Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.352Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:09.352Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.354Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:09.354Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:09.368Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.418Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:09.419Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:09.431Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.446Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:09.447Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.468Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:09.468Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.470Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:09.471Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:09.474Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.512Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:09.512Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.516Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:09.517Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:09.523Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.541Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:09.541Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.577Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:09.579Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:09.607Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:09.608Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:18.913Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:18.913Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:18.915Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:18.915Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:18.917Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:18.917Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:18.923Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:18.972Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:18.973Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:18.983Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:18.988Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:18.989Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.004Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:19.004Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.039Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:19.039Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.042Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:19.042Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:19.045Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.061Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T18:46:19.061Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.065Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:19.066Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T18:46:19.066Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.070Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:19.070Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:19.123Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T18:46:19.123Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:22.964Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-19T18:46:22.965Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:22.996Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T18:46:22.997Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T18:46:41.340Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-19T18:46:41.341Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-19T18:46:41.341Z"}
{"level":"info","message":"Task queued: 43a4428f-1723-4d49-bfd8-e154273c5582","prompt":"Build CRM system","timestamp":"2025-04-19T18:46:41.355Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T18:46:41.357Z"}
{"level":"debug","message":"Task initialized: 43a4428f-1723-4d49-bfd8-e154273c5582, stagedFiles: []","timestamp":"2025-04-19T18:46:41.362Z"}
{"level":"info","message":"Task started: 43a4428f-1723-4d49-bfd8-e154273c5582, Prompt: Build CRM system","timestamp":"2025-04-19T18:46:41.362Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T18:46:45.256Z"}
{"level":"info","message":"System analysis completed: files=960, logs=65, memory=20, security=40, uxIssues=955, flowIssues=25","timestamp":"2025-04-19T18:46:46.153Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-19T18:46:46.154Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-19T18:46:46.154Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.157Z"}
{"level":"warn","message":"Invalid or missing generated file for Login","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.211Z"}
{"level":"warn","message":"File generation failed for Login: Invalid generated file path for Login","stack":"Error: Invalid generated file path for Login\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1020:21)","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.211Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v87.jsx\"]","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.216Z"}
{"level":"warn","message":"Invalid or missing generated file for Dashboard","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.256Z"}
{"level":"warn","message":"File generation failed for Dashboard: Invalid generated file path for Dashboard","stack":"Error: Invalid generated file path for Dashboard\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1020:21)","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.256Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v87.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v61.jsx\"]","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.260Z"}
{"level":"warn","message":"Invalid or missing generated file for SponsorProfile","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.306Z"}
{"level":"warn","message":"File generation failed for SponsorProfile: Invalid generated file path for SponsorProfile","stack":"Error: Invalid generated file path for SponsorProfile\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1020:21)","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.307Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v87.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v61.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v61.jsx\"]","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.311Z"}
{"level":"warn","message":"Invalid or missing generated file for EmployeeLog","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.379Z"}
{"level":"warn","message":"File generation failed for EmployeeLog: Invalid generated file path for EmployeeLog","stack":"Error: Invalid generated file path for EmployeeLog\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1020:21)","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.380Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v87.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v61.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v61.jsx\",\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v86.jsx\"]","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.384Z"}
{"level":"warn","message":"Invalid or missing generated file for Settings","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.433Z"}
{"level":"warn","message":"File generation failed for Settings: Invalid generated file path for Settings","stack":"Error: Invalid generated file path for Settings\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1020:21)","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:46.434Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: Login\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:141:8)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:288:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1541:25)","taskId":"Login","timestamp":"2025-04-19T18:46:47.486Z"}
{"level":"warn","message":"Cannot generate Playwright test: Invalid taskId","stack":"Error\n    at generatePlaywrightTest (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:142:106)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:288:30)\n    at async processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1541:25)","taskId":"Login","timestamp":"2025-04-19T18:46:47.487Z"}
{"level":"info","message":"Test results: {\"/\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/dashboard\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/sponsor/1\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/employee-log\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/settings\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"},\"/grok\":{\"status\":200,\"working\":true,\"title\":\"IDURAR ERP CRM | Free Open Source Accounting Invoice Quote\"}}","timestamp":"2025-04-19T18:46:47.555Z"}
{"attempt":1,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:47.559Z"}
{"attempt":1,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:47.560Z"}
{"attempt":2,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:47.849Z"}
{"attempt":2,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:47.849Z"}
{"attempt":3,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:49.557Z"}
{"attempt":3,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:49.557Z"}
{"attempt":4,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:52.741Z"}
{"attempt":4,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:52.741Z"}
{"attempt":5,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:57.438Z"}
{"attempt":5,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:46:57.438Z"}
{"attempt":6,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:03.612Z"}
{"attempt":6,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:03.613Z"}
{"attempt":7,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:11.336Z"}
{"attempt":7,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:11.337Z"}
{"attempt":8,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:20.506Z"}
{"attempt":8,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:20.506Z"}
{"attempt":9,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:31.202Z"}
{"attempt":9,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:31.203Z"}
{"attempt":10,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:43.397Z"}
{"attempt":10,"level":"warn","message":"No staged files for testing, retrying","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:43.397Z"}
{"level":"error","message":"No staged files available for testing after retries","taskId":"43a4428f-1723-4d49-bfd8-e154273c5582","timestamp":"2025-04-19T18:47:57.085Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:36.336Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T23:59:36.336Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:36.338Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T23:59:36.338Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:36.341Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T23:59:36.341Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T23:59:36.345Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:36.360Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T23:59:36.361Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T23:59:36.402Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:36.409Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T23:59:36.410Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:36.428Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T23:59:36.428Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.354Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T23:59:39.354Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.357Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T23:59:39.357Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.359Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T23:59:39.359Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T23:59:39.362Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.386Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T23:59:39.386Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T23:59:39.438Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.458Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T23:59:39.459Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.468Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T23:59:39.469Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T23:59:39.472Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.483Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T23:59:39.483Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.485Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-19T23:59:39.485Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-19T23:59:39.488Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.527Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T23:59:39.528Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.567Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-19T23:59:39.567Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.570Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T23:59:39.570Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-19T23:59:39.622Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-19T23:59:39.622Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T00:04:22.463Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T00:04:22.464Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T00:04:22.484Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.428Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:26.428Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.430Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:26.431Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.433Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:26.434Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:26.450Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.512Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:26.513Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:26.523Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.538Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:26.540Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.558Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:26.558Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.605Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:26.605Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.607Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:26.607Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.611Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:26.612Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:26.613Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.635Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:26.636Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:26.684Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.690Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:26.691Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:26.709Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:26.709Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.227Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:30.228Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.231Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:30.231Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.233Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:30.233Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:30.239Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.257Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:30.257Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:30.313Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.315Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:30.316Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.336Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:30.337Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.386Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:30.387Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.390Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:30.390Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:30.399Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.403Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:30.403Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:30.418Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.423Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:30.423Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.425Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:30.425Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:30.489Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:30.489Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:37.614Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-20T00:04:37.615Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:37.647Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:37.647Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:41.987Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:41.987Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:41.991Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:41.992Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:41.994Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:41.994Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:42.003Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.028Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:42.028Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:42.076Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.079Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:42.079Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.106Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:42.107Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.111Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:42.111Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:42.113Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.116Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:42.116Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.185Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:04:42.188Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:04:42.195Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.222Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:42.222Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.224Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:04:42.224Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:42.279Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:04:42.279Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:04:47.186Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T00:04:47.187Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-20T00:04:47.187Z"}
{"level":"info","message":"Task queued: 77b35e2f-a0f6-42e4-b999-da84cdb30064","prompt":"Build CRM system","timestamp":"2025-04-20T00:04:47.200Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T00:04:47.203Z"}
{"level":"debug","message":"Task initialized: 77b35e2f-a0f6-42e4-b999-da84cdb30064, stagedFiles: []","timestamp":"2025-04-20T00:04:47.209Z"}
{"level":"info","message":"Task started: 77b35e2f-a0f6-42e4-b999-da84cdb30064, Prompt: Build CRM system","timestamp":"2025-04-20T00:04:47.209Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: system\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:277:8)\n    at analyzeSystem (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:345:30)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:869:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"system","timestamp":"2025-04-20T00:04:47.210Z"}
{"level":"warn","message":"Run tests skipped: Invalid taskId","stack":"Error\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:278:71)\n    at analyzeSystem (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:345:30)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:869:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"system","timestamp":"2025-04-20T00:04:47.210Z"}
{"level":"info","message":"System analysis completed: files=1015, logs=65, memory=20, security=40, uxIssues=1010, flowIssues=25","timestamp":"2025-04-20T00:04:48.411Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-20T00:04:48.412Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T00:04:48.412Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:48.417Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v98.jsx","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:48.511Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v98.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:48.512Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v98.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:48.519Z"}
{"level":"debug","message":"Post-reload stagedFiles for Login: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:49.031Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login: undefined","stack":"Error: Staged files not persisted for Login: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1120:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:49.032Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: []","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:50.049Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v72.jsx","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:50.116Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v72.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:50.116Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v72.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:50.119Z"}
{"level":"debug","message":"Post-reload stagedFiles for Dashboard: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:50.632Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard: undefined","stack":"Error: Staged files not persisted for Dashboard: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1120:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:50.632Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: []","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:51.640Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v72.jsx","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:51.678Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v72.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:51.678Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v72.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:51.681Z"}
{"level":"debug","message":"Post-reload stagedFiles for SponsorProfile: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:52.189Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile: undefined","stack":"Error: Staged files not persisted for SponsorProfile: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1120:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:52.189Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: []","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:53.194Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v97.jsx","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:53.246Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v97.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:53.247Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v97.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:53.249Z"}
{"level":"debug","message":"Post-reload stagedFiles for EmployeeLog: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:53.760Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog: undefined","stack":"Error: Staged files not persisted for EmployeeLog: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1120:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:53.760Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: []","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:54.768Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v72.jsx","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:54.805Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v72.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:54.805Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v72.jsx\"]","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:54.807Z"}
{"level":"debug","message":"Post-reload stagedFiles for Settings: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:55.315Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings: undefined","stack":"Error: Staged files not persisted for Settings: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1120:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:55.315Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: system\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:277:8)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1468:31)","taskId":"system","timestamp":"2025-04-20T00:04:56.331Z"}
{"level":"warn","message":"Run tests skipped: Invalid taskId","stack":"Error\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:278:71)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1468:31)","taskId":"system","timestamp":"2025-04-20T00:04:56.331Z"}
{"attempt":1,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.336Z"}
{"attempt":1,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.336Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.407Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.449Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.495Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.549Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.586Z"}
{"attempt":2,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.597Z"}
{"attempt":2,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.597Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.648Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.693Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.743Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.792Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:56.830Z"}
{"attempt":3,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.345Z"}
{"attempt":3,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.346Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.388Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.425Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.480Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.529Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:04:58.560Z"}
{"attempt":4,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.573Z"}
{"attempt":4,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.573Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.622Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.661Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.710Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.762Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:01.801Z"}
{"attempt":5,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.315Z"}
{"attempt":5,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.315Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.362Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.397Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.429Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.488Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:06.521Z"}
{"attempt":6,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.538Z"}
{"attempt":6,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.538Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.589Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.628Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.664Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.709Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:12.745Z"}
{"attempt":7,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.263Z"}
{"attempt":7,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.264Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.308Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.347Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.386Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.437Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:20.473Z"}
{"attempt":8,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.490Z"}
{"attempt":8,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.491Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.543Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.587Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.624Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.680Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:29.716Z"}
{"attempt":9,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.230Z"}
{"attempt":9,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.230Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.285Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.320Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.364Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.413Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:40.451Z"}
{"attempt":10,"level":"debug","message":"Pre-test stagedFiles verification: undefined","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.461Z"}
{"attempt":10,"level":"warn","message":"No staged files for testing, retrying","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.462Z"}
{"level":"warn","message":"Re-generation failed for Login: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.511Z"}
{"level":"warn","message":"Re-generation failed for Dashboard: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.555Z"}
{"level":"warn","message":"Re-generation failed for SponsorProfile: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.594Z"}
{"level":"warn","message":"Re-generation failed for EmployeeLog: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.643Z"}
{"level":"warn","message":"Re-generation failed for Settings: fs.exists is not a function","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:05:52.688Z"}
{"level":"error","message":"No staged files available for testing after retries","taskId":"77b35e2f-a0f6-42e4-b999-da84cdb30064","timestamp":"2025-04-20T00:06:06.191Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T00:32:06.818Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T00:32:06.818Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T00:32:06.834Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.220Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:28.221Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.223Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:28.223Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.224Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:28.225Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:28.237Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.285Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:28.286Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:28.297Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.313Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:28.313Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.315Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:28.315Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:28.317Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.320Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:28.320Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.338Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:28.338Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:28.342Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.345Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:28.345Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.400Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:28.401Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.402Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:28.402Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:28.458Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:28.459Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.669Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:33.670Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.672Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:33.672Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.673Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:33.673Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:33.680Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.740Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:33.740Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:33.750Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.754Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:33.754Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.759Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:33.759Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.773Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:33.773Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:33.778Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.815Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:33.815Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.816Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:32:33.816Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:32:33.820Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.841Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:33.841Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.843Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:33.843Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:33.922Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:32:33.922Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:38.043Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/delete-task","timestamp":"2025-04-20T00:32:38.044Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:32:38.072Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:32:38.072Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:33:06.358Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T00:33:06.359Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-20T00:33:06.359Z"}
{"level":"info","message":"Task queued: 71f5a911-aa79-44d9-b3b0-4aca26e15ad6","prompt":"Build CRM system","timestamp":"2025-04-20T00:33:06.369Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T00:33:06.372Z"}
{"level":"debug","message":"Task initialized: 71f5a911-aa79-44d9-b3b0-4aca26e15ad6, stagedFiles: []","timestamp":"2025-04-20T00:33:06.375Z"}
{"level":"info","message":"Task started: 71f5a911-aa79-44d9-b3b0-4aca26e15ad6, Prompt: Build CRM system","timestamp":"2025-04-20T00:33:06.375Z"}
{"level":"warn","message":"Invalid taskId detected","stack":"Error: Invalid taskId: system\n    at isValidTaskId (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:104:19)\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:277:8)\n    at analyzeSystem (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:345:30)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:869:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"system","timestamp":"2025-04-20T00:33:06.376Z"}
{"level":"warn","message":"Run tests skipped: Invalid taskId","stack":"Error\n    at runTests (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:278:71)\n    at analyzeSystem (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:345:30)\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:869:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"system","timestamp":"2025-04-20T00:33:06.376Z"}
{"level":"info","message":"System analysis completed: files=1070, logs=65, memory=20, security=40, uxIssues=1065, flowIssues=25","timestamp":"2025-04-20T00:33:06.990Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-20T00:33:06.990Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T00:33:06.990Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:07.000Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v109.jsx","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:07.041Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v109.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:07.041Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v109.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:07.046Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login: undefined","stack":"Error: Staged files not persisted for Login: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1089:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:08.052Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: undefined","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:11.074Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v83.jsx","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:11.101Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v83.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:11.101Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v83.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:11.103Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard: undefined","stack":"Error: Staged files not persisted for Dashboard: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1089:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:12.105Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: undefined","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:15.119Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v83.jsx","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:15.144Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v83.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:15.144Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v83.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:15.146Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile: undefined","stack":"Error: Staged files not persisted for SponsorProfile: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1089:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:16.149Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: undefined","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:19.181Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v108.jsx","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:19.235Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v108.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:19.236Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v108.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:19.237Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog: undefined","stack":"Error: Staged files not persisted for EmployeeLog: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1089:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:20.250Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: undefined","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:23.276Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v83.jsx","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:23.303Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v83.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:23.304Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v83.jsx\"]","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:23.305Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings: undefined","stack":"Error: Staged files not persisted for Settings: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1089:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:24.321Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"71f5a911-aa79-44d9-b3b0-4aca26e15ad6","timestamp":"2025-04-20T00:33:27.337Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T00:43:41.915Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T00:43:41.933Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T00:43:41.915Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.468Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:43:50.469Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.471Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:43:50.472Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.473Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:43:50.474Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:43:50.489Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.495Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:43:50.496Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:43:50.547Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.571Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:43:50.571Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.594Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:43:50.594Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.605Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:43:50.606Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:43:50.611Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.615Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:43:50.615Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.618Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:43:50.618Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:43:50.662Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.690Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:43:50.690Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.695Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:43:50.695Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:43:50.761Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:43:50.762Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:04.530Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-20T00:44:04.531Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:04.556Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:04.556Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.485Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:07.485Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.489Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:07.490Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.491Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:07.491Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:07.502Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.574Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:07.574Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:07.585Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.587Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:07.587Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.611Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:07.612Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.615Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:07.616Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.619Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:07.620Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:07.621Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.685Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:07.686Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:07.695Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.702Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:07.702Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.722Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:07.723Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:07.778Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:07.779Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.377Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:15.377Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.379Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:15.379Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.381Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:15.381Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:15.388Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.477Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:15.477Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:15.484Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.490Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:15.491Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.493Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:15.494Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:15.498Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.501Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:15.501Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.518Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:44:15.519Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:44:15.521Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.584Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:15.585Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.620Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:15.620Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.622Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:44:15.622Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:44:15.703Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:44:15.704Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:45:03.981Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T00:45:03.982Z"}
{"level":"debug","message":"Request body:","prompt":"build CRM system","timestamp":"2025-04-20T00:45:03.982Z"}
{"level":"info","message":"Task queued: ce9c496a-0543-4f5b-b01d-9b2ad27913cd","prompt":"build CRM system","timestamp":"2025-04-20T00:45:03.997Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T00:58:18.982Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T00:58:18.983Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T00:58:18.997Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.354Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:27.355Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.357Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:27.357Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.359Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:27.359Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:27.381Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.448Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:27.449Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:27.456Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.467Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:27.467Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.484Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:27.485Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.539Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:27.539Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.543Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:27.543Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:27.547Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.565Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:27.566Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.568Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:27.568Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:27.575Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.577Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:27.578Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:27.645Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:27.645Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:34.997Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-20T00:58:34.997Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:35.022Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:35.022Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.489Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:42.490Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.491Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:42.491Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.494Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:42.494Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:42.502Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.565Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:42.565Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:42.575Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.580Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:42.580Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.596Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:42.596Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.645Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:42.645Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.647Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:42.647Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:42.652Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.657Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T00:58:42.657Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.671Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:42.671Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T00:58:42.673Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.737Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T00:58:42.738Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:42.771Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T00:58:42.771Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T00:58:56.928Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T00:58:56.929Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-20T00:58:56.930Z"}
{"level":"info","message":"Task queued: 3aa7dee5-8c08-4404-af68-6624c23434a9","prompt":"Build CRM system","timestamp":"2025-04-20T00:58:56.940Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T00:58:56.944Z"}
{"level":"debug","message":"Task initialized: 3aa7dee5-8c08-4404-af68-6624c23434a9, stagedFiles: []","timestamp":"2025-04-20T00:58:56.948Z"}
{"level":"info","message":"Task started: 3aa7dee5-8c08-4404-af68-6624c23434a9, Prompt: Build CRM system","timestamp":"2025-04-20T00:58:56.949Z"}
{"level":"info","message":"System analysis completed: files=1075, logs=65, memory=20, security=40, uxIssues=1070, flowIssues=25","timestamp":"2025-04-20T00:58:57.628Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-20T00:58:57.628Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T00:58:57.629Z"}
{"level":"debug","message":"Saved original content for Login","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:58:57.633Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:58:57.633Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v110.jsx","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:58:57.669Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v110.jsx\"]","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:58:57.670Z"}
{"level":"debug","message":"Saved stagedFiles for Login: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:58:57.674Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login: undefined","stack":"Error: Staged files not persisted for Login: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1082:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:58:59.178Z"}
{"level":"debug","message":"Saved original content for Dashboard","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:03.202Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:03.203Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v84.jsx","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:03.247Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v84.jsx\"]","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:03.247Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:03.249Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard: undefined","stack":"Error: Staged files not persisted for Dashboard: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1082:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:04.755Z"}
{"level":"debug","message":"Saved original content for SponsorProfile","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:08.771Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:08.772Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v84.jsx","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:08.801Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v84.jsx\"]","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:08.801Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:08.804Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile: undefined","stack":"Error: Staged files not persisted for SponsorProfile: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1082:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:10.310Z"}
{"level":"debug","message":"Saved original content for EmployeeLog","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:14.331Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:14.332Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v109.jsx","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:14.360Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v109.jsx\"]","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:14.361Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:14.362Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog: undefined","stack":"Error: Staged files not persisted for EmployeeLog: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1082:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:15.865Z"}
{"level":"debug","message":"Saved original content for Settings","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:19.893Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:19.893Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v84.jsx","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:19.918Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v84.jsx\"]","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:19.918Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: undefined","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:19.921Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings: undefined","stack":"Error: Staged files not persisted for Settings: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1082:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:21.432Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"3aa7dee5-8c08-4404-af68-6624c23434a9","timestamp":"2025-04-20T00:59:25.451Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T01:08:53.073Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T01:08:53.093Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T01:08:53.074Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.481Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:09:00.481Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.483Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:09:00.483Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.484Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:09:00.485Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:09:00.499Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.576Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:09:00.577Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:09:00.596Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.618Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:09:00.619Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.636Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:09:00.636Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.712Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:09:00.712Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.715Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:09:00.715Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:09:00.728Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.739Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:09:00.739Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.746Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:09:00.747Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:09:00.748Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.753Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:09:00.753Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:00.823Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:09:00.823Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:07.735Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-20T01:09:07.736Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:07.753Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:09:07.753Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:09:22.897Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T01:09:22.898Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-20T01:09:22.898Z"}
{"level":"info","message":"Task queued: 85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","prompt":"Build CRM system","timestamp":"2025-04-20T01:09:22.910Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T01:09:22.915Z"}
{"level":"debug","message":"Task initialized: 85279ad4-f560-4cd3-a5ec-0ff2d515a9cc, stagedFiles: []","timestamp":"2025-04-20T01:09:22.919Z"}
{"level":"info","message":"Task started: 85279ad4-f560-4cd3-a5ec-0ff2d515a9cc, Prompt: Build CRM system","timestamp":"2025-04-20T01:09:22.919Z"}
{"level":"info","message":"System analysis completed: files=1080, logs=65, memory=20, security=40, uxIssues=1075, flowIssues=25","timestamp":"2025-04-20T01:09:23.871Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-20T01:09:23.872Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T01:09:23.872Z"}
{"level":"debug","message":"Saved original content for Login","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:23.878Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:23.878Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v111.jsx","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:23.925Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v111.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:23.925Z"}
{"level":"debug","message":"Saved stagedFiles for Login: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v111.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:23.927Z"}
{"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:25.938Z"}
{"level":"debug","message":"Fallback verification update for Login: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:25.941Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login after fallback: undefined","stack":"Error: Staged files not persisted for Login after fallback: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1112:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:25.941Z"}
{"level":"debug","message":"Saved original content for Dashboard","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:30.972Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:30.972Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v85.jsx","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:31.003Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v85.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:31.003Z"}
{"level":"debug","message":"Saved stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v85.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:31.005Z"}
{"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:33.020Z"}
{"level":"debug","message":"Fallback verification update for Dashboard: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:33.021Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard after fallback: undefined","stack":"Error: Staged files not persisted for Dashboard after fallback: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1112:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:33.022Z"}
{"level":"debug","message":"Saved original content for SponsorProfile","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:38.043Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:38.044Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v85.jsx","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:38.075Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v85.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:38.075Z"}
{"level":"debug","message":"Saved stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v85.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:38.077Z"}
{"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:40.085Z"}
{"level":"debug","message":"Fallback verification update for SponsorProfile: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:40.086Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile after fallback: undefined","stack":"Error: Staged files not persisted for SponsorProfile after fallback: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1112:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:40.087Z"}
{"level":"debug","message":"Saved original content for EmployeeLog","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:45.106Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:45.106Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v110.jsx","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:45.144Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v110.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:45.144Z"}
{"level":"debug","message":"Saved stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v110.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:45.145Z"}
{"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:47.152Z"}
{"level":"debug","message":"Fallback verification update for EmployeeLog: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:47.155Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog after fallback: undefined","stack":"Error: Staged files not persisted for EmployeeLog after fallback: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1112:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:47.156Z"}
{"level":"debug","message":"Saved original content for Settings","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:52.174Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:52.175Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v85.jsx","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:52.202Z"}
{"attempt":1,"level":"debug","message":"Attempting to save stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v85.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:52.202Z"}
{"level":"debug","message":"Saved stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v85.jsx\"]","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:52.203Z"}
{"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:54.221Z"}
{"level":"debug","message":"Fallback verification update for Settings: undefined","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:54.224Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings after fallback: undefined","stack":"Error: Staged files not persisted for Settings after fallback: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1112:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:54.225Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"85279ad4-f560-4cd3-a5ec-0ff2d515a9cc","timestamp":"2025-04-20T01:09:59.239Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T01:14:42.837Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T01:14:42.838Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T01:14:42.856Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.116Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:15:39.117Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.119Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:15:39.119Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.121Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:15:39.121Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:15:39.136Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.217Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:15:39.218Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:15:39.235Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.251Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:15:39.251Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.276Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:15:39.276Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.278Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:15:39.278Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:15:39.283Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.286Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:15:39.287Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.290Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:15:39.290Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:15:39.343Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.372Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:15:39.372Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.376Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:15:39.377Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:39.438Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:15:39.438Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:50.506Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-20T01:15:50.506Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:50.532Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:15:50.532Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:15:59.427Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T01:15:59.428Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-20T01:15:59.428Z"}
{"level":"info","message":"Task queued: e54d1fac-5596-4da8-af7e-471667f45e44","prompt":"Build CRM system","timestamp":"2025-04-20T01:15:59.441Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T01:15:59.445Z"}
{"level":"debug","message":"Task initialized: e54d1fac-5596-4da8-af7e-471667f45e44, stagedFiles: []","timestamp":"2025-04-20T01:15:59.449Z"}
{"level":"info","message":"Task started: e54d1fac-5596-4da8-af7e-471667f45e44, Prompt: Build CRM system","timestamp":"2025-04-20T01:15:59.450Z"}
{"level":"info","message":"System analysis completed: files=1085, logs=65, memory=20, security=40, uxIssues=1080, flowIssues=25","timestamp":"2025-04-20T01:16:00.111Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-20T01:16:00.112Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T01:16:00.112Z"}
{"level":"debug","message":"Saved original content for Login","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:00.116Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:00.116Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v112.jsx","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:00.153Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Cannot set properties of undefined (setting 'Login')","stack":"TypeError: Cannot set properties of undefined (setting 'Login')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1050:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:00.154Z"}
{"level":"debug","message":"Saved original content for Dashboard","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:06.169Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v112.jsx\"]","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:06.169Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v86.jsx","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:06.202Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Cannot set properties of undefined (setting 'Dashboard')","stack":"TypeError: Cannot set properties of undefined (setting 'Dashboard')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1050:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:06.203Z"}
{"level":"debug","message":"Saved original content for SponsorProfile","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:12.225Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v86.jsx\"]","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:12.225Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v86.jsx","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:12.253Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Cannot set properties of undefined (setting 'SponsorProfile')","stack":"TypeError: Cannot set properties of undefined (setting 'SponsorProfile')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1050:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:12.254Z"}
{"level":"debug","message":"Saved original content for EmployeeLog","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:18.273Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v86.jsx\"]","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:18.273Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v111.jsx","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:18.314Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Cannot set properties of undefined (setting 'EmployeeLog')","stack":"TypeError: Cannot set properties of undefined (setting 'EmployeeLog')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1050:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:18.314Z"}
{"level":"debug","message":"Saved original content for Settings","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:24.335Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: [\"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v111.jsx\"]","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:24.335Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v86.jsx","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:24.365Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Cannot set properties of undefined (setting 'Settings')","stack":"TypeError: Cannot set properties of undefined (setting 'Settings')\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1050:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:24.365Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"e54d1fac-5596-4da8-af7e-471667f45e44","timestamp":"2025-04-20T01:16:30.381Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T01:24:59.884Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T01:24:59.885Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T01:24:59.904Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:02.788Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:02.788Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:02.790Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:02.791Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:02.793Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:02.793Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:02.808Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:02.889Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:02.890Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:02.905Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:02.931Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:02.932Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:02.949Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:02.949Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:03.022Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:03.022Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:03.024Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:03.025Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:03.027Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:03.046Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:03.046Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:03.056Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:03.059Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:03.059Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:03.061Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:03.061Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:03.135Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:03.135Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.238Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:07.238Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.241Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:07.241Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.242Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:07.243Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:07.249Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.256Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:07.256Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:07.328Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.336Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:07.336Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.341Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:07.342Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.364Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:07.365Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:07.371Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.417Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:07.418Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.419Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-20T01:25:07.420Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-20T01:25:07.424Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.453Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:07.453Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.455Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:07.456Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:07.526Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-20T01:25:07.527Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:13.876Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-20T01:25:13.877Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:13.903Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-20T01:25:13.903Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-20T01:25:24.898Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-20T01:25:24.899Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-20T01:25:24.899Z"}
{"level":"info","message":"Task queued: 78af0798-49c0-456e-88b6-d9b263e9d27d","prompt":"Build CRM system","timestamp":"2025-04-20T01:25:24.911Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T01:25:24.916Z"}
{"level":"debug","message":"Task initialized: 78af0798-49c0-456e-88b6-d9b263e9d27d, stagedFiles: []","timestamp":"2025-04-20T01:25:24.920Z"}
{"level":"info","message":"Task started: 78af0798-49c0-456e-88b6-d9b263e9d27d, Prompt: Build CRM system","timestamp":"2025-04-20T01:25:24.921Z"}
{"level":"info","message":"System analysis completed: files=1090, logs=65, memory=20, security=40, uxIssues=1085, flowIssues=25","timestamp":"2025-04-20T01:25:25.726Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-20T01:25:25.727Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-20T01:25:25.727Z"}
{"level":"debug","message":"Saved original content for Login","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:25.732Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:25.732Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v113.jsx","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:25.799Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Login: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v113.jsx\"","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:25.799Z"}
{"level":"debug","message":"Update result for Login: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:25.804Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:28.310Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:28.326Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:31.338Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:37.340Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:46.350Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:25:58.364Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:26:13.374Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:26:31.379Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:26:52.396Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:27:16.406Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:27:43.414Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:28:13.419Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:28:46.433Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:29:22.444Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:30:01.456Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:30:43.461Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:31:28.469Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:32:16.482Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:33:07.487Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:34:01.499Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login after verification retries: undefined","stack":"Error: Staged files not persisted for Login after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:34:58.512Z"}
{"level":"debug","message":"Saved original content for Dashboard","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:04.530Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:04.531Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v87.jsx","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:04.572Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Dashboard: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v87.jsx\"","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:04.573Z"}
{"level":"debug","message":"Update result for Dashboard: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:04.575Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:07.089Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:07.104Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:10.113Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:16.123Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:25.136Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:37.153Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:35:52.168Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:36:10.180Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:36:31.183Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:36:55.193Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:37:22.208Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:37:52.211Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:38:25.230Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:39:01.243Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:39:40.248Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:40:22.265Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:41:07.282Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:41:55.292Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:42:46.295Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:43:40.305Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard after verification retries: undefined","stack":"Error: Staged files not persisted for Dashboard after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:37.312Z"}
{"level":"debug","message":"Saved original content for SponsorProfile","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:43.330Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:43.330Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v87.jsx","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:43.363Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for SponsorProfile: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v87.jsx\"","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:43.363Z"}
{"level":"debug","message":"Update result for SponsorProfile: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:43.364Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:45.872Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:45.887Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:48.905Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:44:54.923Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:45:03.933Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:45:15.946Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:45:30.965Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:45:48.971Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:46:09.975Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:46:33.993Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:47:01.006Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:47:31.011Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:48:04.014Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:48:40.019Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:49:19.039Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:50:01.045Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:50:46.050Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:51:34.064Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:52:25.074Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:53:19.081Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile after verification retries: undefined","stack":"Error: Staged files not persisted for SponsorProfile after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:16.089Z"}
{"level":"debug","message":"Saved original content for EmployeeLog","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:22.114Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:22.114Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v112.jsx","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:22.154Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for EmployeeLog: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v112.jsx\"","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:22.154Z"}
{"level":"debug","message":"Update result for EmployeeLog: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:22.156Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:24.659Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:24.673Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:27.676Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:33.679Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:42.689Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:54:54.692Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:55:09.699Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:55:27.708Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:55:48.715Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:56:12.728Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:56:39.745Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:57:09.756Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:57:42.762Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:58:18.767Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:58:57.780Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T01:59:39.789Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:00:24.792Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:01:12.811Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:02:03.823Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:02:57.836Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog after verification retries: undefined","stack":"Error: Staged files not persisted for EmployeeLog after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:03:54.849Z"}
{"level":"debug","message":"Saved original content for Settings","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:00.874Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:00.875Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v87.jsx","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:00.929Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Settings: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v87.jsx\"","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:00.930Z"}
{"level":"debug","message":"Update result for Settings: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:00.931Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:03.435Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:03.451Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:06.457Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:12.474Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:21.490Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:33.498Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:04:48.501Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:05:06.509Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:05:27.520Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:05:51.533Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:06:18.544Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:06:48.557Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:27:35.840Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:28:11.848Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:28:50.858Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:29:32.862Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:30:17.883Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:31:05.896Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:31:56.900Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:32:50.916Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings after verification retries: undefined","stack":"Error: Staged files not persisted for Settings after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:33:47.918Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"78af0798-49c0-456e-88b6-d9b263e9d27d","timestamp":"2025-04-20T02:33:53.939Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-20T19:10:20.081Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-20T19:10:20.098Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-20T19:10:20.081Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-21T12:12:00.023Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-21T19:50:43.071Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-21T19:50:43.071Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-21T19:50:43.087Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-21T20:06:30.705Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-21T20:06:30.706Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-21T20:06:30.722Z"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.642Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.648Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.650Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.652Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.670Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.673Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.761Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.764Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.768Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.771Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.775Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:06:44.779Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-21T20:07:17.295Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-21T20:07:17.312Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-21T20:07:17.296Z"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.655Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.658Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.660Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.671Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.674Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.676Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.768Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.772Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.775Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.777Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.780Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:07:20.782Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-21T20:42:29.371Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-21T20:42:29.372Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-21T20:42:29.404Z"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.562Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.567Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.571Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.589Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.593Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.595Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.693Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.696Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.700Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.704Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.707Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:44.710Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.772Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.774Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.776Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.787Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.790Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.794Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.880Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.882Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.886Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/tasks","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.888Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/files","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.891Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"error","message":"JWT verification failed: jwt expired","path":"/backend-proposals","stack":"TokenExpiredError: jwt expired\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:190:21\n    at getSecret (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:97:14)\n    at module.exports [as verify] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\jsonwebtoken\\verify.js:101:10)\n    at verifyToken (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\routes\\grok.js:94:9)\n    at Layer.handle [as handle_request] (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at trim_prefix (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:328:13)\n    at C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:286:9\n    at Function.process_params (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\node_modules\\express\\lib\\router\\index.js:175:3)","timestamp":"2025-04-21T20:42:48.893Z","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2Y1NjcwMjc4ZjlkZmQ2OWUwNmU4M2IiLCJlbWFpbCI6ImFkbWluQGlkdXJhcmFwcC5jb20iLCJyb2xlIjoib3duZXIiLCJpYXQiOjE3NDUxNzYyMzMsImV4cCI6MTc0NTI2MjYzM30.mpLTE4Z7ZnKZ_bSphkEEZl2ZprgNwLJRi3yPQyN-h2I"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:18.058Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:18.059Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:18.061Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:18.062Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:18.064Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:18.064Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:18.147Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:18.154Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:18.155Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:18.167Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:18.173Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:18.173Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:18.204Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:18.205Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:33.832Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-21T20:43:33.833Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:33.887Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:33.887Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.058Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:37.058Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.061Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:37.061Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.063Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:37.063Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:37.070Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.155Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:37.155Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:37.177Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.179Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:37.180Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.184Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:37.184Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:37.190Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.193Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:37.193Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.214Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:37.214Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:37.217Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.220Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:37.221Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.310Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:37.310Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.313Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:37.313Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:37.385Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:37.386Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.805Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:43.805Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.807Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:43.807Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.809Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:43.809Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:43.817Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.822Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:43.823Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:43.894Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.902Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:43.903Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.923Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:43.923Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.927Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:43.927Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:43.930Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.933Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:43.933Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:43.935Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T20:43:43.935Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T20:43:43.995Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:44.019Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T20:43:44.020Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:44.023Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:44.024Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:44.108Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T20:43:44.108Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T20:43:51.945Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-21T20:43:51.946Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-21T20:43:51.946Z"}
{"level":"info","message":"Task queued: 212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","prompt":"Build CRM system","timestamp":"2025-04-21T20:43:51.973Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-21T20:43:51.978Z"}
{"level":"debug","message":"Task initialized: 212c0a6c-6d74-4ae2-82fa-92ccafd80ec0, stagedFiles: []","timestamp":"2025-04-21T20:43:51.988Z"}
{"level":"info","message":"Task started: 212c0a6c-6d74-4ae2-82fa-92ccafd80ec0, Prompt: Build CRM system","timestamp":"2025-04-21T20:43:51.988Z"}
{"level":"info","message":"System analysis completed: files=1095, logs=65, memory=20, security=40, uxIssues=1090, flowIssues=25","timestamp":"2025-04-21T20:43:53.477Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-21T20:43:53.477Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-21T20:43:53.478Z"}
{"level":"debug","message":"Saved original content for Login","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:53.488Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:53.489Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v114.jsx","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:53.560Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Login: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v114.jsx\"","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:53.561Z"}
{"level":"debug","message":"Update result for Login: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:53.566Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:56.068Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:56.083Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:43:59.095Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:44:05.104Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:44:14.121Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:44:26.139Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:44:41.153Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:44:59.163Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:45:20.170Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:45:44.183Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:46:11.192Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:46:41.197Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:47:14.206Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:47:50.220Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:48:29.233Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:49:11.243Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:49:56.248Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:50:44.253Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:51:35.263Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:52:29.269Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login after verification retries: undefined","stack":"Error: Staged files not persisted for Login after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:26.274Z"}
{"level":"debug","message":"Saved original content for Dashboard","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:32.300Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:32.300Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v88.jsx","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:32.357Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Dashboard: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v88.jsx\"","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:32.357Z"}
{"level":"debug","message":"Update result for Dashboard: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:32.359Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:34.871Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:34.885Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:37.897Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:43.902Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:53:52.906Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:54:04.911Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:54:19.921Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:54:37.923Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:54:58.932Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:55:22.940Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:55:49.955Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:56:19.968Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:56:52.972Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:57:28.982Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:58:07.989Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:58:49.994Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T20:59:35.008Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:00:23.019Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:01:14.037Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:02:08.052Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard after verification retries: undefined","stack":"Error: Staged files not persisted for Dashboard after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:05.063Z"}
{"level":"debug","message":"Saved original content for SponsorProfile","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:11.083Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:11.084Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v88.jsx","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:11.125Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for SponsorProfile: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v88.jsx\"","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:11.126Z"}
{"level":"debug","message":"Update result for SponsorProfile: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:11.128Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:13.645Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:13.661Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:16.666Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:22.675Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:31.692Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:43.711Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:03:58.722Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:04:16.737Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:04:37.751Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:05:01.770Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:05:28.779Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:05:58.794Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:06:31.797Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:07:07.801Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:07:46.814Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:08:28.819Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:09:13.831Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:10:01.835Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:10:52.851Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:11:46.869Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile after verification retries: undefined","stack":"Error: Staged files not persisted for SponsorProfile after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:43.884Z"}
{"level":"debug","message":"Saved original content for EmployeeLog","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:49.911Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:49.911Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v113.jsx","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:49.989Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for EmployeeLog: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v113.jsx\"","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:49.989Z"}
{"level":"debug","message":"Update result for EmployeeLog: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:49.990Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:52.504Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:52.520Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:12:55.527Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:13:01.545Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:13:10.552Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:13:22.561Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:13:37.579Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:13:55.589Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:14:16.595Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:14:40.600Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:15:07.607Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:15:37.611Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:16:10.624Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:16:46.638Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:17:25.647Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:18:07.662Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:18:52.668Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:19:40.685Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:20:31.698Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:21:25.711Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog after verification retries: undefined","stack":"Error: Staged files not persisted for EmployeeLog after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:22.728Z"}
{"level":"debug","message":"Saved original content for Settings","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:28.760Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:28.761Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v88.jsx","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:28.851Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Settings: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v88.jsx\"","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:28.851Z"}
{"level":"debug","message":"Update result for Settings: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:28.853Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:31.359Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:31.374Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:34.389Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:40.392Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:22:49.403Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:23:01.408Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:23:16.416Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:23:34.423Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:23:55.428Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:24:19.433Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:24:46.445Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:25:16.450Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:25:49.468Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:26:25.477Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:27:04.479Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:27:46.486Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:28:31.495Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:29:19.498Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:30:10.515Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:31:04.532Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings after verification retries: undefined","stack":"Error: Staged files not persisted for Settings after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:32:01.544Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"212c0a6c-6d74-4ae2-82fa-92ccafd80ec0","timestamp":"2025-04-21T21:32:07.562Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:58:57.626Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T21:58:57.626Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:58:57.629Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T21:58:57.629Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:58:57.631Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T21:58:57.631Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T21:58:57.636Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:58:57.684Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/backend-proposals","timestamp":"2025-04-21T21:58:57.684Z"}
{"level":"info","message":"Fetched 0 backend proposals","proposalIds":[],"timestamp":"2025-04-21T21:58:57.689Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:58:57.695Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T21:58:57.695Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:58:57.712Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/files","timestamp":"2025-04-21T21:58:57.712Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:59:22.505Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/clear-tasks","timestamp":"2025-04-21T21:59:22.505Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:59:22.526Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-21T21:59:22.526Z"}
{"level":"info","message":"Token verified for user: admin@idurarapp.com","timestamp":"2025-04-21T21:59:24.431Z","userId":"67f5670278f9dfd69e06e83b"}
{"level":"info","message":"Entering /api/grok/edit","timestamp":"2025-04-21T21:59:24.431Z"}
{"level":"debug","message":"Request body:","prompt":"Build CRM system","timestamp":"2025-04-21T21:59:24.432Z"}
{"level":"info","message":"Task queued: 93364ae9-5b5d-49de-b39e-eb31f6e388b9","prompt":"Build CRM system","timestamp":"2025-04-21T21:59:24.438Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-21T21:59:24.441Z"}
{"level":"debug","message":"Task initialized: 93364ae9-5b5d-49de-b39e-eb31f6e388b9, stagedFiles: []","timestamp":"2025-04-21T21:59:24.443Z"}
{"level":"info","message":"Task started: 93364ae9-5b5d-49de-b39e-eb31f6e388b9, Prompt: Build CRM system","timestamp":"2025-04-21T21:59:24.443Z"}
{"level":"info","message":"System analysis completed: files=1100, logs=65, memory=20, security=40, uxIssues=1095, flowIssues=25","timestamp":"2025-04-21T21:59:25.418Z"}
{"level":"info","message":"Memory tweak: Enabled AI for CRM due to past failures","pastFailures":0,"timestamp":"2025-04-21T21:59:25.418Z"}
{"level":"debug","message":"Parsed prompt: action=generate, target=CRM, features={\"ui\":true,\"ai\":true}, isMultiFile=true, backendChanges=0","timestamp":"2025-04-21T21:59:25.419Z"}
{"level":"debug","message":"Saved original content for Login","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:25.423Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Login: []","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:25.423Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Login: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Login-v115.jsx","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:25.487Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Login: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Login-v115.jsx\"","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:25.487Z"}
{"level":"debug","message":"Update result for Login: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:25.489Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:28.001Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:28.014Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:31.026Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:37.037Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:46.043Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T21:59:58.061Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:00:13.066Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:00:31.080Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:00:52.096Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:01:16.103Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:01:43.117Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:02:13.132Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:02:46.142Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:03:22.151Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:04:01.161Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:04:43.175Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:05:28.179Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:06:16.189Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:07:07.201Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Login: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:08:01.205Z"}
{"level":"warn","message":"File generation failed for Login, attempt 1/3: Staged files not persisted for Login after verification retries: undefined","stack":"Error: Staged files not persisted for Login after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:08:58.207Z"}
{"level":"debug","message":"Saved original content for Dashboard","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:04.224Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:04.225Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Dashboard: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Dashboard-v89.jsx","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:04.273Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Dashboard: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Dashboard-v89.jsx\"","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:04.273Z"}
{"level":"debug","message":"Update result for Dashboard: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:04.274Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:06.780Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:06.796Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:09.812Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:15.828Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:24.843Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:36.847Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:09:51.858Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:10:09.864Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:10:30.879Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:10:54.887Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:11:21.894Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:11:51.910Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:12:24.927Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:13:00.945Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:13:39.951Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:14:21.958Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:15:06.963Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:15:54.974Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:16:45.986Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Dashboard: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:17:39.999Z"}
{"level":"warn","message":"File generation failed for Dashboard, attempt 1/3: Staged files not persisted for Dashboard after verification retries: undefined","stack":"Error: Staged files not persisted for Dashboard after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:37.004Z"}
{"level":"debug","message":"Saved original content for SponsorProfile","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:43.032Z"}
{"level":"debug","message":"Pre-generate stagedFiles for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:43.032Z"}
{"level":"debug","message":"Added generated file to stagedFiles for SponsorProfile: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\SponsorProfile-v89.jsx","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:43.076Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for SponsorProfile: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\SponsorProfile-v89.jsx\"","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:43.076Z"}
{"level":"debug","message":"Update result for SponsorProfile: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:43.078Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:45.592Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:45.609Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:48.626Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:18:54.629Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:19:03.646Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:19:15.666Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:19:30.685Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:19:48.703Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:20:09.709Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:20:33.717Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:21:00.720Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:21:30.736Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:22:03.745Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:22:39.756Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:23:18.763Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:24:00.774Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:24:45.786Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:25:33.795Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:26:24.808Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for SponsorProfile: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:27:18.822Z"}
{"level":"warn","message":"File generation failed for SponsorProfile, attempt 1/3: Staged files not persisted for SponsorProfile after verification retries: undefined","stack":"Error: Staged files not persisted for SponsorProfile after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:15.836Z"}
{"level":"debug","message":"Saved original content for EmployeeLog","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:21.857Z"}
{"level":"debug","message":"Pre-generate stagedFiles for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:21.858Z"}
{"level":"debug","message":"Added generated file to stagedFiles for EmployeeLog: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\EmployeeLog-v114.jsx","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:21.914Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for EmployeeLog: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\EmployeeLog-v114.jsx\"","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:21.915Z"}
{"level":"debug","message":"Update result for EmployeeLog: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:21.916Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:24.420Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:24.436Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:27.443Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:33.449Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:42.458Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:28:54.474Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:29:09.492Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:29:27.501Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:29:48.512Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:30:12.515Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:30:39.530Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:31:09.534Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:31:42.544Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:32:18.554Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:32:57.559Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:33:39.568Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:34:24.585Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:35:12.590Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:36:03.597Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for EmployeeLog: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:36:57.614Z"}
{"level":"warn","message":"File generation failed for EmployeeLog, attempt 1/3: Staged files not persisted for EmployeeLog after verification retries: undefined","stack":"Error: Staged files not persisted for EmployeeLog after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:37:54.627Z"}
{"level":"debug","message":"Saved original content for Settings","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:00.648Z"}
{"level":"debug","message":"Pre-generate stagedFiles for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:00.648Z"}
{"level":"debug","message":"Added generated file to stagedFiles for Settings: C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\frontend\\src\\pages\\Settings-v89.jsx","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:00.687Z"}
{"attempt":1,"level":"debug","message":"Attempting atomic update for Settings: \"C:\\\\Users\\\\nthorpe\\\\Desktop\\\\crm\\\\idurar-erp-crm\\\\frontend\\\\src\\\\pages\\\\Settings-v89.jsx\"","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:00.687Z"}
{"level":"debug","message":"Update result for Settings: {\"acknowledged\":true,\"modifiedCount\":1,\"upsertedId\":null,\"upsertedCount\":0,\"matchedCount\":1}","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:00.689Z"}
{"attempt":1,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:03.192Z"}
{"attempt":2,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:03.207Z"}
{"attempt":3,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:06.225Z"}
{"attempt":4,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:12.230Z"}
{"attempt":5,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:21.237Z"}
{"attempt":6,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:33.239Z"}
{"attempt":7,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:38:48.246Z"}
{"attempt":8,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:39:06.250Z"}
{"attempt":9,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:39:27.258Z"}
{"attempt":10,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:39:51.274Z"}
{"attempt":11,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:40:18.288Z"}
{"attempt":12,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:40:48.292Z"}
{"attempt":13,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:41:21.298Z"}
{"attempt":14,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:41:57.300Z"}
{"attempt":15,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:42:36.312Z"}
{"attempt":16,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:43:18.325Z"}
{"attempt":17,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:44:03.329Z"}
{"attempt":18,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:44:51.339Z"}
{"attempt":19,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:45:42.355Z"}
{"attempt":20,"level":"warn","message":"Staged files verification failed for Settings: undefined","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:46:36.366Z"}
{"level":"warn","message":"File generation failed for Settings, attempt 1/3: Staged files not persisted for Settings after verification retries: undefined","stack":"Error: Staged files not persisted for Settings after verification retries: undefined\n    at processTask (C:\\Users\\nthorpe\\Desktop\\crm\\idurar-erp-crm\\backend\\src\\utils\\taskProcessorV18.js:1155:23)","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:47:33.378Z"}
{"expected":["Login","Dashboard","SponsorProfile","EmployeeLog","Settings"],"level":"error","message":"Incomplete stagedFiles after generation","taskId":"93364ae9-5b5d-49de-b39e-eb31f6e388b9","timestamp":"2025-04-21T22:47:39.407Z"}
{"level":"info","message":"grok.js router executing","timestamp":"2025-04-22T11:57:42.603Z"}
{"level":"info","message":"/api/grok mounted successfully","timestamp":"2025-04-22T11:57:42.603Z"}
{"level":"info","message":"MongoDB connected, initializing site structure","timestamp":"2025-04-22T11:57:42.616Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-23T03:26:34.633Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-23T03:26:34.635Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-23T12:45:48.772Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-23T12:45:48.773Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-23T23:38:19.140Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-23T23:38:19.141Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T00:06:21.065Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T00:06:21.067Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T00:52:34.668Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T00:52:34.669Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:03:45.293Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:03:45.295Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:11:13.685Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:11:13.687Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:21:08.237Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:21:08.238Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:31:31.350Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:31:31.352Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:40:19.177Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:40:19.178Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:45:22.326Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:45:22.327Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:51:17.749Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:51:17.751Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T01:57:42.865Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T01:57:42.866Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T02:07:21.854Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T02:07:21.855Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T02:10:52.180Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T02:10:52.181Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T02:22:05.911Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T02:22:05.912Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-24T02:31:28.741Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-24T02:31:28.743Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T07:34:31.668Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T07:34:31.669Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T12:34:15.347Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T12:34:15.349Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T12:35:20.269Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T12:35:20.271Z"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T12:43:36.775Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T12:43:36.775Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T08:52:33.244-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T12:52:33.241Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T12:52:33.241Z"}
{"level":"info","message":"Socket.IO client connected","socketId":"1QMMb4zqQOByuvOdAAAG","timestamp":"2025-04-25T08:52:56.089-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"Tk-tXIOe_4vPLP2_AAAI","timestamp":"2025-04-25T08:52:56.103-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"EWHzeJNIq4dyUp0wAAAJ","timestamp":"2025-04-25T08:52:56.130-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"XbGMHCxSdhbkYGWWAAAM","timestamp":"2025-04-25T08:52:56.171-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T09:01:20.309-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T13:01:20.306Z"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T13:01:20.307Z"}
{"level":"info","message":"Socket.IO client connected","socketId":"pdNniHHYJ5nNxFTMAAAH","timestamp":"2025-04-25T09:02:20.946-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"NndvjwfWqLv8TL-HAAAJ","timestamp":"2025-04-25T09:02:20.964-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"FZUq7fX5HoEp2UByAAAK","timestamp":"2025-04-25T09:02:20.978-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"RU_q9eEGHyrvFm06AAAN","timestamp":"2025-04-25T09:02:21.023-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T09:08:05.528-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T13:08:05.526Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T09:08:05.530-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T13:08:05.527Z"}
{"level":"info","message":"Socket.IO client connected","socketId":"VseRI6dtvg7buZZXAAAH","timestamp":"2025-04-25T09:08:34.985-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"0sizVX_lpYysXBSDAAAJ","timestamp":"2025-04-25T09:08:34.993-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"baHLMSSf_NjU72wQAAAL","timestamp":"2025-04-25T09:08:35.012-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"N08_workbc9YHR_uAAAN","timestamp":"2025-04-25T09:08:35.064-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T09:18:11.066-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T13:18:11.064Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T09:18:11.068-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T13:18:11.065Z"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T09:26:09.292-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T13:26:09.290Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T09:26:09.294-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T13:26:09.291Z"}
{"level":"info","message":"Socket.IO client connected","socketId":"B9wajGXFeBF0nZZZAAAG","timestamp":"2025-04-25T09:26:20.663-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"OVCvvDuDktbJtBqVAAAH","timestamp":"2025-04-25T09:26:20.667-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"UWh_ayZf4nh6ZD62AAAJ","timestamp":"2025-04-25T09:26:20.707-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"f_GvhcUd7L6sqsiXAAAL","timestamp":"2025-04-25T09:26:20.728-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"f_GvhcUd7L6sqsiXAAAL","timestamp":"2025-04-25T09:26:28.148-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"OVCvvDuDktbJtBqVAAAH","timestamp":"2025-04-25T09:26:28.149-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"B9wajGXFeBF0nZZZAAAG","timestamp":"2025-04-25T09:26:28.150-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"UWh_ayZf4nh6ZD62AAAJ","timestamp":"2025-04-25T09:26:28.151-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"gUPZZMzYM2lgi_lDAAAS","timestamp":"2025-04-25T09:26:34.724-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"CGrydcFy2N4YTIzCAAAT","timestamp":"2025-04-25T09:26:34.727-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"w0zZgf7U0FyrXEA1AAAW","timestamp":"2025-04-25T09:26:34.760-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"wxMe6IzNlnKp4L0jAAAY","timestamp":"2025-04-25T09:26:34.801-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T09:34:53.454-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T13:34:53.453Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T09:34:53.457-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T13:34:53.454Z"}
{"level":"info","message":"Socket.IO client connected","socketId":"GRTDXBUFNjV7FRS0AAAH","timestamp":"2025-04-25T09:35:11.789-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"Hmd06K72UkIH-QFSAAAJ","timestamp":"2025-04-25T09:35:11.794-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"HVIvkw7MUYi0EkzwAAAL","timestamp":"2025-04-25T09:35:11.810-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"Z-wIeLPVazQ2z5RuAAAM","timestamp":"2025-04-25T09:35:11.813-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"HVIvkw7MUYi0EkzwAAAL","timestamp":"2025-04-25T09:35:19.626-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Hmd06K72UkIH-QFSAAAJ","timestamp":"2025-04-25T09:35:19.631-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GRTDXBUFNjV7FRS0AAAH","timestamp":"2025-04-25T09:35:19.631-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Z-wIeLPVazQ2z5RuAAAM","timestamp":"2025-04-25T09:35:19.632-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"qt2PAJvTgEXs7u7nAAAT","timestamp":"2025-04-25T09:35:20.239-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"vrcNmCsECNAEv85pAAAV","timestamp":"2025-04-25T09:35:20.258-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"ParNLv4bppkhyVraAAAX","timestamp":"2025-04-25T09:35:20.273-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"IFLVtFDhmfU-iOl_AAAY","timestamp":"2025-04-25T09:35:20.280-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T09:37:32.503-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T13:37:32.502Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T09:37:32.505-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T13:37:32.502Z"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T15:14:49.551-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T19:14:49.550Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T15:14:49.553-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T19:14:49.550Z"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T15:20:01.774-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T19:20:01.773Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T15:20:01.776-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T19:20:01.773Z"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T15:25:56.265-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T19:25:56.264Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T15:25:56.267-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T19:25:56.264Z"}
{"level":"info","message":"Socket.IO client connected","socketId":"nfHnDxfTC9vjh8LPAAAI","timestamp":"2025-04-25T15:26:10.526-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"CHmE9NOndJPh4UZOAAAJ","timestamp":"2025-04-25T15:26:10.528-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"bL0r6hrVnW0ucx9AAAAN","timestamp":"2025-04-25T15:26:10.540-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"ZZAv_bqodPJyKgZ5AAAO","timestamp":"2025-04-25T15:26:10.544-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"JE7S27Iui2m-5q7mAAAR","timestamp":"2025-04-25T15:26:10.553-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"n_1ELV3rzV2jINc6AAAT","timestamp":"2025-04-25T15:26:10.555-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"vYAMebejNxNgLyBLAAAU","timestamp":"2025-04-25T15:26:10.557-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"MhwpqVksvxHoMGdpAAAX","timestamp":"2025-04-25T15:26:10.574-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"naq0-JVBj6YglRYVAAAY","timestamp":"2025-04-25T15:26:10.575-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"wgYomC9sNuhmNVXhAAAZ","timestamp":"2025-04-25T15:26:10.598-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"Il6iugIgO31P6SZzAAAa","timestamp":"2025-04-25T15:26:10.713-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"sD4c8IwtAqL9bF2hAAAb","timestamp":"2025-04-25T15:26:10.714-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Il6iugIgO31P6SZzAAAa","timestamp":"2025-04-25T15:26:21.692-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"MhwpqVksvxHoMGdpAAAX","timestamp":"2025-04-25T15:26:21.693-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"vYAMebejNxNgLyBLAAAU","timestamp":"2025-04-25T15:26:21.693-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"n_1ELV3rzV2jINc6AAAT","timestamp":"2025-04-25T15:26:21.694-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"JE7S27Iui2m-5q7mAAAR","timestamp":"2025-04-25T15:26:21.694-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ZZAv_bqodPJyKgZ5AAAO","timestamp":"2025-04-25T15:26:21.695-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"bL0r6hrVnW0ucx9AAAAN","timestamp":"2025-04-25T15:26:21.695-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"CHmE9NOndJPh4UZOAAAJ","timestamp":"2025-04-25T15:26:21.696-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"nfHnDxfTC9vjh8LPAAAI","timestamp":"2025-04-25T15:26:21.696-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"wgYomC9sNuhmNVXhAAAZ","timestamp":"2025-04-25T15:26:21.697-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"naq0-JVBj6YglRYVAAAY","timestamp":"2025-04-25T15:26:21.697-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"sD4c8IwtAqL9bF2hAAAb","timestamp":"2025-04-25T15:26:21.698-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"Z3Togm9g-CpUwC6MAAAk","timestamp":"2025-04-25T15:26:32.157-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"zLZA-wOoziqckTJcAAAl","timestamp":"2025-04-25T15:26:32.159-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"p7Wa-prHxFZaKEnWAAAm","timestamp":"2025-04-25T15:26:32.161-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"V8VDz2rXMXWqsxTeAAAq","timestamp":"2025-04-25T15:26:32.171-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"vaAuXF3uN69591RWAAAu","timestamp":"2025-04-25T15:26:32.185-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"Gp7Vh1gxzWWGBpdlAAAv","timestamp":"2025-04-25T15:26:32.186-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"ILClP0gbwYNlLf6rAAAw","timestamp":"2025-04-25T15:26:32.193-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"jGpQQ_e2tyti_Vd8AAAx","timestamp":"2025-04-25T15:26:32.196-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"LxUfo7wpLND_oncGAAAy","timestamp":"2025-04-25T15:26:32.199-04:00"}
{"level":"info","message":"Socket.IO client connected","socketId":"iLVWQz1TCGnRbPa3AAAz","timestamp":"2025-04-25T15:26:32.200-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T15:45:55.844-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T19:45:55.843Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T15:45:55.846-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T19:45:55.844Z"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"3R5FxLmx3nXRaJQeAAAK","timestamp":"2025-04-25T15:45:55.902-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"hZTI4XIfXB7fA_I2AAAL","timestamp":"2025-04-25T15:45:55.904-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"YL8mj3Z73wgHr1GgAAAM","timestamp":"2025-04-25T15:45:55.906-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"MBKrVSp2Q4c2aZnZAAAN","timestamp":"2025-04-25T15:45:55.908-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"khC7xfKMkPFfDeVNAAAO","timestamp":"2025-04-25T15:45:55.910-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qA9rBklRpuQq7TX3AAAP","timestamp":"2025-04-25T15:45:55.912-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"snr5t7hL7I9CJanFAAAQ","timestamp":"2025-04-25T15:45:55.913-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"d2nd7aSlrPt0qcyQAAAR","timestamp":"2025-04-25T15:45:55.916-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"osYxEua9sPHo5bxwAAAS","timestamp":"2025-04-25T15:45:55.918-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"oSOsxpu4RViQanQpAAAT","timestamp":"2025-04-25T15:45:55.920-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"T8HuzWvmmyLBqTSuAAAV","timestamp":"2025-04-25T15:45:56.058-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"BoRkswXLEcr-nwciAAAZ","timestamp":"2025-04-25T15:45:56.251-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"P9J4i9uXo3aYBW0nAAAa","timestamp":"2025-04-25T15:45:56.253-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PH-H74XtyesetTpyAAAb","timestamp":"2025-04-25T15:45:56.255-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"FMZcZ6JzuAXSb9yPAAAf","timestamp":"2025-04-25T15:45:57.165-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"eJ_JG_l4PIl8Odd4AAAg","timestamp":"2025-04-25T15:45:57.168-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"82KIxNRKtIS6ZPNEAAAh","timestamp":"2025-04-25T15:45:57.170-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"SFoMSug82Vb4xJxLAAAl","timestamp":"2025-04-25T15:45:58.172-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qnGpKIX5H8EA-Bx9AAAm","timestamp":"2025-04-25T15:45:58.173-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"cj2kgI27vW8Lt0XdAAAn","timestamp":"2025-04-25T15:45:58.175-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"T8HuzWvmmyLBqTSuAAAV","timestamp":"2025-04-25T15:46:14.517-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"eJ_JG_l4PIl8Odd4AAAg","timestamp":"2025-04-25T15:46:14.522-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"FMZcZ6JzuAXSb9yPAAAf","timestamp":"2025-04-25T15:46:14.522-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"PH-H74XtyesetTpyAAAb","timestamp":"2025-04-25T15:46:14.523-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"P9J4i9uXo3aYBW0nAAAa","timestamp":"2025-04-25T15:46:14.523-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"BoRkswXLEcr-nwciAAAZ","timestamp":"2025-04-25T15:46:14.523-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"oSOsxpu4RViQanQpAAAT","timestamp":"2025-04-25T15:46:14.524-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"osYxEua9sPHo5bxwAAAS","timestamp":"2025-04-25T15:46:14.524-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"d2nd7aSlrPt0qcyQAAAR","timestamp":"2025-04-25T15:46:14.525-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"snr5t7hL7I9CJanFAAAQ","timestamp":"2025-04-25T15:46:14.525-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qA9rBklRpuQq7TX3AAAP","timestamp":"2025-04-25T15:46:14.526-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"khC7xfKMkPFfDeVNAAAO","timestamp":"2025-04-25T15:46:14.526-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"MBKrVSp2Q4c2aZnZAAAN","timestamp":"2025-04-25T15:46:14.526-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"YL8mj3Z73wgHr1GgAAAM","timestamp":"2025-04-25T15:46:14.527-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"hZTI4XIfXB7fA_I2AAAL","timestamp":"2025-04-25T15:46:14.527-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"3R5FxLmx3nXRaJQeAAAK","timestamp":"2025-04-25T15:46:14.528-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qnGpKIX5H8EA-Bx9AAAm","timestamp":"2025-04-25T15:46:14.530-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"SFoMSug82Vb4xJxLAAAl","timestamp":"2025-04-25T15:46:14.531-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"cj2kgI27vW8Lt0XdAAAn","timestamp":"2025-04-25T15:46:14.531-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"82KIxNRKtIS6ZPNEAAAh","timestamp":"2025-04-25T15:46:14.532-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_jBT2grLV5fU90SYAAAv","timestamp":"2025-04-25T15:46:16.232-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"p9pjF_SR5JhpjcHmAAAw","timestamp":"2025-04-25T15:46:16.233-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"5xrqN42hgM0FMN81AAAz","timestamp":"2025-04-25T15:46:16.239-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_tKeTQ1iFq-OYesCAAA0","timestamp":"2025-04-25T15:46:16.244-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Mm5OhuZdLAV2di2qAAA4","timestamp":"2025-04-25T15:46:16.253-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"HYDfvfl1D6Cij71_AAA5","timestamp":"2025-04-25T15:46:16.255-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Lk5m21VUHhbjrgvGAAA9","timestamp":"2025-04-25T15:46:16.270-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"0jd3iYnfR2jCZIR3AAA-","timestamp":"2025-04-25T15:46:16.272-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"N-gXpQt0rhlFgYe4AAA_","timestamp":"2025-04-25T15:46:16.283-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"WjA1dPsYHbu9mpRSAABA","timestamp":"2025-04-25T15:46:16.286-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"NlCjATzw6sTNOXafAABB","timestamp":"2025-04-25T15:46:16.404-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"e7S19e-OUh9vZAxSAABC","timestamp":"2025-04-25T15:46:16.405-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"_jBT2grLV5fU90SYAAAv","timestamp":"2025-04-25T15:46:23.431-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"p9pjF_SR5JhpjcHmAAAw","timestamp":"2025-04-25T15:46:23.431-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"WjA1dPsYHbu9mpRSAABA","timestamp":"2025-04-25T15:46:23.432-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"N-gXpQt0rhlFgYe4AAA_","timestamp":"2025-04-25T15:46:23.432-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"e7S19e-OUh9vZAxSAABC","timestamp":"2025-04-25T15:46:23.434-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"NlCjATzw6sTNOXafAABB","timestamp":"2025-04-25T15:46:23.434-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"0jd3iYnfR2jCZIR3AAA-","timestamp":"2025-04-25T15:46:23.434-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Lk5m21VUHhbjrgvGAAA9","timestamp":"2025-04-25T15:46:23.435-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"HYDfvfl1D6Cij71_AAA5","timestamp":"2025-04-25T15:46:23.435-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Mm5OhuZdLAV2di2qAAA4","timestamp":"2025-04-25T15:46:23.435-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"_tKeTQ1iFq-OYesCAAA0","timestamp":"2025-04-25T15:46:23.436-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"5xrqN42hgM0FMN81AAAz","timestamp":"2025-04-25T15:46:23.436-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"3ip9wvmp0d2pB4FJAABK","timestamp":"2025-04-25T15:46:36.076-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"33TLaLxvS8LZhA1aAABM","timestamp":"2025-04-25T15:46:36.080-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"el5MyltrvqpAFwZiAABP","timestamp":"2025-04-25T15:46:36.085-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"EDp9nTkoqlYYzZSgAABQ","timestamp":"2025-04-25T15:46:36.086-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"XbFHEJSp9k9cB-wSAABU","timestamp":"2025-04-25T15:46:36.097-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"E2xJi5huOZazCaw9AABV","timestamp":"2025-04-25T15:46:36.099-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"O5IvaAvOcsWFuMaCAABZ","timestamp":"2025-04-25T15:46:36.108-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"OfqCcTWsErvuUzhrAABa","timestamp":"2025-04-25T15:46:36.110-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"HmUhFFZQF_KA5-n4AABb","timestamp":"2025-04-25T15:46:36.119-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"KmuquDkBD3QZscY4AABc","timestamp":"2025-04-25T15:46:36.120-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ytzc7HPH4ejXhzUKAABd","timestamp":"2025-04-25T15:46:36.230-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"EWSr4h0QB-3KgSxZAABe","timestamp":"2025-04-25T15:46:36.231-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"uaRhYQ8LJ4EmQEraAABh","timestamp":"2025-04-25T15:48:57.092-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ajiPtaA9wENLHslNAABi","timestamp":"2025-04-25T15:48:57.094-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"CCIujjd_VXDyxYxTAABl","timestamp":"2025-04-25T15:48:57.337-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qdXbKBhN1hscRbSLAABm","timestamp":"2025-04-25T15:48:57.338-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"1q6B5Y3mffYUUg4oAABp","timestamp":"2025-04-25T15:48:57.575-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"RumGTrddwwoeJgSzAABq","timestamp":"2025-04-25T15:48:57.577-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"KVhKDD8Ej8CB0jg5AABt","timestamp":"2025-04-25T15:48:57.781-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"l2W7F00sYB0-ZFYIAABu","timestamp":"2025-04-25T15:48:57.783-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"AoOiAnUEm2VyM9I9AABx","timestamp":"2025-04-25T15:48:57.936-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"sF_nNEEbXZUroCqPAABy","timestamp":"2025-04-25T15:48:57.938-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"53ouQH3VLePkC-vlAAB1","timestamp":"2025-04-25T15:48:58.597-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"n12g-yXmjObl-F3HAAB2","timestamp":"2025-04-25T15:48:58.599-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"kF9Z04FvQm7g9-r6AAB5","timestamp":"2025-04-25T15:48:59.264-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"sWutxd2sAywegoaGAAB6","timestamp":"2025-04-25T15:48:59.265-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"FFnQNAinmTwcUItwAAB9","timestamp":"2025-04-25T15:48:59.559-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"DpCbvkzQ6pTgK_mrAAB-","timestamp":"2025-04-25T15:48:59.561-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"giNqxT6wBYvs1jErAACB","timestamp":"2025-04-25T15:49:00.301-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"XB9tmsEJjeROxfu8AACC","timestamp":"2025-04-25T15:49:00.302-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xx1GUepyHO31nmpYAACF","timestamp":"2025-04-25T15:49:00.530-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"EOC2ALee8T4TFWmIAACG","timestamp":"2025-04-25T15:49:00.531-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"G42GP1UE8LSMfPrXAACJ","timestamp":"2025-04-25T15:49:00.752-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"asvB05l15Cwv5KAcAACK","timestamp":"2025-04-25T15:49:00.753-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ciVfpczwQH5Qz_OBAACN","timestamp":"2025-04-25T15:49:01.580-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"8VYBRbawjR1aUU4RAACO","timestamp":"2025-04-25T15:49:01.581-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"cv_Ce_h4GFN_F0fyAACR","timestamp":"2025-04-25T15:49:02.479-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PGCbQJKVFthytty2AACS","timestamp":"2025-04-25T15:49:02.481-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"hXpaOlvwPfXJRKSUAACV","timestamp":"2025-04-25T15:49:02.646-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"dno_W952xDV73yz3AACW","timestamp":"2025-04-25T15:49:02.648-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"nleEHasZBUbWY11qAACZ","timestamp":"2025-04-25T15:49:03.038-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7iuGW9Xi8BD3vLreAACa","timestamp":"2025-04-25T15:49:03.040-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"e0ZWxIfEeHus7mWBAACd","timestamp":"2025-04-25T15:49:03.224-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"roAFguGVPYRevssmAACe","timestamp":"2025-04-25T15:49:03.225-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"yznQkHgpCSHNd59cAACh","timestamp":"2025-04-25T15:49:03.762-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"DDwDXOAFtmTIbCE_AACi","timestamp":"2025-04-25T15:49:03.764-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"zSzxG6Q3Ro6tISvfAACl","timestamp":"2025-04-25T15:49:03.958-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"sNJhx1t2hkVDPRiuAACm","timestamp":"2025-04-25T15:49:03.959-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"U_5j2Qoao4gBq8gBAACp","timestamp":"2025-04-25T15:49:04.291-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"aKU3oGSWeLSQZxkxAACq","timestamp":"2025-04-25T15:49:04.293-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"2Ejx4ttJdCJGS7WfAACt","timestamp":"2025-04-25T15:49:04.490-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"CMThefPvcI1jF9JeAACu","timestamp":"2025-04-25T15:49:04.492-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"i9maxstAjF86pFL8AACx","timestamp":"2025-04-25T15:49:04.690-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ZtLIThjy6li2b0OMAACy","timestamp":"2025-04-25T15:49:04.692-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"WNSzIS57FPSPGGsVAAC1","timestamp":"2025-04-25T15:49:04.886-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ap1USIn8NX9twUybAAC2","timestamp":"2025-04-25T15:49:04.887-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"od6we-vxHkNLPpsiAAC5","timestamp":"2025-04-25T15:49:08.285-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"cSQ3Lfk71lVIbfPhAAC6","timestamp":"2025-04-25T15:49:08.286-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T15:57:43.877-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T19:57:43.876Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T15:57:43.878-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T19:57:43.876Z"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"W6yTORaoY3RNBc5VAAA_","timestamp":"2025-04-25T15:57:43.953-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"W6yTORaoY3RNBc5VAAA_","timestamp":"2025-04-25T15:57:43.953-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ZQVNTj_Ni2TL0jrMAABA","timestamp":"2025-04-25T15:57:43.954-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ZQVNTj_Ni2TL0jrMAABA","timestamp":"2025-04-25T15:57:43.954-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"-5JVP2S9vrB6WyqbAABB","timestamp":"2025-04-25T15:57:43.955-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"-5JVP2S9vrB6WyqbAABB","timestamp":"2025-04-25T15:57:43.956-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"biGhPWoMGfeDPdpYAABC","timestamp":"2025-04-25T15:57:43.956-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"biGhPWoMGfeDPdpYAABC","timestamp":"2025-04-25T15:57:43.956-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"M8YkUS8WKAKUtMSQAABD","timestamp":"2025-04-25T15:57:43.957-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"M8YkUS8WKAKUtMSQAABD","timestamp":"2025-04-25T15:57:43.957-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"AXq86WgQH5yhlRFuAABE","timestamp":"2025-04-25T15:57:43.958-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"AXq86WgQH5yhlRFuAABE","timestamp":"2025-04-25T15:57:43.958-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7kPqxU0_FDdnnz1iAABF","timestamp":"2025-04-25T15:57:43.959-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"7kPqxU0_FDdnnz1iAABF","timestamp":"2025-04-25T15:57:43.959-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"l-ueOJBXGsfssm4sAABG","timestamp":"2025-04-25T15:57:43.960-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"l-ueOJBXGsfssm4sAABG","timestamp":"2025-04-25T15:57:43.960-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"U4EOr7Chg7UR5X-CAABH","timestamp":"2025-04-25T15:57:43.961-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"U4EOr7Chg7UR5X-CAABH","timestamp":"2025-04-25T15:57:43.961-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"j19sc44K3R4W-yitAABI","timestamp":"2025-04-25T15:57:43.962-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"j19sc44K3R4W-yitAABI","timestamp":"2025-04-25T15:57:43.962-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"kbrQesgwI3QO-E2dAABJ","timestamp":"2025-04-25T15:57:43.963-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"kbrQesgwI3QO-E2dAABJ","timestamp":"2025-04-25T15:57:43.963-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"GCeq-LNTqPVtNYRnAABK","timestamp":"2025-04-25T15:57:43.964-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"GCeq-LNTqPVtNYRnAABK","timestamp":"2025-04-25T15:57:43.964-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"o0FCit4bf_JNB7dgAABL","timestamp":"2025-04-25T15:57:43.965-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"o0FCit4bf_JNB7dgAABL","timestamp":"2025-04-25T15:57:43.965-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"fJ8KeEJXNsk4t-yAAABM","timestamp":"2025-04-25T15:57:43.965-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"fJ8KeEJXNsk4t-yAAABM","timestamp":"2025-04-25T15:57:43.966-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"dRgoKycOsmDNXbsZAABN","timestamp":"2025-04-25T15:57:43.966-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"dRgoKycOsmDNXbsZAABN","timestamp":"2025-04-25T15:57:43.966-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"H8oyZUoGVe4wWhp7AABO","timestamp":"2025-04-25T15:57:43.967-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"H8oyZUoGVe4wWhp7AABO","timestamp":"2025-04-25T15:57:43.967-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PZvKwcJlLOa30y-0AABP","timestamp":"2025-04-25T15:57:43.967-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"PZvKwcJlLOa30y-0AABP","timestamp":"2025-04-25T15:57:43.968-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"bylRXC7oOBFeklfEAABQ","timestamp":"2025-04-25T15:57:43.968-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"bylRXC7oOBFeklfEAABQ","timestamp":"2025-04-25T15:57:43.969-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ls8C75yXGnp4ZUMuAABR","timestamp":"2025-04-25T15:57:43.970-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ls8C75yXGnp4ZUMuAABR","timestamp":"2025-04-25T15:57:43.970-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"sSRcSDYwyOUvCbTaAABS","timestamp":"2025-04-25T15:57:43.971-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"sSRcSDYwyOUvCbTaAABS","timestamp":"2025-04-25T15:57:43.971-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"fqiJenrIgS0FLObAAABT","timestamp":"2025-04-25T15:57:43.972-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"fqiJenrIgS0FLObAAABT","timestamp":"2025-04-25T15:57:43.972-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"tcgZGzpDhufMqHTGAABU","timestamp":"2025-04-25T15:57:43.972-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"tcgZGzpDhufMqHTGAABU","timestamp":"2025-04-25T15:57:43.973-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"uFIvnSAMiHSCN9iDAABV","timestamp":"2025-04-25T15:57:43.975-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"uFIvnSAMiHSCN9iDAABV","timestamp":"2025-04-25T15:57:43.975-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"uXXzBfTYjAis7VrYAABW","timestamp":"2025-04-25T15:57:43.976-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"uXXzBfTYjAis7VrYAABW","timestamp":"2025-04-25T15:57:43.976-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"00U8mxEGk_8OMbSSAABX","timestamp":"2025-04-25T15:57:43.977-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"00U8mxEGk_8OMbSSAABX","timestamp":"2025-04-25T15:57:43.977-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"kA9VCm9CEgEMux-YAABY","timestamp":"2025-04-25T15:57:43.979-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"kA9VCm9CEgEMux-YAABY","timestamp":"2025-04-25T15:57:43.979-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Tv515QZIcuKLLb_8AABZ","timestamp":"2025-04-25T15:57:43.980-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Tv515QZIcuKLLb_8AABZ","timestamp":"2025-04-25T15:57:43.980-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TdJ8-H5We_5UbC2iAABa","timestamp":"2025-04-25T15:57:43.981-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"TdJ8-H5We_5UbC2iAABa","timestamp":"2025-04-25T15:57:43.981-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"O0bL9y3GmXkA-ejYAABb","timestamp":"2025-04-25T15:57:43.982-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"O0bL9y3GmXkA-ejYAABb","timestamp":"2025-04-25T15:57:43.983-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"S62RoQn4TWbvrqkiAABc","timestamp":"2025-04-25T15:57:43.984-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"S62RoQn4TWbvrqkiAABc","timestamp":"2025-04-25T15:57:43.984-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TfxRovpsaawsMYP-AABd","timestamp":"2025-04-25T15:57:43.985-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"TfxRovpsaawsMYP-AABd","timestamp":"2025-04-25T15:57:43.985-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ewvVHrw-IuQDIkI_AABe","timestamp":"2025-04-25T15:57:43.986-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ewvVHrw-IuQDIkI_AABe","timestamp":"2025-04-25T15:57:43.986-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"iKVYGP52qgi086bgAABf","timestamp":"2025-04-25T15:57:43.987-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"iKVYGP52qgi086bgAABf","timestamp":"2025-04-25T15:57:43.987-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"1Inkg41GGBnCbHRBAABg","timestamp":"2025-04-25T15:57:43.988-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"1Inkg41GGBnCbHRBAABg","timestamp":"2025-04-25T15:57:43.989-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qmlPk-21dGoAID87AABh","timestamp":"2025-04-25T15:57:43.990-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"qmlPk-21dGoAID87AABh","timestamp":"2025-04-25T15:57:43.990-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Fp8dYJ9oVB0wse64AABi","timestamp":"2025-04-25T15:57:43.991-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Fp8dYJ9oVB0wse64AABi","timestamp":"2025-04-25T15:57:43.991-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"O3wLA0jqUDUR5P-3AABj","timestamp":"2025-04-25T15:57:43.992-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"O3wLA0jqUDUR5P-3AABj","timestamp":"2025-04-25T15:57:43.992-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Y_X6VJYvaGOsfPliAABk","timestamp":"2025-04-25T15:57:43.992-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Y_X6VJYvaGOsfPliAABk","timestamp":"2025-04-25T15:57:43.993-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"-j1q33cK8frSrIeIAABl","timestamp":"2025-04-25T15:57:43.993-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"-j1q33cK8frSrIeIAABl","timestamp":"2025-04-25T15:57:43.993-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"jwPWNvDAAX9Y0HaWAABm","timestamp":"2025-04-25T15:57:43.994-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"jwPWNvDAAX9Y0HaWAABm","timestamp":"2025-04-25T15:57:43.994-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Fq03_ymg0tK9L9gvAABn","timestamp":"2025-04-25T15:57:43.997-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Fq03_ymg0tK9L9gvAABn","timestamp":"2025-04-25T15:57:43.998-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"OwkAZMvrBgflMt5WAABo","timestamp":"2025-04-25T15:57:43.998-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"OwkAZMvrBgflMt5WAABo","timestamp":"2025-04-25T15:57:43.999-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_hG8I2raMT7zpuuAAABp","timestamp":"2025-04-25T15:57:44.000-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"_hG8I2raMT7zpuuAAABp","timestamp":"2025-04-25T15:57:44.000-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"u5flkewmRJIFv1sNAABq","timestamp":"2025-04-25T15:57:44.001-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"u5flkewmRJIFv1sNAABq","timestamp":"2025-04-25T15:57:44.001-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"WJLhGYQoAhKHskkAAABr","timestamp":"2025-04-25T15:57:44.001-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"WJLhGYQoAhKHskkAAABr","timestamp":"2025-04-25T15:57:44.001-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PsPqDhTK47TsZAUBAABs","timestamp":"2025-04-25T15:57:44.002-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"PsPqDhTK47TsZAUBAABs","timestamp":"2025-04-25T15:57:44.002-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"SrrDswxLOdW6eeUZAABt","timestamp":"2025-04-25T15:57:44.004-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"SrrDswxLOdW6eeUZAABt","timestamp":"2025-04-25T15:57:44.004-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"23aVk1oKEC_Cx00nAABu","timestamp":"2025-04-25T15:57:44.005-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"23aVk1oKEC_Cx00nAABu","timestamp":"2025-04-25T15:57:44.006-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"w55ZlH6eyel_UAsiAABv","timestamp":"2025-04-25T15:57:44.006-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"w55ZlH6eyel_UAsiAABv","timestamp":"2025-04-25T15:57:44.006-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qC3imzQbDiGbxYRqAABw","timestamp":"2025-04-25T15:57:44.008-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"qC3imzQbDiGbxYRqAABw","timestamp":"2025-04-25T15:57:44.008-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"-IZZPyo2twTLnZTzAABx","timestamp":"2025-04-25T15:57:44.009-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"-IZZPyo2twTLnZTzAABx","timestamp":"2025-04-25T15:57:44.009-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"GRoBCIF90aXN91XPAABy","timestamp":"2025-04-25T15:57:44.010-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"GRoBCIF90aXN91XPAABy","timestamp":"2025-04-25T15:57:44.010-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ZN6lFO8J0uC2lthQAABz","timestamp":"2025-04-25T15:57:44.011-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ZN6lFO8J0uC2lthQAABz","timestamp":"2025-04-25T15:57:44.011-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7WT22z5bRsN2mekNAAB0","timestamp":"2025-04-25T15:57:44.012-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"7WT22z5bRsN2mekNAAB0","timestamp":"2025-04-25T15:57:44.012-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"9o14FsnQZCh-UaU4AAB1","timestamp":"2025-04-25T15:57:44.013-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"9o14FsnQZCh-UaU4AAB1","timestamp":"2025-04-25T15:57:44.013-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"FNyhg1SMfIQNhLApAAB2","timestamp":"2025-04-25T15:57:44.014-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"FNyhg1SMfIQNhLApAAB2","timestamp":"2025-04-25T15:57:44.015-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"71kR-v-4IeTbTXj-AAB3","timestamp":"2025-04-25T15:57:44.015-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"71kR-v-4IeTbTXj-AAB3","timestamp":"2025-04-25T15:57:44.015-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"WkoEOUvAmRW1-jzoAAB4","timestamp":"2025-04-25T15:57:44.016-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"WkoEOUvAmRW1-jzoAAB4","timestamp":"2025-04-25T15:57:44.016-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"GkwRN0o7nYbUNTCgAAB5","timestamp":"2025-04-25T15:57:44.017-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"GkwRN0o7nYbUNTCgAAB5","timestamp":"2025-04-25T15:57:44.017-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"FoLjZZeWVlpJZmtlAAB6","timestamp":"2025-04-25T15:57:44.018-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"FoLjZZeWVlpJZmtlAAB6","timestamp":"2025-04-25T15:57:44.018-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"HGYm7g4O4BLmXGIfAAB8","timestamp":"2025-04-25T15:57:44.119-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"HGYm7g4O4BLmXGIfAAB8","timestamp":"2025-04-25T15:57:44.119-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"vVCzRjAiRUF8DmPgAAB-","timestamp":"2025-04-25T15:57:44.197-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"vVCzRjAiRUF8DmPgAAB-","timestamp":"2025-04-25T15:57:44.197-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"6eKCJCsBi51L2oJBAAB_","timestamp":"2025-04-25T15:57:45.624-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"6eKCJCsBi51L2oJBAAB_","timestamp":"2025-04-25T15:57:45.625-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"YHdjOVIThZDUnFmYAACA","timestamp":"2025-04-25T15:57:45.627-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"YHdjOVIThZDUnFmYAACA","timestamp":"2025-04-25T15:57:45.628-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7v1rMqsoJhxeCWiUAACB","timestamp":"2025-04-25T15:57:45.630-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"7v1rMqsoJhxeCWiUAACB","timestamp":"2025-04-25T15:57:45.630-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"m2eBtPq3WvXykZvxAACD","timestamp":"2025-04-25T15:57:46.172-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"m2eBtPq3WvXykZvxAACD","timestamp":"2025-04-25T15:57:46.172-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"SnctTojWviSZEAHbAACF","timestamp":"2025-04-25T15:57:47.337-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"SnctTojWviSZEAHbAACF","timestamp":"2025-04-25T15:57:47.338-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"8GyhxSHjtcyPqXRDAACH","timestamp":"2025-04-25T15:57:48.286-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"8GyhxSHjtcyPqXRDAACH","timestamp":"2025-04-25T15:57:48.287-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"L2ka1iTMgCYdpk0wAACS","timestamp":"2025-04-25T15:57:48.785-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"L2ka1iTMgCYdpk0wAACS","timestamp":"2025-04-25T15:57:48.785-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qg8vh7eNQ0QfSILyAACT","timestamp":"2025-04-25T15:57:48.816-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"qg8vh7eNQ0QfSILyAACT","timestamp":"2025-04-25T15:57:48.816-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"hddRoW2Hl3ukUPvcAACU","timestamp":"2025-04-25T15:57:48.817-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"hddRoW2Hl3ukUPvcAACU","timestamp":"2025-04-25T15:57:48.817-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"0rNC6V1HZ6091WSYAACV","timestamp":"2025-04-25T15:57:48.819-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"0rNC6V1HZ6091WSYAACV","timestamp":"2025-04-25T15:57:48.820-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ErGUBOIKSRIbarGQAACW","timestamp":"2025-04-25T15:57:48.822-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ErGUBOIKSRIbarGQAACW","timestamp":"2025-04-25T15:57:48.822-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ScZVvfjA-X8K2m-9AACX","timestamp":"2025-04-25T15:57:48.824-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ScZVvfjA-X8K2m-9AACX","timestamp":"2025-04-25T15:57:48.824-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Pz4DVaXG5Wf3djxpAACY","timestamp":"2025-04-25T15:57:48.825-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Pz4DVaXG5Wf3djxpAACY","timestamp":"2025-04-25T15:57:48.825-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"RvCrlH0dpwsIZ193AACZ","timestamp":"2025-04-25T15:57:48.826-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"RvCrlH0dpwsIZ193AACZ","timestamp":"2025-04-25T15:57:48.826-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"VwesqHJBrNyl7yqSAACa","timestamp":"2025-04-25T15:57:48.828-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"VwesqHJBrNyl7yqSAACa","timestamp":"2025-04-25T15:57:48.828-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"zP6Wh_awmQGLpfs1AACb","timestamp":"2025-04-25T15:57:48.829-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"zP6Wh_awmQGLpfs1AACb","timestamp":"2025-04-25T15:57:48.829-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"HGYm7g4O4BLmXGIfAAB8","timestamp":"2025-04-25T15:57:56.947-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"sSRcSDYwyOUvCbTaAABS","timestamp":"2025-04-25T15:57:56.957-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ls8C75yXGnp4ZUMuAABR","timestamp":"2025-04-25T15:57:56.957-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"bylRXC7oOBFeklfEAABQ","timestamp":"2025-04-25T15:57:56.958-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"PZvKwcJlLOa30y-0AABP","timestamp":"2025-04-25T15:57:56.958-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"H8oyZUoGVe4wWhp7AABO","timestamp":"2025-04-25T15:57:56.958-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"dRgoKycOsmDNXbsZAABN","timestamp":"2025-04-25T15:57:56.959-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"fJ8KeEJXNsk4t-yAAABM","timestamp":"2025-04-25T15:57:56.959-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"o0FCit4bf_JNB7dgAABL","timestamp":"2025-04-25T15:57:56.959-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GCeq-LNTqPVtNYRnAABK","timestamp":"2025-04-25T15:57:56.960-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"kbrQesgwI3QO-E2dAABJ","timestamp":"2025-04-25T15:57:56.961-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"j19sc44K3R4W-yitAABI","timestamp":"2025-04-25T15:57:56.961-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"U4EOr7Chg7UR5X-CAABH","timestamp":"2025-04-25T15:57:56.961-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"l-ueOJBXGsfssm4sAABG","timestamp":"2025-04-25T15:57:56.962-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"7kPqxU0_FDdnnz1iAABF","timestamp":"2025-04-25T15:57:56.962-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"AXq86WgQH5yhlRFuAABE","timestamp":"2025-04-25T15:57:56.962-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"M8YkUS8WKAKUtMSQAABD","timestamp":"2025-04-25T15:57:56.962-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"biGhPWoMGfeDPdpYAABC","timestamp":"2025-04-25T15:57:56.963-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"-5JVP2S9vrB6WyqbAABB","timestamp":"2025-04-25T15:57:56.963-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ZQVNTj_Ni2TL0jrMAABA","timestamp":"2025-04-25T15:57:56.964-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"W6yTORaoY3RNBc5VAAA_","timestamp":"2025-04-25T15:57:56.964-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"vVCzRjAiRUF8DmPgAAB-","timestamp":"2025-04-25T15:57:56.965-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"zP6Wh_awmQGLpfs1AACb","timestamp":"2025-04-25T15:57:56.982-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"VwesqHJBrNyl7yqSAACa","timestamp":"2025-04-25T15:57:56.983-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"RvCrlH0dpwsIZ193AACZ","timestamp":"2025-04-25T15:57:56.983-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Pz4DVaXG5Wf3djxpAACY","timestamp":"2025-04-25T15:57:56.983-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ScZVvfjA-X8K2m-9AACX","timestamp":"2025-04-25T15:57:56.984-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ErGUBOIKSRIbarGQAACW","timestamp":"2025-04-25T15:57:56.984-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"0rNC6V1HZ6091WSYAACV","timestamp":"2025-04-25T15:57:56.984-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"hddRoW2Hl3ukUPvcAACU","timestamp":"2025-04-25T15:57:56.984-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qg8vh7eNQ0QfSILyAACT","timestamp":"2025-04-25T15:57:56.985-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"8GyhxSHjtcyPqXRDAACH","timestamp":"2025-04-25T15:57:56.985-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"L2ka1iTMgCYdpk0wAACS","timestamp":"2025-04-25T15:57:56.985-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"SnctTojWviSZEAHbAACF","timestamp":"2025-04-25T15:57:56.986-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"m2eBtPq3WvXykZvxAACD","timestamp":"2025-04-25T15:57:56.986-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"7v1rMqsoJhxeCWiUAACB","timestamp":"2025-04-25T15:57:56.986-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"YHdjOVIThZDUnFmYAACA","timestamp":"2025-04-25T15:57:56.986-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"6eKCJCsBi51L2oJBAAB_","timestamp":"2025-04-25T15:57:56.987-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"FoLjZZeWVlpJZmtlAAB6","timestamp":"2025-04-25T15:57:56.987-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GkwRN0o7nYbUNTCgAAB5","timestamp":"2025-04-25T15:57:56.987-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"WkoEOUvAmRW1-jzoAAB4","timestamp":"2025-04-25T15:57:56.988-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"71kR-v-4IeTbTXj-AAB3","timestamp":"2025-04-25T15:57:56.988-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"FNyhg1SMfIQNhLApAAB2","timestamp":"2025-04-25T15:57:56.988-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"9o14FsnQZCh-UaU4AAB1","timestamp":"2025-04-25T15:57:56.989-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"7WT22z5bRsN2mekNAAB0","timestamp":"2025-04-25T15:57:56.989-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ZN6lFO8J0uC2lthQAABz","timestamp":"2025-04-25T15:57:56.989-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GRoBCIF90aXN91XPAABy","timestamp":"2025-04-25T15:57:56.989-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"-IZZPyo2twTLnZTzAABx","timestamp":"2025-04-25T15:57:56.990-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qC3imzQbDiGbxYRqAABw","timestamp":"2025-04-25T15:57:56.990-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"w55ZlH6eyel_UAsiAABv","timestamp":"2025-04-25T15:57:56.990-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"23aVk1oKEC_Cx00nAABu","timestamp":"2025-04-25T15:57:56.991-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"SrrDswxLOdW6eeUZAABt","timestamp":"2025-04-25T15:57:56.991-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"PsPqDhTK47TsZAUBAABs","timestamp":"2025-04-25T15:57:56.991-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"WJLhGYQoAhKHskkAAABr","timestamp":"2025-04-25T15:57:56.991-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"u5flkewmRJIFv1sNAABq","timestamp":"2025-04-25T15:57:56.992-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"_hG8I2raMT7zpuuAAABp","timestamp":"2025-04-25T15:57:56.992-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"OwkAZMvrBgflMt5WAABo","timestamp":"2025-04-25T15:57:56.992-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Fq03_ymg0tK9L9gvAABn","timestamp":"2025-04-25T15:57:56.992-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"jwPWNvDAAX9Y0HaWAABm","timestamp":"2025-04-25T15:57:56.993-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"-j1q33cK8frSrIeIAABl","timestamp":"2025-04-25T15:57:56.993-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Y_X6VJYvaGOsfPliAABk","timestamp":"2025-04-25T15:57:56.993-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"O3wLA0jqUDUR5P-3AABj","timestamp":"2025-04-25T15:57:56.993-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Fp8dYJ9oVB0wse64AABi","timestamp":"2025-04-25T15:57:56.994-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qmlPk-21dGoAID87AABh","timestamp":"2025-04-25T15:57:56.994-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"1Inkg41GGBnCbHRBAABg","timestamp":"2025-04-25T15:57:56.994-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"iKVYGP52qgi086bgAABf","timestamp":"2025-04-25T15:57:56.994-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ewvVHrw-IuQDIkI_AABe","timestamp":"2025-04-25T15:57:56.995-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"TfxRovpsaawsMYP-AABd","timestamp":"2025-04-25T15:57:56.995-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"S62RoQn4TWbvrqkiAABc","timestamp":"2025-04-25T15:57:56.995-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"O0bL9y3GmXkA-ejYAABb","timestamp":"2025-04-25T15:57:56.995-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"TdJ8-H5We_5UbC2iAABa","timestamp":"2025-04-25T15:57:56.995-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Tv515QZIcuKLLb_8AABZ","timestamp":"2025-04-25T15:57:56.996-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"kA9VCm9CEgEMux-YAABY","timestamp":"2025-04-25T15:57:56.996-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"00U8mxEGk_8OMbSSAABX","timestamp":"2025-04-25T15:57:56.996-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"uXXzBfTYjAis7VrYAABW","timestamp":"2025-04-25T15:57:56.996-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"uFIvnSAMiHSCN9iDAABV","timestamp":"2025-04-25T15:57:56.996-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"tcgZGzpDhufMqHTGAABU","timestamp":"2025-04-25T15:57:56.997-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"fqiJenrIgS0FLObAAABT","timestamp":"2025-04-25T15:57:56.997-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"vH09ZDlM4-5fMCV9AACj","timestamp":"2025-04-25T15:57:59.118-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"vH09ZDlM4-5fMCV9AACj","timestamp":"2025-04-25T15:57:59.118-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"CJvZJlr8IVWAGgkGAACk","timestamp":"2025-04-25T15:57:59.119-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"CJvZJlr8IVWAGgkGAACk","timestamp":"2025-04-25T15:57:59.119-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"JVZSECE1hj6FVnQ7AACo","timestamp":"2025-04-25T15:57:59.132-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"JVZSECE1hj6FVnQ7AACo","timestamp":"2025-04-25T15:57:59.133-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"yaqIck7l7qt0IYTCAACp","timestamp":"2025-04-25T15:57:59.133-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"yaqIck7l7qt0IYTCAACp","timestamp":"2025-04-25T15:57:59.133-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"L1vDR1_E5DkcEzuhAACt","timestamp":"2025-04-25T15:57:59.142-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"L1vDR1_E5DkcEzuhAACt","timestamp":"2025-04-25T15:57:59.142-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"hPQFHVO3BkejnlxuAACu","timestamp":"2025-04-25T15:57:59.143-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"hPQFHVO3BkejnlxuAACu","timestamp":"2025-04-25T15:57:59.143-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"N-s8cj4DzefYYRL1AACy","timestamp":"2025-04-25T15:57:59.155-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"N-s8cj4DzefYYRL1AACy","timestamp":"2025-04-25T15:57:59.156-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"9zEt735KZUHQmzaHAACz","timestamp":"2025-04-25T15:57:59.157-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"9zEt735KZUHQmzaHAACz","timestamp":"2025-04-25T15:57:59.158-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"MK_crzeB0-mDvFO3AAC0","timestamp":"2025-04-25T15:57:59.168-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"MK_crzeB0-mDvFO3AAC0","timestamp":"2025-04-25T15:57:59.168-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"D9l_hP1xAFl2WuldAAC1","timestamp":"2025-04-25T15:57:59.170-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"D9l_hP1xAFl2WuldAAC1","timestamp":"2025-04-25T15:57:59.171-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"sgjujOLAupSmdiOEAAC2","timestamp":"2025-04-25T15:57:59.291-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"sgjujOLAupSmdiOEAAC2","timestamp":"2025-04-25T15:57:59.291-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ZBRZCjWBHzjbtpzFAAC3","timestamp":"2025-04-25T15:57:59.293-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"ZBRZCjWBHzjbtpzFAAC3","timestamp":"2025-04-25T15:57:59.293-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TT9s7HE_ZJiaH7ArAAC8","timestamp":"2025-04-25T15:57:59.305-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"TT9s7HE_ZJiaH7ArAAC8","timestamp":"2025-04-25T15:57:59.306-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"alxhq0sCxXFxs9O-AAC9","timestamp":"2025-04-25T15:57:59.306-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"alxhq0sCxXFxs9O-AAC9","timestamp":"2025-04-25T15:57:59.306-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"j6l_S8s3o9bD5HTRAAC-","timestamp":"2025-04-25T15:57:59.309-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"j6l_S8s3o9bD5HTRAAC-","timestamp":"2025-04-25T15:57:59.309-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TqyFER3KJ1Xza0V5AAC_","timestamp":"2025-04-25T15:57:59.310-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"TqyFER3KJ1Xza0V5AAC_","timestamp":"2025-04-25T15:57:59.311-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ZBRZCjWBHzjbtpzFAAC3","timestamp":"2025-04-25T15:58:06.785-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"sgjujOLAupSmdiOEAAC2","timestamp":"2025-04-25T15:58:06.785-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"9zEt735KZUHQmzaHAACz","timestamp":"2025-04-25T15:58:06.787-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"N-s8cj4DzefYYRL1AACy","timestamp":"2025-04-25T15:58:06.787-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"hPQFHVO3BkejnlxuAACu","timestamp":"2025-04-25T15:58:06.787-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"L1vDR1_E5DkcEzuhAACt","timestamp":"2025-04-25T15:58:06.787-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"yaqIck7l7qt0IYTCAACp","timestamp":"2025-04-25T15:58:06.788-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"JVZSECE1hj6FVnQ7AACo","timestamp":"2025-04-25T15:58:06.788-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"CJvZJlr8IVWAGgkGAACk","timestamp":"2025-04-25T15:58:06.788-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"vH09ZDlM4-5fMCV9AACj","timestamp":"2025-04-25T15:58:06.788-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"D9l_hP1xAFl2WuldAAC1","timestamp":"2025-04-25T15:58:06.788-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"MK_crzeB0-mDvFO3AAC0","timestamp":"2025-04-25T15:58:06.788-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"TqyFER3KJ1Xza0V5AAC_","timestamp":"2025-04-25T15:58:06.790-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"j6l_S8s3o9bD5HTRAAC-","timestamp":"2025-04-25T15:58:06.790-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"alxhq0sCxXFxs9O-AAC9","timestamp":"2025-04-25T15:58:06.790-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"TT9s7HE_ZJiaH7ArAAC8","timestamp":"2025-04-25T15:58:06.791-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"m2ZOx-bVK1gP3J7oAADH","timestamp":"2025-04-25T15:58:14.947-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"m2ZOx-bVK1gP3J7oAADH","timestamp":"2025-04-25T15:58:14.947-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"oDK-oCmfNo7SyDfdAADI","timestamp":"2025-04-25T15:58:14.949-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"oDK-oCmfNo7SyDfdAADI","timestamp":"2025-04-25T15:58:14.950-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"f0d3siXpCcdyvEhdAADJ","timestamp":"2025-04-25T15:58:14.955-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"f0d3siXpCcdyvEhdAADJ","timestamp":"2025-04-25T15:58:14.955-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"WwaJz5Wh4AkNcExLAADN","timestamp":"2025-04-25T15:58:14.962-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"WwaJz5Wh4AkNcExLAADN","timestamp":"2025-04-25T15:58:14.962-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"akbHOBKuHnfRCJN5AADR","timestamp":"2025-04-25T15:58:14.974-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"akbHOBKuHnfRCJN5AADR","timestamp":"2025-04-25T15:58:14.975-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"tTC_ULPOD4I6kmnKAADS","timestamp":"2025-04-25T15:58:14.976-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"tTC_ULPOD4I6kmnKAADS","timestamp":"2025-04-25T15:58:14.976-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"K55SJw-dMf7mzOuwAADV","timestamp":"2025-04-25T15:58:14.987-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"K55SJw-dMf7mzOuwAADV","timestamp":"2025-04-25T15:58:14.988-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"aG6J4x8LDBNAlgo5AADW","timestamp":"2025-04-25T15:58:14.988-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"aG6J4x8LDBNAlgo5AADW","timestamp":"2025-04-25T15:58:14.988-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Xh9MDlJ8RWOSdeWmAADX","timestamp":"2025-04-25T15:58:14.989-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Xh9MDlJ8RWOSdeWmAADX","timestamp":"2025-04-25T15:58:14.990-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"UXFvvyYbHUs1Yz1TAADY","timestamp":"2025-04-25T15:58:14.997-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"UXFvvyYbHUs1Yz1TAADY","timestamp":"2025-04-25T15:58:14.998-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"0EO3VBZdy3FsHz2yAADZ","timestamp":"2025-04-25T15:58:15.114-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"0EO3VBZdy3FsHz2yAADZ","timestamp":"2025-04-25T15:58:15.114-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PY0cKB-26lrWcXfFAADa","timestamp":"2025-04-25T15:58:15.116-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"PY0cKB-26lrWcXfFAADa","timestamp":"2025-04-25T15:58:15.117-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"tHY4VDT1y198uddYAADf","timestamp":"2025-04-25T15:58:15.152-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"tHY4VDT1y198uddYAADf","timestamp":"2025-04-25T15:58:15.152-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"fp6L6ZIU-77KTSKCAADg","timestamp":"2025-04-25T15:58:15.154-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"fp6L6ZIU-77KTSKCAADg","timestamp":"2025-04-25T15:58:15.154-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"NfC9x2SVj4kBjyXpAADh","timestamp":"2025-04-25T15:58:15.155-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"NfC9x2SVj4kBjyXpAADh","timestamp":"2025-04-25T15:58:15.156-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"A-KmvjoLRb65uHyuAADi","timestamp":"2025-04-25T15:58:15.158-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"A-KmvjoLRb65uHyuAADi","timestamp":"2025-04-25T15:58:15.158-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"aG6J4x8LDBNAlgo5AADW","timestamp":"2025-04-25T15:58:20.416-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"tTC_ULPOD4I6kmnKAADS","timestamp":"2025-04-25T15:58:20.418-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"akbHOBKuHnfRCJN5AADR","timestamp":"2025-04-25T15:58:20.418-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"WwaJz5Wh4AkNcExLAADN","timestamp":"2025-04-25T15:58:20.419-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"f0d3siXpCcdyvEhdAADJ","timestamp":"2025-04-25T15:58:20.419-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"oDK-oCmfNo7SyDfdAADI","timestamp":"2025-04-25T15:58:20.419-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"m2ZOx-bVK1gP3J7oAADH","timestamp":"2025-04-25T15:58:20.419-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"UXFvvyYbHUs1Yz1TAADY","timestamp":"2025-04-25T15:58:20.419-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"A-KmvjoLRb65uHyuAADi","timestamp":"2025-04-25T15:58:20.421-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"NfC9x2SVj4kBjyXpAADh","timestamp":"2025-04-25T15:58:20.421-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"fp6L6ZIU-77KTSKCAADg","timestamp":"2025-04-25T15:58:20.421-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"tHY4VDT1y198uddYAADf","timestamp":"2025-04-25T15:58:20.421-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"PY0cKB-26lrWcXfFAADa","timestamp":"2025-04-25T15:58:20.422-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"0EO3VBZdy3FsHz2yAADZ","timestamp":"2025-04-25T15:58:20.422-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Xh9MDlJ8RWOSdeWmAADX","timestamp":"2025-04-25T15:58:20.422-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"K55SJw-dMf7mzOuwAADV","timestamp":"2025-04-25T15:58:20.422-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PwRF62D4Pci4RQq5AADr","timestamp":"2025-04-25T15:58:22.411-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"PwRF62D4Pci4RQq5AADr","timestamp":"2025-04-25T15:58:22.412-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"l9qWXWBIExOrDRHgAADs","timestamp":"2025-04-25T15:58:22.412-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"l9qWXWBIExOrDRHgAADs","timestamp":"2025-04-25T15:58:22.413-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xCnJxiBV0LXOcVO1AADw","timestamp":"2025-04-25T15:58:22.424-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"xCnJxiBV0LXOcVO1AADw","timestamp":"2025-04-25T15:58:22.425-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Tq0aYwW711VG_ccvAADx","timestamp":"2025-04-25T15:58:22.426-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Tq0aYwW711VG_ccvAADx","timestamp":"2025-04-25T15:58:22.426-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"CbIdtzU9v3QNkVF3AAD1","timestamp":"2025-04-25T15:58:22.438-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"CbIdtzU9v3QNkVF3AAD1","timestamp":"2025-04-25T15:58:22.439-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"XTavzIoSI8Adw8O7AAD2","timestamp":"2025-04-25T15:58:22.439-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"XTavzIoSI8Adw8O7AAD2","timestamp":"2025-04-25T15:58:22.440-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"wyu7auOKJrrnvrhuAAD5","timestamp":"2025-04-25T15:58:22.451-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"wyu7auOKJrrnvrhuAAD5","timestamp":"2025-04-25T15:58:22.452-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"U1WmPSsQap83hLxxAAD6","timestamp":"2025-04-25T15:58:22.453-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"U1WmPSsQap83hLxxAAD6","timestamp":"2025-04-25T15:58:22.453-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"BCApAz_3ndYifagkAAD7","timestamp":"2025-04-25T15:58:22.461-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"BCApAz_3ndYifagkAAD7","timestamp":"2025-04-25T15:58:22.461-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_oEJYHiUCBw_LlgoAAD8","timestamp":"2025-04-25T15:58:22.467-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"_oEJYHiUCBw_LlgoAAD8","timestamp":"2025-04-25T15:58:22.467-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xWZAHwUJ1npjN0EHAAD9","timestamp":"2025-04-25T15:58:22.589-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"xWZAHwUJ1npjN0EHAAD9","timestamp":"2025-04-25T15:58:22.589-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"lTswiJ5PN1xEY6PhAAD-","timestamp":"2025-04-25T15:58:22.590-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"lTswiJ5PN1xEY6PhAAD-","timestamp":"2025-04-25T15:58:22.590-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"5Av_8FzGpcSyKk7hAAED","timestamp":"2025-04-25T15:58:22.610-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"5Av_8FzGpcSyKk7hAAED","timestamp":"2025-04-25T15:58:22.610-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"JqnsLlkphKfLUNVVAAEE","timestamp":"2025-04-25T15:58:22.614-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"JqnsLlkphKfLUNVVAAEE","timestamp":"2025-04-25T15:58:22.614-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"VkSOWlAKJBLb09Y1AAEF","timestamp":"2025-04-25T15:58:22.616-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"VkSOWlAKJBLb09Y1AAEF","timestamp":"2025-04-25T15:58:22.617-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_0pElVsDXVrlC2_hAAEG","timestamp":"2025-04-25T15:58:22.618-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"_0pElVsDXVrlC2_hAAEG","timestamp":"2025-04-25T15:58:22.618-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xLK0nhUIJyWLgv5XAAEJ","timestamp":"2025-04-25T15:58:35.955-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"xLK0nhUIJyWLgv5XAAEJ","timestamp":"2025-04-25T15:58:35.955-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"8K71XSh71n0wzew-AAEK","timestamp":"2025-04-25T15:58:35.957-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"8K71XSh71n0wzew-AAEK","timestamp":"2025-04-25T15:58:35.957-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"j_Wea1sib0ypaJczAAEN","timestamp":"2025-04-25T15:58:36.195-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"j_Wea1sib0ypaJczAAEN","timestamp":"2025-04-25T15:58:36.195-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"N2Ml4ni9sw6E19GgAAEO","timestamp":"2025-04-25T15:58:36.197-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"N2Ml4ni9sw6E19GgAAEO","timestamp":"2025-04-25T15:58:36.197-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"51KkmH_21lCabU4UAAER","timestamp":"2025-04-25T15:58:36.445-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"51KkmH_21lCabU4UAAER","timestamp":"2025-04-25T15:58:36.446-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7Qj6zrFWsHAKmv2WAAES","timestamp":"2025-04-25T15:58:36.447-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"7Qj6zrFWsHAKmv2WAAES","timestamp":"2025-04-25T15:58:36.447-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"quypic1Ehx5dUqQ1AAEV","timestamp":"2025-04-25T15:58:36.644-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"quypic1Ehx5dUqQ1AAEV","timestamp":"2025-04-25T15:58:36.645-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"gS77PnBZ5fwbw4S6AAEW","timestamp":"2025-04-25T15:58:36.646-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"gS77PnBZ5fwbw4S6AAEW","timestamp":"2025-04-25T15:58:36.646-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"YquK2PEjy3dLPI7lAAEZ","timestamp":"2025-04-25T15:58:36.820-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"YquK2PEjy3dLPI7lAAEZ","timestamp":"2025-04-25T15:58:36.820-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"wKn0cDJbU79Gb4w0AAEa","timestamp":"2025-04-25T15:58:36.821-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"wKn0cDJbU79Gb4w0AAEa","timestamp":"2025-04-25T15:58:36.821-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7lNo-wNIhtXyTQ2eAAEd","timestamp":"2025-04-25T15:58:37.279-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"7lNo-wNIhtXyTQ2eAAEd","timestamp":"2025-04-25T15:58:37.279-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"as-p5Ff-3Uq_AnlUAAEe","timestamp":"2025-04-25T15:58:37.280-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"as-p5Ff-3Uq_AnlUAAEe","timestamp":"2025-04-25T15:58:37.280-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"iqcmnFzJknDuAdbUAAEh","timestamp":"2025-04-25T15:58:37.480-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"iqcmnFzJknDuAdbUAAEh","timestamp":"2025-04-25T15:58:37.480-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"H1ILL4aq-tHiQ8fxAAEi","timestamp":"2025-04-25T15:58:37.483-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"H1ILL4aq-tHiQ8fxAAEi","timestamp":"2025-04-25T15:58:37.483-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"YfRaOvlHlk4PAMvEAAEl","timestamp":"2025-04-25T15:58:37.645-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"YfRaOvlHlk4PAMvEAAEl","timestamp":"2025-04-25T15:58:37.646-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Mv5kiYK5vsMzJQi3AAEm","timestamp":"2025-04-25T15:58:37.647-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Mv5kiYK5vsMzJQi3AAEm","timestamp":"2025-04-25T15:58:37.647-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"kIAAKt_dv6GlbgUqAAEp","timestamp":"2025-04-25T15:58:38.178-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"kIAAKt_dv6GlbgUqAAEp","timestamp":"2025-04-25T15:58:38.178-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"fu0aFCMJI2ZF-LHbAAEq","timestamp":"2025-04-25T15:58:38.179-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"fu0aFCMJI2ZF-LHbAAEq","timestamp":"2025-04-25T15:58:38.179-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"swWrk5eh0BsIF7QZAAEt","timestamp":"2025-04-25T15:58:38.347-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"swWrk5eh0BsIF7QZAAEt","timestamp":"2025-04-25T15:58:38.348-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"9Ovv0OqfsTZjV-_bAAEu","timestamp":"2025-04-25T15:58:38.349-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"9Ovv0OqfsTZjV-_bAAEu","timestamp":"2025-04-25T15:58:38.349-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"5IhJvJ2mcrAZYh-KAAEx","timestamp":"2025-04-25T15:58:38.565-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"5IhJvJ2mcrAZYh-KAAEx","timestamp":"2025-04-25T15:58:38.566-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"FEkIX422k67Y-I98AAEy","timestamp":"2025-04-25T15:58:38.567-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"FEkIX422k67Y-I98AAEy","timestamp":"2025-04-25T15:58:38.567-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"emNcwB-wCSl4lVJ9AAE1","timestamp":"2025-04-25T15:58:38.746-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"emNcwB-wCSl4lVJ9AAE1","timestamp":"2025-04-25T15:58:38.747-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"cf7w5xm-wg0iEQF3AAE2","timestamp":"2025-04-25T15:58:38.748-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"cf7w5xm-wg0iEQF3AAE2","timestamp":"2025-04-25T15:58:38.748-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"gxjxhIOV78t44ugIAAE5","timestamp":"2025-04-25T15:58:39.228-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"gxjxhIOV78t44ugIAAE5","timestamp":"2025-04-25T15:58:39.228-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"kbOr30jmHrJHiMh2AAE6","timestamp":"2025-04-25T15:58:39.230-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"kbOr30jmHrJHiMh2AAE6","timestamp":"2025-04-25T15:58:39.230-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"51bTy1-doPGusk_MAAE9","timestamp":"2025-04-25T15:58:39.361-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"51bTy1-doPGusk_MAAE9","timestamp":"2025-04-25T15:58:39.361-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"jBJYoTSs-yAFEc7jAAE-","timestamp":"2025-04-25T15:58:39.363-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"jBJYoTSs-yAFEc7jAAE-","timestamp":"2025-04-25T15:58:39.363-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"a8ww_W7e4oIIYCIIAAFB","timestamp":"2025-04-25T15:58:39.449-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"a8ww_W7e4oIIYCIIAAFB","timestamp":"2025-04-25T15:58:39.449-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"dGnILWICVpdtXtRhAAFC","timestamp":"2025-04-25T15:58:39.451-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"dGnILWICVpdtXtRhAAFC","timestamp":"2025-04-25T15:58:39.451-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"gunleZoBS2pgRTJFAAFF","timestamp":"2025-04-25T15:58:39.661-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"gunleZoBS2pgRTJFAAFF","timestamp":"2025-04-25T15:58:39.661-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xbc96OXn7pI8PzQFAAFG","timestamp":"2025-04-25T15:58:39.662-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"xbc96OXn7pI8PzQFAAFG","timestamp":"2025-04-25T15:58:39.663-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"j6dN3CdgAv8rbKd6AAFJ","timestamp":"2025-04-25T15:58:39.744-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"j6dN3CdgAv8rbKd6AAFJ","timestamp":"2025-04-25T15:58:39.744-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"rXx0K2Bsd_fovS1GAAFK","timestamp":"2025-04-25T15:58:39.746-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"rXx0K2Bsd_fovS1GAAFK","timestamp":"2025-04-25T15:58:39.746-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Iu3tlfG6--lU-zT8AAFN","timestamp":"2025-04-25T15:58:39.934-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"Iu3tlfG6--lU-zT8AAFN","timestamp":"2025-04-25T15:58:39.935-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"AQpdZ_nmMshYFienAAFO","timestamp":"2025-04-25T15:58:39.936-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"AQpdZ_nmMshYFienAAFO","timestamp":"2025-04-25T15:58:39.936-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"vr6R7sMncPA8bLMKAAFR","timestamp":"2025-04-25T15:58:47.934-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"vr6R7sMncPA8bLMKAAFR","timestamp":"2025-04-25T15:58:47.934-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"QaGLy9iSHA984IkVAAFS","timestamp":"2025-04-25T15:58:47.937-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{"setSocketError":"undefined","token":"missing"},"socketId":"QaGLy9iSHA984IkVAAFS","timestamp":"2025-04-25T15:58:47.937-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T16:29:35.872-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T20:29:35.871Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T16:29:35.874-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T20:29:35.872Z"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"SV3VPXnKF00jUBErAAAB","timestamp":"2025-04-25T16:29:36.008-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"SV3VPXnKF00jUBErAAAB","timestamp":"2025-04-25T16:29:36.008-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"lBIZ66uAMSBPo78GAAAD","timestamp":"2025-04-25T16:29:36.033-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"lBIZ66uAMSBPo78GAAAD","timestamp":"2025-04-25T16:29:36.033-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"l-GDRYiAvoc0BpxqAAA-","timestamp":"2025-04-25T16:29:36.166-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"l-GDRYiAvoc0BpxqAAA-","timestamp":"2025-04-25T16:29:36.166-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"GFZIazrj5UpFJW8AAAA_","timestamp":"2025-04-25T16:29:36.167-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"GFZIazrj5UpFJW8AAAA_","timestamp":"2025-04-25T16:29:36.167-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"D3ChRavDI7JplDYLAABA","timestamp":"2025-04-25T16:29:36.169-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"D3ChRavDI7JplDYLAABA","timestamp":"2025-04-25T16:29:36.169-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"-pHsQMLYaJL-JyfhAABB","timestamp":"2025-04-25T16:29:36.170-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"-pHsQMLYaJL-JyfhAABB","timestamp":"2025-04-25T16:29:36.170-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"lUJto3zdWAzD4M29AABC","timestamp":"2025-04-25T16:29:36.170-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"lUJto3zdWAzD4M29AABC","timestamp":"2025-04-25T16:29:36.171-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Ryqaqu_-5JAMKxNdAABD","timestamp":"2025-04-25T16:29:36.172-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"Ryqaqu_-5JAMKxNdAABD","timestamp":"2025-04-25T16:29:36.172-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"NyBsP0a8AbE0zX3VAABE","timestamp":"2025-04-25T16:29:36.173-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"NyBsP0a8AbE0zX3VAABE","timestamp":"2025-04-25T16:29:36.173-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_vDWsrwQG-XABF40AABF","timestamp":"2025-04-25T16:29:36.174-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"_vDWsrwQG-XABF40AABF","timestamp":"2025-04-25T16:29:36.174-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Sre3OKuqkD0-1o8qAABG","timestamp":"2025-04-25T16:29:36.175-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"r3k5MV5H5VjH4rv0AABH","timestamp":"2025-04-25T16:29:36.177-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"JPlxwooy2tCojFdoAABI","timestamp":"2025-04-25T16:29:36.179-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"2hZHIFIKT6eCZ1voAABJ","timestamp":"2025-04-25T16:29:36.180-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"5WzQiEd-U-sAfARVAABK","timestamp":"2025-04-25T16:29:36.180-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"kvQl4Sq3x0VafxdlAABL","timestamp":"2025-04-25T16:29:36.181-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Cm2derIl3Y6QXiNvAABM","timestamp":"2025-04-25T16:29:36.183-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"qVAH9zT19kIKdn1wAABN","timestamp":"2025-04-25T16:29:36.184-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"9enWL7yLNpIqPc6GAABO","timestamp":"2025-04-25T16:29:36.185-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"4EzBGfLxmdM66Ni7AABP","timestamp":"2025-04-25T16:29:36.186-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"kow-y0AwTd2Za5LTAABQ","timestamp":"2025-04-25T16:29:36.187-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"-SuZ3zn2u2OawVy2AABR","timestamp":"2025-04-25T16:29:36.188-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"K5VhF56jXLP6lP1XAABS","timestamp":"2025-04-25T16:29:36.189-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"ujzP4rYh4ZGg5s9mAABT","timestamp":"2025-04-25T16:29:36.191-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"ICW4heGsSE8FA0GVAABU","timestamp":"2025-04-25T16:29:36.192-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"soJXIjl4swi_HU_2AABV","timestamp":"2025-04-25T16:29:36.193-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"MA1Skl3qGNtbFMIFAABW","timestamp":"2025-04-25T16:29:36.195-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"9-kBS68hi3QEXrjRAABX","timestamp":"2025-04-25T16:29:36.196-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"lcQWwIG5Kht0OdlpAABY","timestamp":"2025-04-25T16:29:36.197-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"OTf74WfglYoWZY0DAABZ","timestamp":"2025-04-25T16:29:36.197-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"pGF7E-ecEbktpQ2YAABa","timestamp":"2025-04-25T16:29:36.199-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"8ht1PB6U5zdz_SkhAABb","timestamp":"2025-04-25T16:29:36.199-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"O_ECXpQbHTdLn-CbAABc","timestamp":"2025-04-25T16:29:36.200-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"qAd_h6kMqHW_HvGzAABd","timestamp":"2025-04-25T16:29:36.203-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"H8Tni1Nk3NcbGLWiAABe","timestamp":"2025-04-25T16:29:36.204-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"FZoLs2g4GWMFYcM3AABf","timestamp":"2025-04-25T16:29:36.206-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"q86kN3L_gpsUCnI_AABg","timestamp":"2025-04-25T16:29:36.207-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"8CMkZj6OrkMk6P1NAABh","timestamp":"2025-04-25T16:29:36.208-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"sW5QvhWk_3NnSk2FAABi","timestamp":"2025-04-25T16:29:36.210-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"FiqZDa4SFMDo3f4cAABj","timestamp":"2025-04-25T16:29:36.211-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"ED9joO8V1oMVRjLqAABk","timestamp":"2025-04-25T16:29:36.212-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"3pJGUnVlxYr52VRWAABl","timestamp":"2025-04-25T16:29:36.213-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"_2NRDGtCV-IF6amHAABm","timestamp":"2025-04-25T16:29:36.215-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"BDyDKAwbH-Vl5JXBAABn","timestamp":"2025-04-25T16:29:36.216-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"GE_q6wL4BoBZkDJlAABo","timestamp":"2025-04-25T16:29:36.217-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"euUbZzNyL8VAlDmWAABp","timestamp":"2025-04-25T16:29:36.219-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"_Cdy2340AUKvRpnsAABq","timestamp":"2025-04-25T16:29:36.220-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"9YhL-cq0D4efiz75AABr","timestamp":"2025-04-25T16:29:36.220-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"B7A4Hr3xCGI5_UuLAABs","timestamp":"2025-04-25T16:29:36.221-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"yWO7LjPVxhRM9boaAABt","timestamp":"2025-04-25T16:29:36.222-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Wos3Ays6pne1ROlgAABu","timestamp":"2025-04-25T16:29:36.223-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"XmD35CI2lKqypZ7-AABv","timestamp":"2025-04-25T16:29:36.225-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Tc2AEzJPTT8vWQLQAABw","timestamp":"2025-04-25T16:29:36.226-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"_ULuvF9njqpAoxuQAABx","timestamp":"2025-04-25T16:29:36.227-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"v_mgHi4YkJn4DcZ6AABy","timestamp":"2025-04-25T16:29:36.231-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"uETsw2TSWDfWmnjBAABz","timestamp":"2025-04-25T16:29:36.232-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Sxe0fleYWLnTRYatAAB0","timestamp":"2025-04-25T16:29:36.233-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"MvYCl_NKasC_N4kdAAB1","timestamp":"2025-04-25T16:29:36.239-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"1A68ZdxlUw-HciS-AAB2","timestamp":"2025-04-25T16:29:36.254-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"0lBm8bjshJvF0ZJBAAB3","timestamp":"2025-04-25T16:29:36.262-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"2V2iJr8lBqhGQPFIAAB6","timestamp":"2025-04-25T16:29:37.175-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"2V2iJr8lBqhGQPFIAAB6","timestamp":"2025-04-25T16:29:37.175-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"SmKByCKNrJ60mXH_AAB7","timestamp":"2025-04-25T16:29:37.178-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"SmKByCKNrJ60mXH_AAB7","timestamp":"2025-04-25T16:29:37.178-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"SV3VPXnKF00jUBErAAAB","timestamp":"2025-04-25T16:29:41.821-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"SmKByCKNrJ60mXH_AAB7","timestamp":"2025-04-25T16:29:41.826-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"2V2iJr8lBqhGQPFIAAB6","timestamp":"2025-04-25T16:29:41.827-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"_vDWsrwQG-XABF40AABF","timestamp":"2025-04-25T16:29:41.828-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"NyBsP0a8AbE0zX3VAABE","timestamp":"2025-04-25T16:29:41.828-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Ryqaqu_-5JAMKxNdAABD","timestamp":"2025-04-25T16:29:41.828-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"lUJto3zdWAzD4M29AABC","timestamp":"2025-04-25T16:29:41.828-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"-pHsQMLYaJL-JyfhAABB","timestamp":"2025-04-25T16:29:41.829-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GFZIazrj5UpFJW8AAAA_","timestamp":"2025-04-25T16:29:41.829-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"D3ChRavDI7JplDYLAABA","timestamp":"2025-04-25T16:29:41.829-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"l-GDRYiAvoc0BpxqAAA-","timestamp":"2025-04-25T16:29:41.830-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"lBIZ66uAMSBPo78GAAAD","timestamp":"2025-04-25T16:29:41.830-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"7pU6ywE1jMnormDhAACD","timestamp":"2025-04-25T16:29:44.461-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"7pU6ywE1jMnormDhAACD","timestamp":"2025-04-25T16:29:44.461-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Qnr8L2zCWPm0aDUnAACE","timestamp":"2025-04-25T16:29:44.462-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"Qnr8L2zCWPm0aDUnAACE","timestamp":"2025-04-25T16:29:44.462-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"UUYDifXmPXsRM-kJAACI","timestamp":"2025-04-25T16:29:44.470-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"UUYDifXmPXsRM-kJAACI","timestamp":"2025-04-25T16:29:44.470-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qgTqAFD_-ZcjXXWEAACJ","timestamp":"2025-04-25T16:29:44.470-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"qgTqAFD_-ZcjXXWEAACJ","timestamp":"2025-04-25T16:29:44.471-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"I-Nn2x4mYELOjP3LAACN","timestamp":"2025-04-25T16:29:44.482-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"I-Nn2x4mYELOjP3LAACN","timestamp":"2025-04-25T16:29:44.482-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"XEHDFlf40MprY4PpAACO","timestamp":"2025-04-25T16:29:44.483-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"XEHDFlf40MprY4PpAACO","timestamp":"2025-04-25T16:29:44.483-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"m2WPIxTxW20hmxpuAACS","timestamp":"2025-04-25T16:29:44.496-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"m2WPIxTxW20hmxpuAACS","timestamp":"2025-04-25T16:29:44.496-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qRjDDAN2yMVFM_myAACT","timestamp":"2025-04-25T16:29:44.497-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"qRjDDAN2yMVFM_myAACT","timestamp":"2025-04-25T16:29:44.497-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"4HsxPVWvz-IzA89YAACU","timestamp":"2025-04-25T16:29:44.509-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"e8YzxtwucYgi-D-LAACV","timestamp":"2025-04-25T16:29:44.512-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"O7jp8j6g0jOTYYr8AACW","timestamp":"2025-04-25T16:29:44.622-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"i4I1AVY8nXPLpn6PAACX","timestamp":"2025-04-25T16:29:44.625-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Hnv1fhM3JAjaOD9wAACa","timestamp":"2025-04-25T16:29:44.657-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"Zu9HCjsYUL3x5APoAACb","timestamp":"2025-04-25T16:29:44.658-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qgTqAFD_-ZcjXXWEAACJ","timestamp":"2025-04-25T16:30:55.899-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"UUYDifXmPXsRM-kJAACI","timestamp":"2025-04-25T16:30:55.900-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"Qnr8L2zCWPm0aDUnAACE","timestamp":"2025-04-25T16:30:55.900-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"7pU6ywE1jMnormDhAACD","timestamp":"2025-04-25T16:30:55.900-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"e8YzxtwucYgi-D-LAACV","timestamp":"2025-04-25T16:30:55.901-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"4HsxPVWvz-IzA89YAACU","timestamp":"2025-04-25T16:30:55.901-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qRjDDAN2yMVFM_myAACT","timestamp":"2025-04-25T16:30:55.902-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"m2WPIxTxW20hmxpuAACS","timestamp":"2025-04-25T16:30:55.903-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"XEHDFlf40MprY4PpAACO","timestamp":"2025-04-25T16:30:55.903-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"I-Nn2x4mYELOjP3LAACN","timestamp":"2025-04-25T16:30:55.904-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"pK5vN28jEfTmSpQoAACk","timestamp":"2025-04-25T16:30:58.389-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"pK5vN28jEfTmSpQoAACk","timestamp":"2025-04-25T16:30:58.390-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"NAPCUgY-Olt2T7pNAACl","timestamp":"2025-04-25T16:30:58.391-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"NAPCUgY-Olt2T7pNAACl","timestamp":"2025-04-25T16:30:58.391-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"lVtxRqGRb2I4ahRwAACm","timestamp":"2025-04-25T16:30:58.393-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"lVtxRqGRb2I4ahRwAACm","timestamp":"2025-04-25T16:30:58.393-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"vInbUOX_llW3PJTDAACq","timestamp":"2025-04-25T16:30:58.402-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"vInbUOX_llW3PJTDAACq","timestamp":"2025-04-25T16:30:58.403-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"F53Fimfy1XLGsZUDAACu","timestamp":"2025-04-25T16:30:58.414-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"F53Fimfy1XLGsZUDAACu","timestamp":"2025-04-25T16:30:58.415-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"bbSBCTH79CQRnxtVAACv","timestamp":"2025-04-25T16:30:58.416-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"bbSBCTH79CQRnxtVAACv","timestamp":"2025-04-25T16:30:58.416-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"iloRd3utNDjJOUQ5AACy","timestamp":"2025-04-25T16:30:58.432-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"iloRd3utNDjJOUQ5AACy","timestamp":"2025-04-25T16:30:58.432-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"VptUDfzsmYLwa2AeAACz","timestamp":"2025-04-25T16:30:58.434-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"OUhHSgZbIvQZZ5NYAAC0","timestamp":"2025-04-25T16:30:58.434-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"OUhHSgZbIvQZZ5NYAAC0","timestamp":"2025-04-25T16:30:58.435-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"f4tikxw-JUhHidGoAAC1","timestamp":"2025-04-25T16:30:58.445-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"EO0Dd7H9Pj87zXozAAC2","timestamp":"2025-04-25T16:30:58.563-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"vR60lj6CSfeoC_XxAAC3","timestamp":"2025-04-25T16:30:58.564-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"nw0R7zUKf2n_e470AAC8","timestamp":"2025-04-25T16:30:58.585-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"OKbUbA6KRDjRw_4cAAC9","timestamp":"2025-04-25T16:30:58.588-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"ZfFS-WJ116UGx_2TAAC-","timestamp":"2025-04-25T16:30:58.590-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"HE3d1ak-myyhaVGvAAC_","timestamp":"2025-04-25T16:30:58.591-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-25T16:37:48.617-04:00"}
{"level":"debug","message":"grok.js: Initializing /api/grok router","timestamp":"2025-04-25T20:37:48.616Z"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-25T16:37:48.619-04:00"}
{"level":"info","message":"Mounted /api/grok successfully","timestamp":"2025-04-25T20:37:48.617Z"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qz5we0B7kl6xkFx8AAAB","timestamp":"2025-04-25T16:37:48.671-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"c89Q6aJqD63kFigDAAAQ","timestamp":"2025-04-25T16:37:48.783-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"c89Q6aJqD63kFigDAAAQ","timestamp":"2025-04-25T16:37:48.783-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"mXkL8rCMmk4gdZFtAAAR","timestamp":"2025-04-25T16:37:48.785-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"mXkL8rCMmk4gdZFtAAAR","timestamp":"2025-04-25T16:37:48.785-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"ofXBOqTkfIwhQ6nkAAAS","timestamp":"2025-04-25T16:37:48.787-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"ofXBOqTkfIwhQ6nkAAAS","timestamp":"2025-04-25T16:37:48.787-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"-1wi1SLFLCmgAN1rAAAT","timestamp":"2025-04-25T16:37:48.788-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"-1wi1SLFLCmgAN1rAAAT","timestamp":"2025-04-25T16:37:48.789-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"pt2C4srpKiiUISPhAAAU","timestamp":"2025-04-25T16:37:48.790-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"pt2C4srpKiiUISPhAAAU","timestamp":"2025-04-25T16:37:48.790-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"w6tY_7mcbugunJUhAAAV","timestamp":"2025-04-25T16:37:48.792-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"w6tY_7mcbugunJUhAAAV","timestamp":"2025-04-25T16:37:48.792-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TVhoHj3CjKe6SVcFAAAW","timestamp":"2025-04-25T16:37:48.793-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"TVhoHj3CjKe6SVcFAAAW","timestamp":"2025-04-25T16:37:48.794-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"MZ_xOYBAMSyYBOV8AAAX","timestamp":"2025-04-25T16:37:48.795-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"MZ_xOYBAMSyYBOV8AAAX","timestamp":"2025-04-25T16:37:48.795-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"jycBgWW26RCGYkAWAAAY","timestamp":"2025-04-25T16:37:48.796-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"jycBgWW26RCGYkAWAAAY","timestamp":"2025-04-25T16:37:48.796-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"o8y6DkhUXv21uEbqAAAZ","timestamp":"2025-04-25T16:37:48.797-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"-iXynM_b0a8o0IbYAAAa","timestamp":"2025-04-25T16:37:48.798-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"lZz3OpsgrTWxn2hkAAAb","timestamp":"2025-04-25T16:37:48.800-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"AUq6kkSjvooGUMxxAAAc","timestamp":"2025-04-25T16:37:48.802-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"DJo6fAN8SMsSGHbbAAAd","timestamp":"2025-04-25T16:37:48.804-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"TmNm1idjzeJjhUspAAAi","timestamp":"2025-04-25T16:37:49.179-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"ih5P5T81waI-C1iVAAAj","timestamp":"2025-04-25T16:37:49.181-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"5werojkhX4fSetcdAAAk","timestamp":"2025-04-25T16:37:49.182-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"1LW3xw_hJ25P-RcoAAAl","timestamp":"2025-04-25T16:37:49.184-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"nfl2E37yOJb47gFcAAAp","timestamp":"2025-04-25T16:37:50.175-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"nfl2E37yOJb47gFcAAAp","timestamp":"2025-04-25T16:37:50.175-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"I1IUXJfTTrDqchdtAAAq","timestamp":"2025-04-25T16:37:50.176-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"I1IUXJfTTrDqchdtAAAq","timestamp":"2025-04-25T16:37:50.177-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"eAFUAd3eQEpjHw5OAAAr","timestamp":"2025-04-25T16:37:50.178-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"DjGHdVbR35V0gEmmAAAt","timestamp":"2025-04-25T16:37:51.172-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"JLlJBR03iTj6QHX_AAAv","timestamp":"2025-04-25T16:37:53.174-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qz5we0B7kl6xkFx8AAAB","timestamp":"2025-04-25T16:37:58.567-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"JLlJBR03iTj6QHX_AAAv","timestamp":"2025-04-25T16:37:58.573-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"DjGHdVbR35V0gEmmAAAt","timestamp":"2025-04-25T16:37:58.573-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"I1IUXJfTTrDqchdtAAAq","timestamp":"2025-04-25T16:37:58.574-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"nfl2E37yOJb47gFcAAAp","timestamp":"2025-04-25T16:37:58.574-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"eAFUAd3eQEpjHw5OAAAr","timestamp":"2025-04-25T16:37:58.575-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"jycBgWW26RCGYkAWAAAY","timestamp":"2025-04-25T16:37:58.575-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"MZ_xOYBAMSyYBOV8AAAX","timestamp":"2025-04-25T16:37:58.575-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"TVhoHj3CjKe6SVcFAAAW","timestamp":"2025-04-25T16:37:58.576-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"w6tY_7mcbugunJUhAAAV","timestamp":"2025-04-25T16:37:58.576-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"pt2C4srpKiiUISPhAAAU","timestamp":"2025-04-25T16:37:58.576-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"-1wi1SLFLCmgAN1rAAAT","timestamp":"2025-04-25T16:37:58.577-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"ofXBOqTkfIwhQ6nkAAAS","timestamp":"2025-04-25T16:37:58.577-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"mXkL8rCMmk4gdZFtAAAR","timestamp":"2025-04-25T16:37:58.577-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"c89Q6aJqD63kFigDAAAQ","timestamp":"2025-04-25T16:37:58.578-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"XCw477VhC99wyqVwAAA3","timestamp":"2025-04-25T16:38:01.739-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"XCw477VhC99wyqVwAAA3","timestamp":"2025-04-25T16:38:01.740-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"aZWUKZm1pN2onwpCAAA4","timestamp":"2025-04-25T16:38:01.741-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"aZWUKZm1pN2onwpCAAA4","timestamp":"2025-04-25T16:38:01.741-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"GrmyIbRYV8Z-Vs6vAAA7","timestamp":"2025-04-25T16:38:01.757-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"bmJx46wUSggojLSmAAA8","timestamp":"2025-04-25T16:38:01.758-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"oje_lYn7FL0XvX5VAAA9","timestamp":"2025-04-25T16:38:01.773-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"uYybdfzyJdq6yRxsAAA-","timestamp":"2025-04-25T16:38:01.780-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"dx-SuzmNMoW66CqfAAA_","timestamp":"2025-04-25T16:38:01.781-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"qNNkgxqij5kBYspQAABB","timestamp":"2025-04-25T16:38:01.804-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"osS0kgQWm4Ny7FpTAABD","timestamp":"2025-04-25T16:38:01.821-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"GcxSiK-ZNC26xUTUAABF","timestamp":"2025-04-25T16:38:01.838-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"ymrvDAq6V57PbhiMAABH","timestamp":"2025-04-25T16:38:01.853-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"VTAsfTw_rOFAYeHaAABJ","timestamp":"2025-04-25T16:38:01.869-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"qyH1bRJibkVpIwlyAABL","timestamp":"2025-04-25T16:38:01.884-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"XCw477VhC99wyqVwAAA3","timestamp":"2025-04-25T16:38:08.832-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"dx-SuzmNMoW66CqfAAA_","timestamp":"2025-04-25T16:38:08.832-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"uYybdfzyJdq6yRxsAAA-","timestamp":"2025-04-25T16:38:08.833-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"oje_lYn7FL0XvX5VAAA9","timestamp":"2025-04-25T16:38:08.833-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"bmJx46wUSggojLSmAAA8","timestamp":"2025-04-25T16:38:08.833-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GrmyIbRYV8Z-Vs6vAAA7","timestamp":"2025-04-25T16:38:08.833-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GcxSiK-ZNC26xUTUAABF","timestamp":"2025-04-25T16:38:08.834-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"osS0kgQWm4Ny7FpTAABD","timestamp":"2025-04-25T16:38:08.834-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"qNNkgxqij5kBYspQAABB","timestamp":"2025-04-25T16:38:08.835-04:00"}
{"level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"aZWUKZm1pN2onwpCAAA4","timestamp":"2025-04-25T16:38:08.835-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"zjOTWK9UQBYxWihgAABT","timestamp":"2025-04-25T16:38:11.888-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"zjOTWK9UQBYxWihgAABT","timestamp":"2025-04-25T16:38:11.889-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"X8ZLccUrFJLVMeNPAABU","timestamp":"2025-04-25T16:38:11.890-04:00"}
{"level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"X8ZLccUrFJLVMeNPAABU","timestamp":"2025-04-25T16:38:11.890-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Ud9kmJ_SnANsg_7aAABW","timestamp":"2025-04-25T16:38:11.902-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"wZ0JDbXlapTb8U-aAABX","timestamp":"2025-04-25T16:38:11.903-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"jHQQUaCEh98NNuzuAABZ","timestamp":"2025-04-25T16:38:11.916-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"0Rd6viRr0dgUIbtmAABa","timestamp":"2025-04-25T16:38:11.921-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"w_HGRfbq74oLN_qEAABb","timestamp":"2025-04-25T16:38:11.931-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"XXD7PhT1kwI8dsnWAABd","timestamp":"2025-04-25T16:38:11.950-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"M7jWc7-gSNbMxHD1AABf","timestamp":"2025-04-25T16:38:11.965-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"sILsa2fll_ikxkn-AABh","timestamp":"2025-04-25T16:38:11.981-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"un9m73qkosFklWYrAABj","timestamp":"2025-04-25T16:38:11.998-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"EnT3YQAooyJIfgdTAABl","timestamp":"2025-04-25T16:38:12.014-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"7X7VWRao_WD_XgDoAABn","timestamp":"2025-04-25T16:38:12.030-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"pfh9lh7l0gEJR-BHAABp","timestamp":"2025-04-25T16:39:31.973-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xTWr1EQwUePy0WveAABr","timestamp":"2025-04-25T16:39:31.990-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"3KpYtgyOO2hxG1vMAABt","timestamp":"2025-04-25T16:39:32.088-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"hAYIrAlqsZU7xAQaAABv","timestamp":"2025-04-25T16:39:32.100-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PgEklR8vpH6UZ9khAABx","timestamp":"2025-04-25T16:39:32.241-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"2qvdaypHLKij9mJ5AABz","timestamp":"2025-04-25T16:39:32.255-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"vgciZswmIH8c0NOTAAB1","timestamp":"2025-04-25T16:39:32.504-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"fubK49o6pKcVL1FoAAB3","timestamp":"2025-04-25T16:39:32.523-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"eFaMb8WbtT2OQoDYAAB5","timestamp":"2025-04-25T16:39:32.688-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"0r2um-jjN5rjU7vuAAB7","timestamp":"2025-04-25T16:39:32.699-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"D4b80dfjl1ZuYe1pAAB9","timestamp":"2025-04-25T16:39:32.888-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"TcsTklHGyVQyTqQsAAB_","timestamp":"2025-04-25T16:39:32.906-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"xEhW0MsH4MsHaezXAACB","timestamp":"2025-04-25T16:39:33.090-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"rXdjJhdSKHp9dkGJAACD","timestamp":"2025-04-25T16:39:33.111-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TrcNJTUx7AEFT2F9AACF","timestamp":"2025-04-25T16:39:33.244-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"AG_B9yQOd_7YJCtrAACH","timestamp":"2025-04-25T16:39:33.268-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"mdMi8QeIEZxDRQftAACJ","timestamp":"2025-04-25T16:39:34.004-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"M0Au75Bc-lKbBCf9AACL","timestamp":"2025-04-25T16:39:34.027-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"_IRjX9eZGbI3h8NfAACN","timestamp":"2025-04-25T16:39:34.171-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"dMrKuB3ECCJRH6VVAACP","timestamp":"2025-04-25T16:39:34.183-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"a-yDJEvaFoD1eze7AACR","timestamp":"2025-04-25T16:39:34.354-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"PYHzNMqE5-T1exbJAACT","timestamp":"2025-04-25T16:39:34.372-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"EMpZCXAUzDTCPgzuAACV","timestamp":"2025-04-25T16:39:34.625-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Jk708gpQSwAaceTbAACX","timestamp":"2025-04-25T16:39:34.639-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"a3tOWVSSIwo62DEUAACZ","timestamp":"2025-04-25T16:39:35.107-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"fJW_fg7ketIJ44f7AACb","timestamp":"2025-04-25T16:39:35.128-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"rf2K4iNxawqjSGY5AACd","timestamp":"2025-04-25T16:39:35.270-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"TMAsnpDWz03pXmrUAACf","timestamp":"2025-04-25T16:39:35.286-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"WhpdnT-qEf7ZN2Z0AACh","timestamp":"2025-04-25T16:39:35.374-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Ncv74CyY_VuXr-t4AACj","timestamp":"2025-04-25T16:39:35.396-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"t31bS5A0sAA3acroAACl","timestamp":"2025-04-25T16:39:35.587-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"CWg_0WThTVl5SLnFAACn","timestamp":"2025-04-25T16:39:35.594-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"0A-3uYQZSNvhUs_kAACp","timestamp":"2025-04-25T16:39:35.678-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"Wz2G3vqYcVaOctLcAACr","timestamp":"2025-04-25T16:39:35.690-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"hLih23tE5aK8hTPUAACt","timestamp":"2025-04-25T16:39:35.893-04:00"}
{"connectionCount":10,"level":"warn","message":"Socket.IO connection throttled: Too many connections","socketId":"S54kseRwBXli2mr-AACv","timestamp":"2025-04-25T16:39:35.910-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"S4lPkyffhte7fseRAACx","timestamp":"2025-04-25T16:39:37.934-04:00"}
{"authToken":"present","level":"info","message":"Socket.IO client connected","socketId":"OpdHinrlQ-WKtEqrAACz","timestamp":"2025-04-25T16:39:37.943-04:00"}
{"level":"info","message":"Connected to MongoDB: idurar_db","timestamp":"2025-04-26T10:59:47.964-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-26T10:59:47.965-04:00"}
{"level":"info","message":"db.js: Task schema registered with stagedFiles validation and indexing","timestamp":"2025-04-26T10:59:47.973-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-26T10:59:47.974-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-26T10:59:47.974-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-26T10:59:47.975-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-26T10:59:47.976-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered","timestamp":"2025-04-26T10:59:47.977-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-26T10:59:47.985-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T10:59:48.048-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-26T11:17:06.397-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-26T11:17:06.398-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-26T11:17:06.403-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-26T11:17:06.404-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-26T11:17:06.404-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-26T11:17:06.405-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-26T11:17:06.405-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-26T11:17:06.406-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-26T11:17:06.411-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:17:06.443-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-26T11:22:21.591-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-26T11:22:21.592-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-26T11:22:21.596-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-26T11:22:21.597-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-26T11:22:21.598-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-26T11:22:21.599-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-26T11:22:21.600-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-26T11:22:21.602-04:00"}
{"level":"info","message":"db.js: Setting schema registered with unique index on key","timestamp":"2025-04-26T11:22:21.602-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-26T11:22:21.607-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:22:21.608-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-26T11:22:21.609-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-26T11:22:21.610-04:00"}
{"level":"debug","message":"db.js: Accessing model Sponsor","timestamp":"2025-04-26T11:22:21.610-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-26T11:22:21.611-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-26T11:22:21.611-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-26T11:22:21.611-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:22:21.646-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-26T11:22:22.015-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-26T11:22:21.647-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-26T11:22:21.647-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:22:21.850-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-26T11:22:21.924-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-26T11:22:21.924-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-26T11:22:22.017-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-26T11:29:02.291-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-26T11:29:02.292-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-26T11:29:02.297-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-26T11:29:02.298-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-26T11:29:02.299-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-26T11:29:02.299-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-26T11:29:02.300-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-26T11:29:02.301-04:00"}
{"level":"info","message":"db.js: Setting schema registered with unique index on key","timestamp":"2025-04-26T11:29:02.301-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-26T11:29:02.306-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:29:02.307-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-26T11:29:02.308-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-26T11:29:02.308-04:00"}
{"level":"debug","message":"db.js: Accessing model Sponsor","timestamp":"2025-04-26T11:29:02.308-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-26T11:29:02.309-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-26T11:29:02.309-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-26T11:29:02.309-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:29:02.353-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-26T11:29:02.750-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-26T11:29:02.353-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-26T11:29:02.354-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-26T11:29:02.575-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-26T11:29:02.654-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-26T11:29:02.655-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-26T11:29:02.677-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-26T11:29:02.752-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-28T09:22:56.076-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-28T09:22:56.076-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-28T09:22:56.085-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-28T09:22:56.086-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-28T09:22:56.086-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-28T09:22:56.087-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-28T09:22:56.088-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-28T09:22:56.088-04:00"}
{"level":"info","message":"db.js: Setting schema registered with unique index on key","timestamp":"2025-04-28T09:22:56.088-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-28T09:22:56.094-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T09:22:56.095-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T09:22:56.096-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T09:22:56.096-04:00"}
{"level":"debug","message":"db.js: Accessing model Sponsor","timestamp":"2025-04-28T09:22:56.096-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T09:22:56.097-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T09:22:56.097-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T09:22:56.097-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T09:22:56.150-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-28T09:22:56.901-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T09:22:56.150-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T09:22:56.151-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T09:22:56.552-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T09:22:56.743-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T09:22:56.744-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T09:22:56.783-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-28T09:22:56.903-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-28T12:30:40.087-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-28T12:30:40.087-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-28T12:30:40.092-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-28T12:30:40.093-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-28T12:30:40.093-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-28T12:30:40.093-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-28T12:30:40.094-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-28T12:30:40.094-04:00"}
{"level":"info","message":"db.js: Setting schema registered with unique index on key","timestamp":"2025-04-28T12:30:40.095-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-28T12:30:40.100-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:30:40.100-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T12:30:40.101-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T12:30:40.101-04:00"}
{"level":"debug","message":"db.js: Accessing model Sponsor","timestamp":"2025-04-28T12:30:40.101-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T12:30:40.101-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T12:30:40.102-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T12:30:40.102-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:30:40.126-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-28T12:30:40.491-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T12:30:40.127-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T12:30:40.127-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:30:40.337-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T12:30:40.414-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T12:30:40.414-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T12:30:40.432-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-28T12:30:40.493-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-28T12:32:41.160-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-28T12:32:41.161-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-28T12:32:41.165-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-28T12:32:41.166-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-28T12:32:41.166-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-28T12:32:41.167-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-28T12:32:41.167-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-28T12:32:41.168-04:00"}
{"level":"info","message":"db.js: Setting schema registered with unique index on key","timestamp":"2025-04-28T12:32:41.168-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-28T12:32:41.173-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:32:41.174-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T12:32:41.174-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T12:32:41.175-04:00"}
{"level":"debug","message":"db.js: Accessing model Sponsor","timestamp":"2025-04-28T12:32:41.175-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T12:32:41.175-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T12:32:41.176-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T12:32:41.176-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:32:41.207-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-28T12:32:41.579-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T12:32:41.208-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T12:32:41.208-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:32:41.419-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T12:32:41.497-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T12:32:41.498-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T12:32:41.517-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-28T12:32:41.581-04:00"}
{"level":"info","message":"db.js: Connected to MongoDB: idurar_db","timestamp":"2025-04-28T12:45:24.326-04:00"}
{"level":"info","message":"db.js: Starting schema registration","timestamp":"2025-04-28T12:45:24.326-04:00"}
{"level":"info","message":"db.js: Task schema registered with unique index on taskId","timestamp":"2025-04-28T12:45:24.331-04:00"}
{"level":"info","message":"db.js: Admin schema registered","timestamp":"2025-04-28T12:45:24.332-04:00"}
{"level":"info","message":"db.js: AdminPassword schema registered","timestamp":"2025-04-28T12:45:24.333-04:00"}
{"level":"info","message":"db.js: Sponsor schema registered","timestamp":"2025-04-28T12:45:24.333-04:00"}
{"level":"info","message":"db.js: Memory schema registered","timestamp":"2025-04-28T12:45:24.334-04:00"}
{"level":"info","message":"db.js: BackendProposal schema registered with index on taskId","timestamp":"2025-04-28T12:45:24.335-04:00"}
{"level":"info","message":"db.js: Setting schema registered with unique index on key","timestamp":"2025-04-28T12:45:24.336-04:00"}
{"level":"info","message":"db.js: Model imports completed","timestamp":"2025-04-28T12:45:24.345-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:45:24.346-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T12:45:24.346-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T12:45:24.347-04:00"}
{"level":"debug","message":"db.js: Accessing model Sponsor","timestamp":"2025-04-28T12:45:24.347-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T12:45:24.347-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T12:45:24.348-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T12:45:24.348-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:45:24.378-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-28T12:45:24.752-04:00"}
{"level":"debug","message":"db.js: Accessing model Memory","timestamp":"2025-04-28T12:45:24.379-04:00"}
{"level":"debug","message":"db.js: Accessing model BackendProposal","timestamp":"2025-04-28T12:45:24.379-04:00"}
{"level":"debug","message":"db.js: Accessing model Task","timestamp":"2025-04-28T12:45:24.600-04:00"}
{"level":"debug","message":"db.js: Accessing model Admin","timestamp":"2025-04-28T12:45:24.676-04:00"}
{"level":"debug","message":"db.js: Accessing model AdminPassword","timestamp":"2025-04-28T12:45:24.676-04:00"}
{"level":"debug","message":"db.js: Accessing model Setting","timestamp":"2025-04-28T12:45:24.694-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-28T12:45:24.754-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"IhYIZwGE58dKibU5AAAF","timestamp":"2025-04-28T12:45:37.488-04:00"}
{"clientIp":"::1","level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"IhYIZwGE58dKibU5AAAF","timestamp":"2025-04-28T12:45:37.488-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"lcs_Ux57UWmbgI7_AAAG","timestamp":"2025-04-28T12:45:37.492-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"ralG2HT4UgeviVqGAAAI","timestamp":"2025-04-28T12:45:37.523-04:00"}
{"level":"info","message":"Entering /api/grok/tasks","timestamp":"2025-04-28T16:45:37.534Z"}
{"level":"debug","message":"GET /grok/tasks: Returning 1 tasks","stagedFiles":[[]],"taskIds":["93364ae9-5b5d-49de-b39e-eb31f6e388b9"],"timestamp":"2025-04-28T16:45:37.537Z"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"JbGA5ouSjTvgTPEmAAAK","timestamp":"2025-04-28T12:45:37.543-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"JbGA5ouSjTvgTPEmAAAK","timestamp":"2025-04-28T12:45:37.585-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"XX7yGmXnp0rNi37nAAAM","timestamp":"2025-04-28T12:45:37.596-04:00"}
{"level":"info","message":"socket: Initializing Socket.IO","timestamp":"2025-04-28T13:06:13.280-04:00"}
{"level":"info","message":"Socket.IO initialized successfully","timestamp":"2025-04-28T13:06:13.282-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"55FpoIs4gIVtzdBBAAAB","timestamp":"2025-04-28T13:06:13.491-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"SlEQx-P2U-JFNlXeAAAD","timestamp":"2025-04-28T13:06:13.702-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"CrN3zSCoH2sRjcnEAAAF","timestamp":"2025-04-28T13:06:15.716-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"sF59DiR6YNUreIWOAAAH","timestamp":"2025-04-28T13:06:18.714-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"55FpoIs4gIVtzdBBAAAB","timestamp":"2025-04-28T13:06:31.578-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"sF59DiR6YNUreIWOAAAH","timestamp":"2025-04-28T13:06:31.580-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"CrN3zSCoH2sRjcnEAAAF","timestamp":"2025-04-28T13:06:31.581-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"SlEQx-P2U-JFNlXeAAAD","timestamp":"2025-04-28T13:06:31.582-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"SxYHLI0DZm7Zn2JwAAAO","timestamp":"2025-04-28T13:06:35.632-04:00"}
{"clientIp":"::1","level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"SxYHLI0DZm7Zn2JwAAAO","timestamp":"2025-04-28T13:06:35.632-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"-0XWgtm0DyZlpjWPAAAQ","timestamp":"2025-04-28T13:06:35.636-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"GOOCLL0o1G3x26meAAAT","timestamp":"2025-04-28T13:06:35.666-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"QOZXgd85adrCsd-7AAAU","timestamp":"2025-04-28T13:06:35.666-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"FGfaOlH3z_BhtxFSAAAV","timestamp":"2025-04-28T13:06:35.667-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"QOZXgd85adrCsd-7AAAU","timestamp":"2025-04-28T13:06:35.717-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"GOOCLL0o1G3x26meAAAT","timestamp":"2025-04-28T13:06:37.994-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"-0XWgtm0DyZlpjWPAAAQ","timestamp":"2025-04-28T13:06:37.996-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"FGfaOlH3z_BhtxFSAAAV","timestamp":"2025-04-28T13:06:37.997-04:00"}
{"authToken":"present","clientIp":"::ffff:127.0.0.1","level":"info","message":"Socket.IO client connected","socketId":"H2e9VNnfO8uJYTaPAAAc","timestamp":"2025-04-28T13:06:41.484-04:00"}
{"clientIp":"::ffff:127.0.0.1","level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"H2e9VNnfO8uJYTaPAAAc","timestamp":"2025-04-28T13:06:41.484-04:00"}
{"authToken":"present","clientIp":"::ffff:127.0.0.1","level":"info","message":"Socket.IO client connected","socketId":"U2IKAnV6gCnXNewGAAAe","timestamp":"2025-04-28T13:06:41.487-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"wFtWaUVBB3Y5PYn9AAAh","timestamp":"2025-04-28T13:06:41.521-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"jz-xT7QUwpnuwWhDAAAi","timestamp":"2025-04-28T13:06:41.525-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"jz-xT7QUwpnuwWhDAAAi","timestamp":"2025-04-28T13:06:41.571-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"o9lmDy_EIuhoWc5lAAAk","timestamp":"2025-04-28T13:06:41.590-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"lJXI56vweUDdFOEOAAAl","timestamp":"2025-04-28T13:06:41.592-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"lJXI56vweUDdFOEOAAAl","timestamp":"2025-04-28T13:06:48.009-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"VHV8q3wK1ViLsUiTAAAn","timestamp":"2025-04-28T13:06:48.044-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"wFtWaUVBB3Y5PYn9AAAh","timestamp":"2025-04-28T13:06:53.202-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"VHV8q3wK1ViLsUiTAAAn","timestamp":"2025-04-28T13:06:53.204-04:00"}
{"clientIp":"::ffff:127.0.0.1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"U2IKAnV6gCnXNewGAAAe","timestamp":"2025-04-28T13:06:53.204-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"transport close","socketId":"o9lmDy_EIuhoWc5lAAAk","timestamp":"2025-04-28T13:06:53.205-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"rG9ge856sxnlTsvoAAAv","timestamp":"2025-04-28T13:06:56.712-04:00"}
{"clientIp":"::1","level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"rG9ge856sxnlTsvoAAAv","timestamp":"2025-04-28T13:06:56.713-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"YeiqxoUvPEKCfLl8AAAw","timestamp":"2025-04-28T13:06:56.715-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"p62vp40QS50VJpoXAAAz","timestamp":"2025-04-28T13:06:56.737-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"nxhXIqXv3UB5bvKwAAA0","timestamp":"2025-04-28T13:06:56.747-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"9eWZGaBhL-rbEscuAAA1","timestamp":"2025-04-28T13:06:56.753-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"nxhXIqXv3UB5bvKwAAA0","timestamp":"2025-04-28T13:06:56.756-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"7GYnT2QqphdBi--CAAA3","timestamp":"2025-04-28T13:06:56.807-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"7GYnT2QqphdBi--CAAA3","timestamp":"2025-04-28T13:07:09.517-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"9eWZGaBhL-rbEscuAAA1","timestamp":"2025-04-28T13:21:18.740-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"YeiqxoUvPEKCfLl8AAAw","timestamp":"2025-04-28T13:21:18.740-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"p62vp40QS50VJpoXAAAz","timestamp":"2025-04-28T13:21:18.741-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"50H8LOhi-vchy3TEAAA-","timestamp":"2025-04-28T13:21:18.775-04:00"}
{"clientIp":"::1","level":"warn","message":"Socket.IO client with invalid props","props":{},"socketId":"50H8LOhi-vchy3TEAAA-","timestamp":"2025-04-28T13:21:18.775-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"cFwpRMKe3E0fVHjVAAA_","timestamp":"2025-04-28T13:21:18.776-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"19rJvl263x_2LgjpAABE","timestamp":"2025-04-28T13:21:18.944-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"tK3d9Obz5T1sm8gUAABF","timestamp":"2025-04-28T13:21:18.945-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"DY8QYHsEGWWz8JRLAABG","timestamp":"2025-04-28T13:21:18.945-04:00"}
{"clientIp":"::1","level":"info","message":"Socket.IO client disconnected","reason":"client namespace disconnect","socketId":"19rJvl263x_2LgjpAABE","timestamp":"2025-04-28T13:22:00.706-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"Q439a_NAd_oI-dvZAABI","timestamp":"2025-04-28T13:22:00.711-04:00"}
{"clientIp":"::1","level":"warn","message":"Socket.IO client with invalid props","props":{"client":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36","source":"FeedbackButton","token":"present"},"socketId":"Q439a_NAd_oI-dvZAABI","timestamp":"2025-04-28T13:22:00.711-04:00"}
{"authToken":"present","clientIp":"::1","level":"info","message":"Socket.IO client connected","socketId":"7PHYdV941vrb1iNAAABK","timestamp":"2025-04-28T13:22:01.710-04:00"}
{"clientIp":"::1","level":"warn","message":"Socket.IO client with invalid props","props":{"client":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36","source":"FeedbackButton","token":"present"},"socketId":"7PHYdV941vrb1iNAAABK","timestamp":"2025-04-28T13:22:01.711-04:00"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":[],"isMultiFile":true,"target":"crm"},"prompt":"Build a CRM system","taskId":"f5ead6b8-65e8-441f-b71b-d5ad0c14d2c7","timestamp":"2025-04-28T20:01:00.096Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":[],"isMultiFile":true,"target":"crm"},"prompt":"Build a CRM system","taskId":"90e2edb8-d948-41fd-9c7e-cee197509125","timestamp":"2025-04-28T21:47:26.280Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":[],"isMultiFile":true,"target":"crm"},"prompt":"Build a CRM system","taskId":"05ce533d-3e1c-4636-9af3-49e49d94b5af","timestamp":"2025-04-28T22:06:12.858Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":[],"isMultiFile":true,"target":"crm"},"prompt":"Build a CRM system","taskId":"af9c661a-1203-41e5-a728-d2dbfae81e0c","timestamp":"2025-04-28T22:19:24.733Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[{"description":"Add payroll endpoint to EmployeeLog","file":"grok.js","reason":"Feature addition for employee compensation management"}],"features":["payroll"],"isMultiFile":true,"target":"crm"},"prompt":"Build CRM system with payroll and AI","taskId":"6ecd1564-99c3-4339-9f54-13ff29921b4c","timestamp":"2025-04-28T22:20:54.111Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features","taskId":"cead1610-725b-4eb2-907e-4a23439edd6c","timestamp":"2025-04-28T22:46:18.377Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features","taskId":"3fbc5452-c6f4-4c12-b7d8-15fde2b4d31a","timestamp":"2025-04-29T00:46:42.226Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features\t","taskId":"e2bf5751-2d4a-4f45-94b4-d59eec7882cc","timestamp":"2025-04-29T01:14:49.244Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features","taskId":"00287f5d-2036-4795-845f-ec037772fd44","timestamp":"2025-04-29T01:51:41.342Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features","taskId":"2a6b99c6-2d18-4a4b-b39d-91fa8f251d91","timestamp":"2025-04-29T02:13:36.643Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features\t","taskId":"aa262815-aff4-4ff8-817a-19ee20779108","timestamp":"2025-04-29T02:27:24.837Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features","taskId":"7ccf405a-a485-49cf-acfd-953a4c44983b","timestamp":"2025-04-29T02:28:15.129Z"}
{"level":"info","message":"Parsed prompt","parsedData":{"action":"create","backendChanges":[],"features":["employee"],"isMultiFile":true,"target":"crm"},"prompt":"Build an awesome CRM system, with a Employee Log In and Out system, accounting, all with state of the art AI features","taskId":"839eb133-7eef-4194-8277-24998ce94cce","timestamp":"2025-04-29T13:07:23.684Z"}
