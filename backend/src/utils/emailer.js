/*
 * File Path: backend/src/utils/emailer.js
 * Purpose: Sends emails with content generated by Grok API for Allur Space Console.
 * How It Works:
 *   - Uses nodemailer for email transport and mock Grok for content generation.
 *   - Generates email content based on task or system events (e.g., task completion, errors).
 *   - Logs email sending to idurar_db.logs and ERROR_LOG.md for traceability.
 * Mechanics:
 *   - `sendEmail`: Generates email content with mock Grok, sends via nodemailer, retries on failure.
 *   - Validates inputs (recipient, subject, taskId) to prevent errors.
 *   - Supports HTML and plain text email formats.
 * Dependencies:
 *   - nodemailer@6.9.15: Email transport.
 *   - logUtils.js: MongoDB logging.
 *   - fileUtils.js: Error logging to ERROR_LOG.md.
 * Dependents:
 *   - taskManager.js: Sends emails for task events (e.g., completion, errors).
 * Why Itâ€™s Here:
 *   - Integrates Grok API for email content generation, addressing issue #46 (User, 05/01/2025).
 * Change Log:
 *   - 05/01/2025: Created with nodemailer and @xai/grok integration (Grok).
 *   - 05/08/2025: Mocked @xai/grok to fix MODULE_NOT_FOUND (Grok).
 *   - 05/08/2025: Fixed SMTP configuration for Gmail (Grok).
 *     - Why: Invalid login: 535 Authentication failed (User, 05/04/2025).
 *     - How: Set explicit smtp.gmail.com host, updated .env instructions, preserved mock Grok logic.
 *     - Test: Run `node -e "require('./src/utils/emailer').sendEmail('test@example.com', 'Test', 'test-id', 'test-event')"`, verify email sent.
 * Test Instructions:
 *   - Run `npm start`, POST /api/grok/edit with "Create an inventory system".
 *   - Verify email sent to admin@idurarapp.com with mock content.
 *   - Check idurar_db.logs for "Email sent successfully" log.
 *   - Check ERROR_LOG.md for any send failures.
 * Rollback Instructions:
 *   - Revert to emailer.js.bak (`mv backend/src/utils/emailer.js.bak backend/src/utils/emailer.js`).
 *   - Verify /api/grok/edit processes tasks without email errors.
 * Future Enhancements:
 *   - Add email template support (Sprint 4).
 *   - Integrate with CRM for recipient management (Sprint 3).
 */

const nodemailer = require('nodemailer');
const { logInfo, logError } = require('./logUtils');
const { appendLog, errorLogPath } = require('./fileUtils');

// Mock Grok class to simulate @xai/grok
class MockGrok {
  constructor({ apiKey }) {
    this.apiKey = apiKey;
  }

  async generate({ prompt }) {
    // Simulate Grok response
    return {
      text: `Generated email content for: ${prompt}\nTask completed successfully. Review details in Allur Space Console.`,
    };
  }
}

const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: process.env.SMTP_PORT || 587,
  secure: false, // Use TLS
  auth: {
    user: process.env.SMTP_USER || 'hiwaydriveintheater@gmail.com',
    pass: process.env.SMTP_PASS || 'zlyk txhn cyvm rzac',
  },
});

const grok = new MockGrok({ apiKey: process.env.GROK_API_KEY || 'mock-key' });

/**
 * Sends an email with AI-generated content.
 * @param {string} recipient - Email recipient.
 * @param {string} subject - Email subject.
 * @param {string} taskId - Task ID for context.
 * @param {string} eventType - Event type (e.g., task_completed, error).
 * @returns {Promise<void>}
 */
async function sendEmail(recipient, subject, taskId, eventType) {
  if (!recipient || !subject || !taskId || !eventType) {
    await logError('Invalid email inputs', 'emailer', {
      recipient,
      subject,
      taskId,
      eventType,
      timestamp: new Date().toISOString(),
    });
    throw new Error('Recipient, subject, taskId, and eventType are required');
  }

  let attempt = 0;
  const maxAttempts = 3;
  while (attempt < maxAttempts) {
    try {
      // Generate email content with mock Grok
      const prompt = `Generate an email for a ${eventType} event in Allur Space Console. Task ID: ${taskId}. Subject: ${subject}. Make it professional, concise, and include a call to action.`;
      const grokResponse = await grok.generate({ prompt });
      const content = grokResponse.text || `Task ${taskId} ${eventType.replace('_', ' ')}. Please review in Allur Space Console.`;

      // Send email
      const info = await transporter.sendMail({
        from: '"Allur Space Console" <no-reply@idurarapp.com>',
        to: recipient,
        subject,
        text: content,
        html: `<p>${content.replace(/\n/g, '<br>')}</p><a href="http://localhost:3000/grok">View in Console</a>`,
      });

      await logInfo('Email sent successfully', 'emailer', {
        taskId,
        recipient,
        subject,
        messageId: info.messageId,
        timestamp: new Date().toISOString(),
      });
      await appendLog(errorLogPath, `# Email Sent\nTask ID: ${taskId}\nRecipient: ${recipient}\nSubject: ${subject}\nEvent: ${eventType}`);
      return;
    } catch (err) {
      attempt++;
      await logError(`Email send attempt ${attempt}/${maxAttempts} failed: ${err.message}`, 'emailer', {
        taskId,
        recipient,
        subject,
        stack: err.stack,
        attempt,
        timestamp: new Date().toISOString(),
      });
      if (attempt >= maxAttempts) {
        await appendLog(errorLogPath, `# Email Send Error\nTask ID: ${taskId}\nRecipient: ${recipient}\nSubject: ${subject}\nError: ${err.message}\nStack: ${err.stack}`);
        throw new Error(`Failed to send email after ${maxAttempts} attempts: ${err.message}`);
      }
      await new Promise(resolve => setTimeout(resolve, 500 * attempt));
    }
  }
}

module.exports = { sendEmail };
